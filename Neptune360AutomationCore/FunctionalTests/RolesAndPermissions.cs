using NUnit.Framework;
using System;
using System.Collections.Generic;

namespace Neptune360UIAutomation
{
    public class RolesAndPermissions : TestBaseTemplate
    {
        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Landing Page
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5590_RP_Neptune_Admin_Landing_Page()
        {
            testCaseId = "TC-5590";
            qTestUniqueId = "19482594";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLandingPageDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Search Account
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5591_RP_Neptune_Admin_Search_Account()
        {
            testCaseId = "TC-5591";
            qTestUniqueId = "19482595";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateSearchAccountsOption();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Dashboard Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5592_RP_Neptune_Admin_Dashboard_Widget()
        {
            testCaseId = "TC-5592";
            qTestUniqueId = "19482596";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateDashboardWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Customer Inquiry Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5593_RP_Neptune_Admin_Customer_Inquiry_Widget()
        {
            testCaseId = "TC-5593";
            qTestUniqueId = "19482597";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateCustomerInquiryWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Billing Service Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5594_RP_Neptune_Admin_Billing_Service_Widget()
        {
            testCaseId = "TC-5594";
            qTestUniqueId = "19482598";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateBillingServicesWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Notifications Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5595_RP_Neptune_Admin_Notifications_Widget()
        {
            testCaseId = "TC-5595";
            qTestUniqueId = "19482599";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateNotificationsWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_User Management Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5596_RP_Neptune_Admin_User_Management_Widget()
        {
            testCaseId = "TC-5596";
            qTestUniqueId = "19482600";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserManagementWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Utility Management Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5597_RP_Neptune_Admin_Utility_Management_Widget()
        {
            testCaseId = "TC-5597";
            qTestUniqueId = "19482601";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUtilityManagementWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5598_RP_Neptune_Admin_Left_Navigation()
        {
            testCaseId = "TC-5598";
            qTestUniqueId = "19482602";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavigationPaneExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin Dashboard_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5599_RP_Neptune_Admin_Dashboard_Left_Navigation()
        {
            testCaseId = "TC-5599";
            qTestUniqueId = "19482603";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavDashboardExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin Customer Inquiry_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5600_RP_Neptune_Admin_Customer_Inquiry_Left_Navigation()
        {
            testCaseId = "TC-5600";
            qTestUniqueId = "19482604";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavCustomerInquiryExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin Billing Services_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5601_RP_Neptune_Admin_Billing_Services_Left_Navigation()
        {
            testCaseId = "TC-5601";
            qTestUniqueId = "19482605";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavBillingServicesExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin Notifications_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5602_RP_Neptune_Admin_Notifications_Left_Navigation()
        {
            testCaseId = "TC-5602";
            qTestUniqueId = "19482606";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavNotificationsExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin Utility Management_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5603_RP_Neptune_Admin_Utility_Management_Left_Navigation()
        {
            testCaseId = "TC-5603";
            qTestUniqueId = "19482607";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavUtilityManagementExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin Platform Management_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5604_RP_Neptune_Admin_Platform_Management_Left_Navigation()
        {
            testCaseId = "TC-5604";
            qTestUniqueId = "19482608";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavPlatformManagementExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin User Management_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5605_RP_Neptune_Admin_User_Management_Left_Navigation()
        {
            testCaseId = "TC-5605";
            qTestUniqueId = "19482609";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavUserManagementExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin Roles and Permissions_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5606_RP_Neptune_Admin_RP_Left_Navigation()
        {
            testCaseId = "TC-5606";
            qTestUniqueId = "19482610";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavRolesAndPermissionsExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin Notifications_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5608_RP_Neptune_Admin_Notifications_Left_Navigation()
        {
            testCaseId = "TC-5608";
            qTestUniqueId = "19482612";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavNotificationsExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Top Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5609_RP_Neptune_Admin_Top_Navigation()
        {
            testCaseId = "TC-5609";
            qTestUniqueId = "19482613";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateTopNavigationPaneExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Home Top Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5610_RP_Neptune_Admin_Home_Top_Navigation()
        {
            testCaseId = "TC-5610";
            qTestUniqueId = "19482614";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateHomeOptionExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Profile Top Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5611_RP_Neptune_Admin_Profile_Top_Navigation()
        {
            testCaseId = "TC-5611";
            qTestUniqueId = "19482615";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateProfileOptionTopNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Logout Top Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5612_RP_Neptune_Admin_Logout_Top_Navigation()
        {
            testCaseId = "TC-5612";
            qTestUniqueId = "19482616";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLogOutOptionTopNavigation();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Choose Utility
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5614_RP_Neptune_Admin_Choose_Utility()
        {
            testCaseId = "TC-5614";
            qTestUniqueId = "19482618";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateChooseUtilitiesTopNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_User/Identity Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5615_RP_Neptune_Admin_User_Identity_Management()
        {
            testCaseId = "TC-5615";
            qTestUniqueId = "19482619";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Create User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5616_RP_Neptune_Admin_Create_User()
        {
            testCaseId = "TC-5616";
            qTestUniqueId = "19482620";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateCreateUserFields();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Search User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5617_RP_Neptune_Admin_Search_User()
        {
            testCaseId = "TC-5617";
            qTestUniqueId = "19482621";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateSearchUserAccount(firstName);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Edit User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5618_RP_Neptune_Admin_Edit_User()
        {
            testCaseId = "TC-5618";
            qTestUniqueId = "19482622";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateEditUserDisplay();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_View User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5619_RP_Neptune_Admin_View_User()
        {
            testCaseId = "TC-5619";
            qTestUniqueId = "19482623";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateUsersListForUtility();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Deactivate User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5620_RP_Neptune_Admin_Deactivate_User()
        {
            testCaseId = "TC-5620";
            qTestUniqueId = "19482624";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateDeactiveUser();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Send Password Reset
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5621_RP_Neptune_Admin_Send_Password_Reset()
        {
            testCaseId = "TC-5621";
            qTestUniqueId = "19482625";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateLandingPagePwdResetDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Utility Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5627_RP_Neptune_Admin_Utility_Management()
        {
            testCaseId = "TC-5627";
            qTestUniqueId = "19482631";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateHeaderUtilityManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Create Utility
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5628_RP_Neptune_Admin_Create_Utility()
        {
            testCaseId = "TC-5628";
            qTestUniqueId = "19482632";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCreateUtilityDlg();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Edit Utility
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5630_RP_Neptune_Admin_Edit_Utility()
        {
            testCaseId = "TC-5630";
            qTestUniqueId = "19482634";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateEditUtilityButtonDisplay();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_View Utility
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5632_RP_Neptune_Admin_View_Utility()
        {
            testCaseId = "TC-5632";
            qTestUniqueId = "19482636";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateUtilityDetails();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Code Maintenance
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5634_RP_Neptune_Admin_Code_Maintenance()
        {
            startDate = DateTime.Now;
            testCaseId = "TC-5634";
            qTestUniqueId = "19482638";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCodeManagementSectionDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Roles and Permissions_Neptune Admin_Create Code
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5635_RP_Neptune_Admin_Create_Code()
        {
            testCaseId = "TC-5635";
            qTestUniqueId = "19482639";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCreateCodeDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Search Code
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5636_RP_Neptune_Admin_Search_Code()
        {
            testCaseId = "TC-5636";
            qTestUniqueId = "19482640";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                code = testData["Code"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateSearchCode(code);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Edit Code
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5637_RP_Neptune_Admin_Edit_Code()
        {
            testCaseId = "TC-5637";
            qTestUniqueId = "19482641";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                code = testData["Code"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateEditCode(code);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_View Code
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5638_RP_Neptune_Admin_View_Code()
        {
            testCaseId = "TC-5638";
            qTestUniqueId = "19482642";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateViewCode();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Select and Delete Codes
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5639_RP_Neptune_Admin_Select_and_Delete_Codes()
        {
            testCaseId = "TC-5639";
            qTestUniqueId = "19482643";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                code = testData["Code"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateDeleteCode(code);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Role Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5640_RP_Neptune_Admin_Role_Management()
        {
            testCaseId = "TC-5640";
            qTestUniqueId = "19482644";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Create Role
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5641_RP_Neptune_Admin_Create_Role()
        {
            testCaseId = "TC-5641";
            qTestUniqueId = "19482645";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateCreateRole();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Edit Role
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5642_RP_Neptune_Admin_Edit_Role()
        {
            testCaseId = "TC-5642";
            qTestUniqueId = "19482646";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateEditRole();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Enable/Disable Permissions
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5643_RP_Neptune_Admin_Enable_Disable_Permissions()
        {
            testCaseId = "TC-5643";
            qTestUniqueId = "19482647";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateEditRole();
                rolesPermissons.ValidateEnableDisablePermissions();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_View Role
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5644_RP_Neptune_Admin_View_Role()
        {
            testCaseId = "TC-5644";
            qTestUniqueId = "19482648";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateViewRole();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Delete Role
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5645_RP_Neptune_Admin_Delete_Role()
        {
            testCaseId = "TC-5645";
            qTestUniqueId = "19482649";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateViewRole();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Customer Inquiry
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5646_RP_Neptune_Admin_Customer_Inquiry()
        {
            testCaseId = "TC-5646";
            qTestUniqueId = "19482650";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageCustomerInquiry(url, userName, password);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Search and Select Account
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5647_RP_Neptune_Admin_Search_and_Select_Account()
        {
            testCaseId = "TC-5647";
            qTestUniqueId = "19482651";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageCustomerInquiry(url, userName, password);
                string accountNo = testData["AccountNumber"];
                customerInquiry.ValidateSearchSelectAccountNo(accountNo);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Edit Asset Configuration
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5648_RP_Neptune_Admin_Edit_Asset_Configuration()
        {
            testCaseId = "TC-5648";
            qTestUniqueId = "19482652";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageCustomerInquiry(url, userName, password);
                string accountNo = testData["AccountNumber"];
                customerInquiry.ValidateSearchSelectAccountNo(accountNo);
                customerInquiry.ValidateEditAssertConfig();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Select a Meter
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5649_RP_Neptune_Admin_Select_a_Meter()
        {
            testCaseId = "TC-5649";
            qTestUniqueId = "19482653";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageCustomerInquiry(url, userName, password);
                string accountNo = testData["AccountNumber"];
                customerInquiry.ValidateSearchSelectAccountNo(accountNo);
                customerInquiry.ValidateSelectMeter();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_View Dashboard
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5650_RP_Neptune_Admin_View_Dashboard()
        {
            testCaseId = "TC-5650";
            qTestUniqueId = "19482654";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageCustomerInquiry(url, userName, password);
                string accountNo = testData["AccountNumber"];
                customerInquiry.ValidateSearchSelectAccountNo(accountNo);
                customerInquiry.ValidateViewDashboard();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Import Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5651_RP_Neptune_Admin_Import_Management()
        {
            testCaseId = "TC-5651";
            qTestUniqueId = "19482655";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavImportManagement(url, userName, password);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Import
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5652_RP_Neptune_Admin_Import()
        {
            testCaseId = "TC-5652";
            qTestUniqueId = "19482656";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavImportManagement(url, userName, password);
                billingServicesImport.ValidateImport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_View Import Files
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5653_RP_Neptune_Admin_View_Import_Files()
        {
            testCaseId = "TC-5653";
            qTestUniqueId = "19482657";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavImportManagement(url, userName, password);
                billingServicesImport.ValidateImport();
                billingServicesImport.ValidateImportFiles();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Device Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5655_RP_Neptune_Admin_Device_Management()
        {
            testCaseId = "TC-5655";
            qTestUniqueId = "19482659";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCodeManagementSectionDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Create Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5656_RP_Neptune_Admin_Create_Collector()
        {
            testCaseId = "TC-5656";
            qTestUniqueId = "19482660";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCreateCollector();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Create Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5657_RP_Neptune_Admin_Create_Gateway()
        {
            testCaseId = "TC-5657";
            qTestUniqueId = "19482661";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCreateGateway();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Edit Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5658_RP_Neptune_Admin_Edit_Collector()
        {
            testCaseId = "TC-5658";
            qTestUniqueId = "19482662";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValiadateEditCollector();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Edit Collector Description
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5659_RP_Neptune_Admin_Edit_Collector_Description()
        {
            testCaseId = "TC-5659";
            qTestUniqueId = "19482663";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateDeviceName();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Build USB for Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5660_RP_Neptune_Admin_Build_USB_for_Collector()
        {
            testCaseId = "TC-5660";
            qTestUniqueId = "19482664";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateBuidUSBCollector();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Edit Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5662_RP_Neptune_Admin_Edit_Gateway()
        {
            testCaseId = "TC-5662";
            qTestUniqueId = "19482666";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateEditGateway();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Edit Gateway Description
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5663_RP_Neptune_Admin_Edit_Gateway_Description()
        {
            testCaseId = "TC-5663";
            qTestUniqueId = "19482667";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateDeviceName();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Build USB for Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5664_RP_Neptune_Admin_Build_USB_for_Gateway()
        {
            testCaseId = "TC-5664";
            qTestUniqueId = "19482668";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateBuildUSBGateway();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_View Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5667_RP_Neptune_Admin_View_Collector()
        {
            testCaseId = "TC-5667";
            qTestUniqueId = "19482671";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateViewCollector();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_View Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5668_RP_Neptune_Admin_View_Gateway()
        {
            testCaseId = "TC-5668";
            qTestUniqueId = "19482672";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateViewGateway();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Clone Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5669_RP_Neptune_Admin_Clone_Collector()
        {
            testCaseId = "TC-5669";
            qTestUniqueId = "19482673";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCloneCollector();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Clone Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5670_RP_Neptune_Admin_Clone_Gateway()
        {
            testCaseId = "TC-5670";
            qTestUniqueId = "19482674";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCloneGateway();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Delete Device
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5671_RP_Neptune_Admin_Delete_Device()
        {
            testCaseId = "TC-5671";
            qTestUniqueId = "19482675";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateDeleteDevice();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Export Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5672_RP_Neptune_Admin_Export_Management()
        {
            testCaseId = "TC-5672";
            qTestUniqueId = "19482676";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateExportScreenDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_View Exports
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5673_RP_Neptune_Admin_View_Exports()
        {
            testCaseId = "TC-5673";
            qTestUniqueId = "19482677";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateExportFiles();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Select One/All File for Export
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5674_RP_Neptune_Admin_Select_One_All_File_for_Export()
        {
            testCaseId = "TC-5674";
            qTestUniqueId = "19482678";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateSelectOneAllForExport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Deselect One/All File for Export
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5675_RP_Neptune_Admin_Deselect_One_All_File_for_Export()
        {
            testCaseId = "TC-5675";
            qTestUniqueId = "19482679";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateDeselectOneAllForExport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_ReExport
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5676_RP_Neptune_Admin_ReExport()
        {
            testCaseId = "TC-5676";
            qTestUniqueId = "19482680";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateExportButton();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Export Settings
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5677_RP_Neptune_Admin_Export_Settings()
        {
            testCaseId = "TC-5677";
            qTestUniqueId = "19482681";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateExportSettings();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_View Only Exported
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5678_RP_Neptune_Admin_View_Only_Exported()
        {
            testCaseId = "TC-5678";
            qTestUniqueId = "19482682";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateViewOnlyExported();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Notifications
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5679_RP_Neptune_Admin_Notifications()
        {
            testCaseId = "TC-5679";
            qTestUniqueId = "19482683";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftEmailNotifications(url, userName, password);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Edit Notification
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5681_RP_Neptune_Admin_Edit_Notification()
        {
            testCaseId = "TC-5681";
            qTestUniqueId = "19482685";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftEmailNotifications(url, userName, password);
                notification.ValidateEditNotification();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_View Notification
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5682_RP_Neptune_Admin_View_Notification()
        {
            testCaseId = "TC-5682";
            qTestUniqueId = "19482686";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftEmailNotifications(url, userName, password);
                notification.ValidateViewNotification();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Landing Page
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5778_RP_Utility_Admin_Landing_Page()
        {
            testCaseId = "TC-5778";
            qTestUniqueId = "19482783";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLandingPageDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Search Account
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5779_RP_Utility_Admin_Search_Account()
        {
            testCaseId = "TC-5779";
            qTestUniqueId = "19482784";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateSearchAccountsOption();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Dashboard Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5780_RP_Utility_Admin_Dashboard_Widget()
        {
            testCaseId = "TC-5780";
            qTestUniqueId = "19482785";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateDashboardWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Customer Inquiry Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5781_RP_Utility_Admin_Customer_Inquiry_Widget()
        {
            testCaseId = "TC-5781";
            qTestUniqueId = "19482786";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateCustomerInquiryWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Billing Service Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5782_RP_Utility_Admin_Billing_Service_Widget()
        {
            testCaseId = "TC-5782";
            qTestUniqueId = "19482787";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateBillingServicesWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Notifications Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5783_RP_Utility_Admin_Notifications_Widget()
        {
            testCaseId = "TC-5783";
            qTestUniqueId = "19482788";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateNotificationsWidgetDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_User Management Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5784_RP_Utility_Admin_User_Management_Widget()
        {
            testCaseId = "TC-5784";
            qTestUniqueId = "19482789";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserManagementWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Utility Management Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5785_RP_Utility_Admin_Utility_Management_Widget()
        {
            testCaseId = "TC-5785";
            qTestUniqueId = "19482790";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUtilityManagementWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5786_RP_Utility_Admin_Left_Navigation()
        {
            testCaseId = "TC-5786";
            qTestUniqueId = "19482791";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavigationPaneExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin Dashboard_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5787_RP_Utility_Admin_Dashboard_Left_Navigation()
        {
            testCaseId = "TC-5787";
            qTestUniqueId = "19482792";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavDashboardExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin Customer Inquiry_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5788_RP_Utility_Admin_Customer_Inquiry_Left_Navigation()
        {
            testCaseId = "TC-5788";
            qTestUniqueId = "19482793";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavCustomerInquiryExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin Billing Services_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5789_RP_Utility_Admin_Billing_Services_Left_Navigation()
        {
            testCaseId = "TC-5789";
            qTestUniqueId = "19482794";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavBillingServicesExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin Utility Management_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5791_RP_Utility_Admin_Utility_Management_Left_Navigation()
        {
            testCaseId = "TC-5791";
            qTestUniqueId = "19482796";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavUtilityManagementExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin Platform Management_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5792_RP_Utility_Admin_Platform_Management_Left_Navigation()
        {
            testCaseId = "TC-5792";
            qTestUniqueId = "19482797";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavPlatformManagementDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin User Management_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5793_RP_Utility_Admin_User_Management_Left_Navigation()
        {
            testCaseId = "TC-5793";
            qTestUniqueId = "19482798";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavUserManagementDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin Roles and Permissions_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5794_RP_Utility_Admin_RP_Left_Navigation()
        {
            testCaseId = "TC-5794";
            qTestUniqueId = "19482799";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavRolesAndPermissionsDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin Notifications_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5796_RP_Utility_Admin_Notifications_Left_Navigation()
        {
            testCaseId = "TC-5796";
            qTestUniqueId = "19482801";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavNotificationsDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Top Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5797_RP_Utility_Admin_Top_Navigation()
        {
            testCaseId = "TC-5797";
            qTestUniqueId = "19482802";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateTopNavigationPaneExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Home Top Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5798_RP_Utility_Admin_Home_Top_Navigation()
        {
            testCaseId = "TC-5798";
            qTestUniqueId = "19482803";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateHomeOptionExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Profile Top Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5799_RP_Utility_Admin_Profile_Top_Navigation()
        {
            testCaseId = "TC-5799";
            qTestUniqueId = "19482804";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateProfileOptionTopNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Logout Top Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5800_RP_Utility_Admin_Logout_Top_Navigation()
        {
            testCaseId = "TC-5800";
            qTestUniqueId = "19482805";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLogOutOptionTopNavigation();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Choose Utility
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5802_RP_Utility_Admin_Choose_Utility()
        {
            testCaseId = "TC-5802";
            qTestUniqueId = "19482807";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateChooseUtilitiesTopNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_User/Identity Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5803_RP_Utility_Admin_User_Identity_Management()
        {
            testCaseId = "TC-5803";
            qTestUniqueId = "19482808";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utililty Admin_Create User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5804_RP_Utility_Admin_Create_User()
        {
            testCaseId = "TC-5804";
            qTestUniqueId = "19482809";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateCreateUserFields();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Search User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5805_RP_Utility_Admin_Search_User()
        {
            testCaseId = "TC-5805";
            qTestUniqueId = "19482810";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateSearchUserAccount(firstName);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Edit User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5806_RP_Utility_Admin_Edit_User()
        {
            testCaseId = "TC-5806";
            qTestUniqueId = "19482811";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateEditUserDisplay();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_View User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5807_RP_Utility_Admin_View_User()
        {
            testCaseId = "TC-5807";
            qTestUniqueId = "19482812";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateUsersListForUtility();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Deactivate User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5808_RP_Utility_Admin_Deactivate_User()
        {
            testCaseId = "TC-5808";
            qTestUniqueId = "19482813";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateDeactiveUser();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Utility Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5815_RP_Utility_Admin_Utility_Management()
        {
            testCaseId = "TC-5815";
            qTestUniqueId = "19482820";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateHeaderUtilityManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Create Utility
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5816_RP_Utility_Admin_Create_Utility()
        {
            testCaseId = "TC-5816";
            qTestUniqueId = "19482821";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCreateUtilityButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Edit Utility
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5818_RP_Utility_Admin_Edit_Utility()
        {
            testCaseId = "TC-5818";
            qTestUniqueId = "19482823";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateEditUtilityButtonDoesNotDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_View Utility
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5820_RP_Utility_Admin_View_Utility()
        {
            testCaseId = "TC-5820";
            qTestUniqueId = "19482825";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateUtilityDetails();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Roles and Permissions_Utility Admin_Create Code
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5823_RP_Utility_Admin_Create_Code()
        {
            testCaseId = "TC-5823";
            qTestUniqueId = "19482828";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCreateCodeDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Search Code
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5824_RP_Utility_Admin_Search_Code()
        {
            testCaseId = "TC-5824";
            qTestUniqueId = "19482829";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                code = testData["Code"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateSearchCode(code);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Edit Code
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5825_RP_Utility_Admin_Edit_Code()
        {
            testCaseId = "TC-5825";
            qTestUniqueId = "19482830";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                code = testData["Code"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateEditCode(code);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_View Code
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5826_RP_Utility_Admin_View_Code()
        {
            testCaseId = "TC-5826";
            qTestUniqueId = "19482831";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateViewCode();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Select and Delete Codes
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5827_RP_Utility_Admin_Select_and_Delete_Codes()
        {
            testCaseId = "TC-5827";
            qTestUniqueId = "19482832";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                code = testData["Code"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateDeleteCode(code);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Role Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5828_RP_Utility_Admin_Role_Management()
        {
            testCaseId = "TC-5828";
            qTestUniqueId = "19482833";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Create Role
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5829_RP_Utility_Admin_Create_Role()
        {
            testCaseId = "TC-5829";
            qTestUniqueId = "19482834";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateCreateRoleButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Edit Role
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5830_RP_Utility_Admin_Edit_Role()
        {
            testCaseId = "TC-5830";
            qTestUniqueId = "19482835";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateEditRoleButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Enable/Disable Permissions
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5831_RP_Utility_Admin_Enable_Disable_Permissions()
        {
            startDate = DateTime.Now;
            testCaseId = "TC-5831";
            qTestUniqueId = "19482836";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateEditRole();
                rolesPermissons.ValidateEnableDisablePermissions();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_View Role
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5832_RP_Utility_Admin_View_Role()
        {
            startDate = DateTime.Now;
            testCaseId = "TC-5832";
            qTestUniqueId = "19482837";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateViewRole();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Delete Role
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5833_RP_Utility_Admin_Delete_Role()
        {
            startDate = DateTime.Now;
            testCaseId = "TC-5833";
            qTestUniqueId = "19482838";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateDeleteRoleButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Customer Inquiry
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5834_RP_Utility_Admin_Customer_Inquiry()
        {
            testCaseId = "TC-5834";
            qTestUniqueId = "19482839";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageCustomerInquiry(url, userName, password);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Search and Select Account
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5835_RP_Utility_Admin_Search_and_Select_Account()
        {
            testCaseId = "TC-5835";
            qTestUniqueId = "19482840";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageCustomerInquiry(url, userName, password);
                string accountNo = testData["AccountNumber"];
                customerInquiry.ValidateSearchSelectAccountNo(accountNo);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Edit Asset Configuration
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5836_RP_Utility_Admin_Edit_Asset_Configuration()
        {
            testCaseId = "TC-5836";
            qTestUniqueId = "19482841";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageCustomerInquiry(url, userName, password);
                string accountNo = testData["AccountNumber"];
                customerInquiry.ValidateSearchSelectAccountNo(accountNo);
                customerInquiry.ValidateEditAssertConfig();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Select a Meter
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5837_RP_Utility_Admin_Select_a_Meter()
        {
            testCaseId = "TC-5837";
            qTestUniqueId = "19482842";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageCustomerInquiry(url, userName, password);
                string accountNo = testData["AccountNumber"];
                customerInquiry.ValidateSearchSelectAccountNo(accountNo);
                customerInquiry.ValidateSelectMeter();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_View Dashboard
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5838_RP_Utility_Admin_View_Dashboard()
        {
            testCaseId = "TC-5838";
            qTestUniqueId = "19482843";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageCustomerInquiry(url, userName, password);
                string accountNo = testData["AccountNumber"];
                customerInquiry.ValidateSearchSelectAccountNo(accountNo);
                customerInquiry.ValidateViewDashboard();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Import Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5839_RP_Utility_Admin_Import_Management()
        {
            testCaseId = "TC-5839";
            qTestUniqueId = "19482844";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavImportManagement(url, userName, password);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Import
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5840_RP_Utility_Admin_Import()
        {
            testCaseId = "TC-5840";
            qTestUniqueId = "19482845";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavImportManagement(url, userName, password);
                billingServicesImport.ValidateImport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_View Import Files
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5841_RP_Utility_Admin_View_Import_Files()
        {
            testCaseId = "TC-5841";
            qTestUniqueId = "19482846";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavImportManagement(url, userName, password);
                billingServicesImport.ValidateImport();
                billingServicesImport.ValidateImportFiles();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Device Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5843_RP_Utility_Admin_Device_Management()
        {
            testCaseId = "TC-5843";
            qTestUniqueId = "19482848";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCodeManagementSectionDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Create Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5844_RP_Utility_Admin_Create_Collector()
        {
            testCaseId = "TC-5844";
            qTestUniqueId = "19482849";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCreateCollectorBtnDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Create Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5845_RP_Utility_Admin_Create_Gateway()
        {
            testCaseId = "TC-5845";
            qTestUniqueId = "19482850";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCreateGatewayBtnDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Edit Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5846_RP_Utility_Admin_Edit_Collector()
        {
            testCaseId = "TC-5846";
            qTestUniqueId = "19482851";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValiadateEditCollector();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Edit Collector Description
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5847_RP_Utility_Admin_Edit_Collector_Description()
        {
            testCaseId = "TC-5847";
            qTestUniqueId = "19482852";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateDeviceName();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Build USB for Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5848_RP_Utility_Admin_Build_USB_for_Collector()
        {
            testCaseId = "TC-5848";
            qTestUniqueId = "19482853";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateBuidUSBCollector();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Edit Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5850_RP_Utility_Admin_Edit_Gateway()
        {
            testCaseId = "TC-5850";
            qTestUniqueId = "19482855";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateEditGateway();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Edit Gateway Description
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5851_RP_Utility_Admin_Edit_Gateway_Description()
        {
            testCaseId = "TC-5851";
            qTestUniqueId = "19482856";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateDeviceName();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Build USB for Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5852_RP_Utility_Admin_Build_USB_for_Gateway()
        {
            testCaseId = "TC-5852";
            qTestUniqueId = "19482857";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateBuildUSBGateway();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_View Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5855_RP_Utility_Admin_View_Collector()
        {
            testCaseId = "TC-5855";
            qTestUniqueId = "19482860";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateViewCollector();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_View Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5856_RP_Utility_Admin_View_Gateway()
        {
            testCaseId = "TC-5856";
            qTestUniqueId = "19482861";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateViewGateway();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Clone Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5857_RP_Utility_Admin_Clone_Collector()
        {
            testCaseId = "TC-5857";
            qTestUniqueId = "19482862";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCloneCollectorDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Clone Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5858_RP_Utility_Admin_Clone_Gateway()
        {
            testCaseId = "TC-5858";
            qTestUniqueId = "19482863";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCloneGatewayDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Delete Device
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5859_RP_Utility_Admin_Delete_Device()
        {
            testCaseId = "TC-5859";
            qTestUniqueId = "19482864";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateDeleteDevice();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Export Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5860_RP_Utility_Admin_Export_Management()
        {
            testCaseId = "TC-5860";
            qTestUniqueId = "19482865";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateExportScreenDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_View Exports
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5861_RP_Utility_Admin_View_Exports()
        {
            testCaseId = "TC-5861";
            qTestUniqueId = "19482866";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateExportFiles();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Select One/All File for Export
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5862_RP_Utility_Admin_Select_One_All_File_for_Export()
        {
            testCaseId = "TC-5862";
            qTestUniqueId = "19482867";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateSelectOneAllForExport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Deselect One/All File for Export
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5863_RP_Utility_Admin_Deselect_One_All_File_for_Export()
        {
            testCaseId = "TC-5863";
            qTestUniqueId = "19482868";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateDeselectOneAllForExport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_ReExport
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5864_RP_Utility_Admin_ReExport()
        {
            testCaseId = "TC-5864";
            qTestUniqueId = "19482869";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateExportButton();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_View Only Exported
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5866_RP_Utility_Admin_View_Only_Exported()
        {
            testCaseId = "TC-5866";
            qTestUniqueId = "19482871";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateViewOnlyExported();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Notifications
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5867_RP_Utility_Admin_Notifications()
        {
            testCaseId = "TC-5867";
            qTestUniqueId = "19482872";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateNotificationsWidgetDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Edit Notification
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5869_RP_Utility_Admin_Edit_Notification()
        {
            testCaseId = "TC-5869";
            qTestUniqueId = "19482874";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageNotifications(url, userName, password);
                notification.ValidateEditNotificationDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_View Notification
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5870_RP_Utility_Admin_View_Notification()
        {
            testCaseId = "TC-5870";
            qTestUniqueId = "19482875";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageNotifications(url, userName, password);
                notification.ValidateViewNotification();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Landing Page
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5684_RP_Neptune_CSR_Landing_Page()
        {
            testCaseId = "TC-5684";
            qTestUniqueId = "19482688";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLandingPageDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Search Account
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5685_RP_Neptune_CSR_Search_Account()
        {
            testCaseId = "TC-5685";
            qTestUniqueId = "19482689";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateSearchAccountsOption();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Dashboard Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5686_RP_Neptune_CSR_Dashboard_Widget()
        {
            testCaseId = "TC-5686";
            qTestUniqueId = "19482690";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateDashboardWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Customer Inquiry Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5687_RP_Neptune_CSR_Customer_Inquiry_Widget()
        {
            testCaseId = "TC-5687";
            qTestUniqueId = "19482691";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateCustomerInquiryWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Billing Service Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5688_RP_Neptune_CSR_Billing_Service_Widget()
        {
            testCaseId = "TC-5688";
            qTestUniqueId = "19482692";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateBillingServicesWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Notifications Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5689_RP_Neptune_CSR_Notifications_Widget()
        {
            testCaseId = "TC-5689";
            qTestUniqueId = "19482693";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateNotificationsWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR    _User Management Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5690_RP_Neptune_CSR_User_Management_Widget()
        {
            testCaseId = "TC-5690";
            qTestUniqueId = "19482694";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserManagementWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Utility Management Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5691_RP_Neptune_CSR_Utility_Management_Widget()
        {
            testCaseId = "TC-5691";
            qTestUniqueId = "19482695";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUtilityManagementWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5692_RP_Neptune_CSR_Left_Navigation()
        {
            testCaseId = "TC-5692";
            qTestUniqueId = "19482696";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavigationPaneExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR Dashboard_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5693_RP_Neptune_CSR_Dashboard_Left_Navigation()
        {
            testCaseId = "TC-5693";
            qTestUniqueId = "19482697";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavDashboardExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR Customer Inquiry_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5694_RP_Neptune_CSR_Customer_Inquiry_Left_Navigation()
        {
            testCaseId = "TC-5694";
            qTestUniqueId = "19482698";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavCustomerInquiryExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR Billing Services_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5695_RP_Neptune_CSR_Billing_Services_Left_Navigation()
        {
            testCaseId = "TC-5695";
            qTestUniqueId = "19482699";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavBillingServicesExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR Utility Management_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5697_RP_Neptune_CSR_Utility_Management_Left_Navigation()
        {
            testCaseId = "TC-5697";
            qTestUniqueId = "19482702";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavUtilityManagementExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR Platform Management_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5698_RP_Neptune_CSR_Platform_Management_Left_Navigation()
        {
            testCaseId = "TC-5698";
            qTestUniqueId = "19482703";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavPlatformManagementDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR User Management_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5699_RP_Neptune_CSR_User_Management_Left_Navigation()
        {
            testCaseId = "TC-5699";
            qTestUniqueId = "19482704";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavUserManagementDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR Roles and Permissions_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5700_RP_Neptune_CSR_RP_Left_Navigation()
        {
            testCaseId = "TC-5606";
            qTestUniqueId = "19482705";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavRolesAndPermissionsDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR Notifications_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5702_RP_Neptune_CSR_Notifications_Left_Navigation()
        {
            testCaseId = "TC-5702";
            qTestUniqueId = "19482707";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavNotificationsExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Top Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5703_RP_Neptune_CSR_Top_Navigation()
        {
            testCaseId = "TC-5703";
            qTestUniqueId = "19482708";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateTopNavigationPaneExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Home Top Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5704_RP_Neptune_CSR_Home_Top_Navigation()
        {
            testCaseId = "TC-5704";
            qTestUniqueId = "19482709";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateHomeOptionExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Profile Top Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5705_RP_Neptune_CSR_Profile_Top_Navigation()
        {
            testCaseId = "TC-5705";
            qTestUniqueId = "19482710";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateProfileOptionTopNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Logout Top Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5706_RP_Neptune_CSR_Logout_Top_Navigation()
        {
            testCaseId = "TC-5706";
            qTestUniqueId = "19482711";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLogOutOptionTopNavigation();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Choose Utility
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5708_RP_Neptune_CSR_Choose_Utility()
        {
            testCaseId = "TC-5708";
            qTestUniqueId = "19482713";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateChooseUtilitiesTopNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_User/Identity Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5709_RP_Neptune_CSR_User_Identity_Management()
        {
            testCaseId = "TC-5709";
            qTestUniqueId = "19482714";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Create User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5710_RP_Neptune_CSR_Create_User()
        {
            testCaseId = "TC-5710";
            qTestUniqueId = "19482715";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateCreateUserDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Search User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5711_RP_Neptune_CSR_Search_User()
        {
            testCaseId = "TC-5711";
            qTestUniqueId = "19482716";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateSearchUserAccount(firstName);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Edit User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5712_RP_Neptune_CSR_Edit_User()
        {
            testCaseId = "TC-5712";
            qTestUniqueId = "19482717";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateEditButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_View User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5713_RP_Neptune_CSR_View_User()
        {
            testCaseId = "TC-5713";
            qTestUniqueId = "19482718";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateUsersListForUtility();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Deactivate User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5714_RP_Neptune_CSR_Deactivate_User()
        {
            testCaseId = "TC-5714";
            qTestUniqueId = "19482719";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateDeactiveUserDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Send Password Reset
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5715_RP_Neptune_CSR_Send_Password_Reset()
        {
            testCaseId = "TC-5715";
            qTestUniqueId = "19482720";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateLandingPagePwdResetDoesNotDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Utility Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5721_RP_Neptune_CSR_Utility_Management()
        {
            testCaseId = "TC-5721";
            qTestUniqueId = "19482726";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateHeaderUtilityManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Create Utility
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5722_RP_Neptune_CSR_Create_Utility()
        {
            testCaseId = "TC-5722";
            qTestUniqueId = "19482727";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCreateUtilityButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Edit Utility
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5724_RP_Neptune_CSR_Edit_Utility()
        {
            testCaseId = "TC-5724";
            qTestUniqueId = "19482729";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateEditUtilityButtonDoesNotDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_View Utility
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5726_RP_Neptune_CSR_View_Utility()
        {
            testCaseId = "TC-5726";
            qTestUniqueId = "19482731";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateUtilityDetails();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Roles and Permissions_Neptune CSR_Create Code
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5729_RP_Neptune_CSR_Create_Code()
        {
            testCaseId = "TC-5729";
            qTestUniqueId = "19482734";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCreateCodeButtonDoesNotDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Search Code
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5730_RP_Neptune_CSR_Search_Code()
        {
            testCaseId = "TC-5730";
            qTestUniqueId = "19482735";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                code = testData["Code"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateSearchCode(code);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Edit Code
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5731_RP_Neptune_CSR_Edit_Code()
        {
            testCaseId = "TC-5731";
            qTestUniqueId = "19482736";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateEditCodeButtonDoesNotDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_View Code
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5732_RP_Neptune_CSR_View_Code()
        {
            testCaseId = "TC-5732";
            qTestUniqueId = "19482737";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateViewCode();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Select and Delete Codes
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5733_RP_Neptune_CSR_Select_and_Delete_Codes()
        {
            testCaseId = "TC-5733";
            qTestUniqueId = "19482738";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                code = testData["Code"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateDeleteCodeButtonDoesNotDisplays(code);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Role Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5734_RP_Neptune_CSR_Role_Management()
        {
            testCaseId = "TC-5734";
            qTestUniqueId = "19482739";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavPlatformManagementDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Create Role
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5735_RP_Neptune_CSR_Create_Role()
        {
            testCaseId = "TC-5735";
            qTestUniqueId = "19482740";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateCreateRoleButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Edit Role
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5736_RP_Neptune_CSR_Edit_Role()
        {
            testCaseId = "TC-5736";
            qTestUniqueId = "19482741";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateEditRoleButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Enable/Disable Permissions
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5737_RP_Neptune_CSR_Enable_Disable_Permissions()
        {
            testCaseId = "TC-5737";
            qTestUniqueId = "19482742";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateEditRole();
                rolesPermissons.ValidateEnableDisablePermissions();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_View Role
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5738_RP_Neptune_CSR_View_Role()
        {
            testCaseId = "TC-5738";
            qTestUniqueId = "19482743";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateViewRoleDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Delete Role
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5739_RP_Neptune_CSR_Delete_Role()
        {
            testCaseId = "TC-5739";
            qTestUniqueId = "19482744";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateDeleteRoleButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Customer Inquiry
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5740_RP_Neptune_CSR_Customer_Inquiry()
        {
            testCaseId = "TC-5740";
            qTestUniqueId = "19482745";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageCustomerInquiry(url, userName, password);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Search and Select Account
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5741_RP_Neptune_CSR_Search_and_Select_Account()
        {
            testCaseId = "TC-5741";
            qTestUniqueId = "19482746";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageCustomerInquiry(url, userName, password);
                string accountNo = testData["AccountNumber"];
                customerInquiry.ValidateSearchSelectAccountNo(accountNo);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Edit Asset Configuration
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5742_RP_Neptune_CSR_Edit_Asset_Configuration()
        {
            testCaseId = "TC-5742";
            qTestUniqueId = "19482747";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageCustomerInquiry(url, userName, password);
                string accountNo = testData["AccountNumber"];
                customerInquiry.ValidateSearchSelectAccountNo(accountNo);
                customerInquiry.ValidateEditAssertConfig();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Select a Meter
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5743_RP_Neptune_CSR_Select_a_Meter()
        {
            testCaseId = "TC-5743";
            qTestUniqueId = "19482748";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageCustomerInquiry(url, userName, password);
                string accountNo = testData["AccountNumber"];
                customerInquiry.ValidateSearchSelectAccountNo(accountNo);
                customerInquiry.ValidateSelectMeter();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_View Dashboard
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5744_RP_Neptune_CSR_View_Dashboard()
        {
            testCaseId = "TC-5744";
            qTestUniqueId = "19482749";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageCustomerInquiry(url, userName, password);
                string accountNo = testData["AccountNumber"];
                customerInquiry.ValidateSearchSelectAccountNo(accountNo);
                customerInquiry.ValidateViewDashboard();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Import Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5745_RP_Neptune_CSR_Import_Management()
        {
            testCaseId = "TC-5745";
            qTestUniqueId = "19482750";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavImportManagement(url, userName, password);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Import
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5746_RP_Neptune_CSR_Import()
        {
            testCaseId = "TC-5746";
            qTestUniqueId = "19482751";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavImportManagement(url, userName, password);
                billingServicesImport.ValidateImportDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_View Import Files
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5747_RP_Neptune_CSR_View_Import_Files()
        {
            testCaseId = "TC-5747";
            qTestUniqueId = "19482752";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavImportManagement(url, userName, password);
                billingServicesImport.ValidateImportFiles();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Device Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5749_RP_Neptune_CSR_Device_Management()
        {
            testCaseId = "TC-5749";
            qTestUniqueId = "19482754";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCodeManagementSectionDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Create Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5750_RP_Neptune_CSR_Create_Collector()
        {
            testCaseId = "TC-5750";
            qTestUniqueId = "19482755";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCreateCollectorBtnDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Create Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5751_RP_Neptune_CSR_Create_Gateway()
        {
            testCaseId = "TC-5751";
            qTestUniqueId = "19482756";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCreateGatewayBtnDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Edit Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5752_RP_Neptune_CSR_Edit_Collector()
        {
            testCaseId = "TC-5752";
            qTestUniqueId = "19482757";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValiadateEditCollectorSaveDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Edit Collector Description
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5753_RP_Neptune_CSR_Edit_Collector_Description()
        {
            testCaseId = "TC-5753";
            qTestUniqueId = "19482758";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateDeviceNameDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Build USB for Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5754_RP_Neptune_CSR_Build_USB_for_Collector()
        {
            testCaseId = "TC-5754";
            qTestUniqueId = "19482759";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateBuidUSBCollectorDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Edit Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5756_RP_Neptune_CSR_Edit_Gateway()
        {
            testCaseId = "TC-5756";
            qTestUniqueId = "19482761";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateEditGatewayDoesNotexists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Edit Gateway Description
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5757_RP_Neptune_CSR_Edit_Gateway_Description()
        {
            testCaseId = "TC-5757";
            qTestUniqueId = "19482762";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateDeviceNameDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Build USB for Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5758_RP_Neptune_CSR_Build_USB_for_Gateway()
        {
            testCaseId = "TC-5758";
            qTestUniqueId = "19482763";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateBuildUSBGatewayDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_View Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5761_RP_Neptune_CSR_View_Collector()
        {
            testCaseId = "TC-5761";
            qTestUniqueId = "19482766";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateViewCollector();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_View Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5762_RP_Neptune_CSR_View_Gateway()
        {
            testCaseId = "TC-5762";
            qTestUniqueId = "19482767";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateViewGateway();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Clone Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5763_RP_Neptune_CSR_Clone_Collector()
        {
            testCaseId = "TC-5763";
            qTestUniqueId = "19482768";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCloneCollectorDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Clone Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5764_RP_Neptune_CSR_Clone_Gateway()
        {
            testCaseId = "TC-5764";
            qTestUniqueId = "19482769";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCloneGatewayDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Delete Device
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5765_RP_Neptune_CSR_Delete_Device()
        {
            testCaseId = "TC-5765";
            qTestUniqueId = "19482770";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateDeleteDeviceDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Export Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5766_RP_Neptune_CSR_Export_Management()
        {
            testCaseId = "TC-5766";
            qTestUniqueId = "19482771";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateExportScreenDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_View Exports
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5767_RP_Neptune_CSR_View_Exports()
        {
            testCaseId = "TC-5767";
            qTestUniqueId = "19482772";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateExportFiles();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Select One/All File for Export
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5768_RP_Neptune_CSR_Select_One_All_File_for_Export()
        {
            testCaseId = "TC-5768";
            qTestUniqueId = "19482773";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateSelectOneAllForExportDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Deselect One/All File for Export
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5769_RP_Neptune_CSR_Deselect_One_All_File_for_Export()
        {
            testCaseId = "TC-5769";
            qTestUniqueId = "19482774";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateDeselectOneAllForExportDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_ReExport
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5770_RP_Neptune_CSR_ReExport()
        {
            testCaseId = "TC-5770";
            qTestUniqueId = "19482775";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateExportButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_View Only Exported
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5772_RP_Neptune_CSR_View_Only_Exported()
        {
            testCaseId = "TC-5772";
            qTestUniqueId = "19482777";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateViewOnlyExported();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Notifications
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5773_RP_Neptune_CSR_Notifications()
        {
            testCaseId = "TC-5773";
            qTestUniqueId = "19482778";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftEmailNotifications(url, userName, password);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Edit Notification
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5775_RP_Neptune_CSR_Edit_Notification()
        {
            testCaseId = "TC-5775";
            qTestUniqueId = "19482780";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftEmailNotifications(url, userName, password);
                notification.ValidateEditNotificationDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_View Notification
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5776_RP_Neptune_CSR_View_Notification()
        {
            testCaseId = "TC-5776";
            qTestUniqueId = "19482781";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftEmailNotifications(url, userName, password);
                notification.ValidateViewNotification();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Landing Page
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5872_RP_Utility_User_Landing_Page()
        {
            testCaseId = "TC-5872";
            qTestUniqueId = "19482877";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLandingPageDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Search Account
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5873_RP_Utility_User_Search_Account()
        {
            testCaseId = "TC-5873";
            qTestUniqueId = "19482878";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateSearchAccountsOption();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Dashboard Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5874_RP_Utility_User_Dashboard_Widget()
        {
            testCaseId = "TC-5874";
            qTestUniqueId = "19482879";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateDashboardWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Customer Inquiry Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5875_RP_Utility_User_Customer_Inquiry_Widget()
        {
            testCaseId = "TC-5875";
            qTestUniqueId = "19482880";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateCustomerInquiryWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Billing Service Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5876_RP_Utility_User_Billing_Service_Widget()
        {
            testCaseId = "TC-5876";
            qTestUniqueId = "19482881";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateBillingServicesWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Notifications Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5877_RP_Utility_User_Notifications_Widget()
        {
            testCaseId = "TC-5877";
            qTestUniqueId = "19482882";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateNotificationsWidgetDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_User Management Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5878_RP_Utility_User_User_Management_Widget()
        {
            testCaseId = "TC-5878";
            qTestUniqueId = "19482883";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserManagementWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Utility Management Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5879_RP_Utility_User_Utility_Management_Widget()
        {
            testCaseId = "TC-5879";
            qTestUniqueId = "19482884";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUtilityManagementWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5880_RP_Utility_User_Left_Navigation()
        {
            testCaseId = "TC-5880";
            qTestUniqueId = "19482885";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavigationPaneExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User Dashboard_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5881_RP_Utility_User_Dashboard_Left_Navigation()
        {
            testCaseId = "TC-5881";
            qTestUniqueId = "19482886";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavDashboardExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User Customer Inquiry_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5882_RP_Utility_User_Customer_Inquiry_Left_Navigation()
        {
            testCaseId = "TC-5882";
            qTestUniqueId = "19482887";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavCustomerInquiryExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User Billing Services_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5883_RP_Utility_User_Billing_Services_Left_Navigation()
        {
            testCaseId = "TC-5883";
            qTestUniqueId = "19482888";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavBillingServicesExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User Utility Management_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5885_RP_Utility_User_Utility_Management_Left_Navigation()
        {
            testCaseId = "TC-5885";
            qTestUniqueId = "19482890";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavUtilityManagementExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User Platform Management_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5886_RP_Utility_User_Platform_Management_Left_Navigation()
        {
            testCaseId = "TC-5886";
            qTestUniqueId = "19482891";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavPlatformManagementDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User User Management_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5887_RP_Utility_User_User_Management_Left_Navigation()
        {
            testCaseId = "TC-5887";
            qTestUniqueId = "19482892";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavUserManagementDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User Roles and Permissions_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5888_RP_Utility_User_RP_Left_Navigation()
        {
            testCaseId = "TC-5888";
            qTestUniqueId = "19482893";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavRolesAndPermissionsDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User Notifications_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5890_RP_Utility_User_Notifications_Left_Navigation()
        {
            testCaseId = "TC-5890";
            qTestUniqueId = "19482895";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavNotificationsDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Top Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5891_RP_Utility_User_Top_Navigation()
        {
            testCaseId = "TC-5891";
            qTestUniqueId = "19482896";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateTopNavigationPaneExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Home Top Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5892_RP_Utility_User_Home_Top_Navigation()
        {
            testCaseId = "TC-5892";
            qTestUniqueId = "19482897";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateHomeOptionExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Profile Top Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5893_RP_Utility_User_Profile_Top_Navigation()
        {
            testCaseId = "TC-5893";
            qTestUniqueId = "19482898";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateProfileOptionTopNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Logout Top Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5894_RP_Utility_User_Logout_Top_Navigation()
        {
            testCaseId = "TC-5894";
            qTestUniqueId = "19482899";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLogOutOptionTopNavigation();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Choose Utility
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5896_RP_Utility_User_Choose_Utility()
        {
            testCaseId = "TC-5896";
            qTestUniqueId = "19482901";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateChooseUtilitiesTopNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_User/Identity Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5897_RP_Utility_User_User_Identity_Management()
        {
            testCaseId = "TC-5897";
            qTestUniqueId = "19482902";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utililty User_Create User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5898_RP_Utility_User_Create_User()
        {
            testCaseId = "TC-5898";
            qTestUniqueId = "19482903";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateCreateUserDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Search User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5899_RP_Utility_User_Search_User()
        {
            testCaseId = "TC-5899";
            qTestUniqueId = "19482904";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateSearchUserAccount(firstName);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Edit User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5900_RP_Utility_User_Edit_User()
        {
            testCaseId = "TC-5900";
            qTestUniqueId = "19482905";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateEditButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_View User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5901_RP_Utility_User_View_User()
        {
            testCaseId = "TC-5901";
            qTestUniqueId = "19482906";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateUsersListForUtility();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Deactivate User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5902_RP_Utility_User_Deactivate_User()
        {
            testCaseId = "TC-5902";
            qTestUniqueId = "19482907";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateDeactiveUserDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Send Password Reset
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5903_RP_Utility_User_Send_Password_Reset()
        {
            testCaseId = "TC-5903";
            qTestUniqueId = "19482908";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateLandingPagePwdResetDoesNotDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Utility Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5909_RP_Utility_User_Utility_Management()
        {
            testCaseId = "TC-5909";
            qTestUniqueId = "19482914";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateHeaderUtilityManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Create Utility
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5910_RP_Utility_User_Create_Utility()
        {
            testCaseId = "TC-5910";
            qTestUniqueId = "19482915";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCreateUtilityButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Edit Utility
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5912_RP_Utility_User_Edit_Utility()
        {
            testCaseId = "TC-5912";
            qTestUniqueId = "19482917";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateEditUtilityButtonDoesNotDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_View Utility
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5914_RP_Utility_User_View_Utility()
        {
            testCaseId = "TC-5914";
            qTestUniqueId = "19482919";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateUtilityDetails();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Roles and Permissions_Utility User_Create Code
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5917_RP_Utility_User_Create_Code()
        {
            testCaseId = "TC-5917";
            qTestUniqueId = "19482922";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCreateCodeButtonDoesNotDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Search Code
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5918_RP_Utility_User_Search_Code()
        {
            testCaseId = "TC-5918";
            qTestUniqueId = "19482923";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateSearchCodeDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Edit Code
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5919_RP_Utility_User_Edit_Code()
        {
            testCaseId = "TC-5919";
            qTestUniqueId = "19482924";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateEditCodeButtonDoesNotDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_View Code
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5920_RP_Utility_User_View_Code()
        {
            testCaseId = "TC-5920";
            qTestUniqueId = "19482925";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateViewCodeDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Select and Delete Codes
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5921_RP_Utility_User_Select_and_Delete_Codes()
        {
            testCaseId = "TC-5921";
            qTestUniqueId = "19482926";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                code = testData["Code"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateDeleteCodeButtonDoesNotDisplays(code);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Role Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5922_RP_Utility_User_Role_Management()
        {
            testCaseId = "TC-5922";
            qTestUniqueId = "19482927";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavRolesAndPermissionsDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Create Role
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5923_RP_Utility_User_Create_Role()
        {
            testCaseId = "TC-5923";
            qTestUniqueId = "19482928";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateCreateRoleButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Edit Role
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5924_RP_Utility_User_Edit_Role()
        {
            testCaseId = "TC-5924";
            qTestUniqueId = "19482929";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateEditRoleButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Enable/Disable Permissions
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5925_RP_Utility_User_Enable_Disable_Permissions()
        {
            testCaseId = "TC-5925";
            qTestUniqueId = "19482930";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateEnableDisablePermissionsNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_View Role
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5926_RP_Utility_User_View_Role()
        {
            testCaseId = "TC-5926";
            qTestUniqueId = "19482931";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateViewRoleDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Delete Role
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5927_RP_Utility_User_Delete_Role()
        {
            testCaseId = "TC-5927";
            qTestUniqueId = "19482932";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateDeleteRoleButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Customer Inquiry
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5928_RP_Utility_User_Customer_Inquiry()
        {
            testCaseId = "TC-5928";
            qTestUniqueId = "19482933";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftCustomerInquiry(url, userName, password);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Search and Select Account
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5929_RP_Utility_User_Search_and_Select_Account()
        {
            testCaseId = "TC-5929";
            qTestUniqueId = "19482934";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftCustomerInquiry(url, userName, password);
                string accountNo = testData["AccountNumber"];
                customerInquiry.ValidateSearchSelectAccountNo(accountNo);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Edit Asset Configuration
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5930_RP_Utility_User_Edit_Asset_Configuration()
        {
            testCaseId = "TC-5930";
            qTestUniqueId = "19482935";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftCustomerInquiry(url, userName, password);
                string accountNo = testData["AccountNumber"];
                customerInquiry.ValidateSearchSelectAccountNo(accountNo);
                customerInquiry.ValidateEditAssertConfig();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Select a Meter
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5931_RP_Utility_User_Select_a_Meter()
        {
            testCaseId = "TC-5931";
            qTestUniqueId = "19482936";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftCustomerInquiry(url, userName, password);
                string accountNo = testData["AccountNumber"];
                customerInquiry.ValidateSearchSelectAccountNo(accountNo);
                customerInquiry.ValidateSelectMeter();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_View Dashboard
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5932_RP_Utility_User_View_Dashboard()
        {
            testCaseId = "TC-5932";
            qTestUniqueId = "19482937";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftCustomerInquiry(url, userName, password);
                string accountNo = testData["AccountNumber"];
                customerInquiry.ValidateSearchSelectAccountNo(accountNo);
                customerInquiry.ValidateViewDashboard();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Import Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5933_RP_Utility_User_Import_Management()
        {
            testCaseId = "TC-5933";
            qTestUniqueId = "19482938";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavImportManagement(url, userName, password);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Import
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5934_RP_Utility_User_Import()
        {
            testCaseId = "TC-5934";
            qTestUniqueId = "19482939";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavImportManagement(url, userName, password);
                billingServicesImport.ValidateImport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_View Import Files
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5935_RP_Utility_User_View_Import_Files()
        {
            testCaseId = "TC-5935";
            qTestUniqueId = "19482940";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavImportManagement(url, userName, password);
                billingServicesImport.ValidateImport();
                billingServicesImport.ValidateImportFiles();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Device Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5937_RP_Utility_User_Device_Management()
        {
            testCaseId = "TC-5937";
            qTestUniqueId = "19482942";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Create Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5938_RP_Utility_User_Create_Collector()
        {
            testCaseId = "TC-5938";
            qTestUniqueId = "19482943";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCreateCollectorBtnDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Create Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5939_RP_Utility_User_Create_Gateway()
        {
            testCaseId = "TC-5939";
            qTestUniqueId = "19482944";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCreateGatewayBtnDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Edit Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5940_RP_Utility_User_Edit_Collector()
        {
            testCaseId = "TC-5940";
            qTestUniqueId = "19482945";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValiadateEditCollector();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Edit Collector Description
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5941_RP_Utility_User_Edit_Collector_Description()
        {
            testCaseId = "TC-5941";
            qTestUniqueId = "19482946";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateDeviceNameDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Build USB for Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5942_RP_Utility_User_Build_USB_for_Collector()
        {
            testCaseId = "TC-5942";
            qTestUniqueId = "19482947";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateBuidUSBCollector();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Edit Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5944_RP_Utility_User_Edit_Gateway()
        {
            testCaseId = "TC-5944";
            qTestUniqueId = "19482949";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateEditGateway();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Edit Gateway Description
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5945_RP_Utility_User_Edit_Gateway_Description()
        {
            testCaseId = "TC-5945";
            qTestUniqueId = "19482950";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateDeviceNameDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Build USB for Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5946_RP_Utility_User_Build_USB_for_Gateway()
        {
            testCaseId = "TC-5946";
            qTestUniqueId = "19482951";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateBuildUSBGateway();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_View Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5949_RP_Utility_User_View_Collector()
        {
            testCaseId = "TC-5949";
            qTestUniqueId = "19482954";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateViewCollector();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_View Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5950_RP_Utility_User_View_Gateway()
        {
            testCaseId = "TC-5950";
            qTestUniqueId = "19482955";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateViewGateway();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Clone Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5951_RP_Utility_User_Clone_Collector()
        {
            testCaseId = "TC-5951";
            qTestUniqueId = "19482956";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCloneCollectorDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Clone Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5952_RP_Utility_User_Clone_Gateway()
        {
            testCaseId = "TC-5952";
            qTestUniqueId = "19482957";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCloneGatewayDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Delete Device
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5953_RP_Utility_User_Delete_Device()
        {
            testCaseId = "TC-5953";
            qTestUniqueId = "19482958";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateDeleteDevice();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Export Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5954_RP_Utility_User_Export_Management()
        {
            testCaseId = "TC-5954";
            qTestUniqueId = "19482959";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateExportScreenDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_View Exports
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5955_RP_Utility_User_View_Exports()
        {
            testCaseId = "TC-5955";
            qTestUniqueId = "19482960";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateExportFiles();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Select One/All File for Export
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5956_RP_Utility_User_Select_One_All_File_for_Export()
        {
            testCaseId = "TC-5956";
            qTestUniqueId = "19482961";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateSelectOneAllForExport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Deselect One/All File for Export
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5957_RP_Utility_User_Deselect_One_All_File_for_Export()
        {
            testCaseId = "TC-5957";
            qTestUniqueId = "19482962";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateDeselectOneAllForExport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_ReExport
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5958_RP_Utility_User_ReExport()
        {
            testCaseId = "TC-5958";
            qTestUniqueId = "19482963";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateExportButton();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Export Settings
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5959_RP_Utility_User_Export_Settings()
        {
            testCaseId = "TC-5959";
            qTestUniqueId = "19482964";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateExportSettings();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_View Only Exported
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5960_RP_Utility_User_View_Only_Exported()
        {
            testCaseId = "TC-5960";
            qTestUniqueId = "19482965";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateViewOnlyExported();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Notifications
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5961_RP_Utility_User_Notifications()
        {
            testCaseId = "TC-5961";
            qTestUniqueId = "19482966";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateNotificationsWidgetDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_Edit Notification
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5963_RP_Utility_User_Edit_Notification()
        {
            testCaseId = "TC-5963";
            qTestUniqueId = "19482968";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageNotifications(url, userName, password);
                notification.ValidateEditNotificationDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility User_View Notification
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5964_RP_Utility_User_View_Notification()
        {
            testCaseId = "TC-5964";
            qTestUniqueId = "19482969";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageNotifications(url, userName, password);
                notification.ValidateViewNotification();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Landing Page
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5966_RP_Utility_Read_Only_Landing_Page()
        {
            testCaseId = "TC-5966";
            qTestUniqueId = "19482971";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLandingPageDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Search Account
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5967_RP_Utility_Read_Only_Search_Account()
        {
            testCaseId = "TC-5967";
            qTestUniqueId = "19482972";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateSearchAccountsOption();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Dashboard Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5968_RP_Utility_Read_Only_Dashboard_Widget()
        {
            testCaseId = "TC-5968";
            qTestUniqueId = "19482973";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateDashboardWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility_Read_Only_Customer Inquiry Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5969_RP_Utility_Read_Only_Customer_Inquiry_Widget()
        {
            testCaseId = "TC-5969";
            qTestUniqueId = "19482974";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateCustomerInquiryWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility_Read_Only_Billing Service Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5970_RP_Utility_Read_Only_Billing_Service_Widget()
        {
            testCaseId = "TC-5970";
            qTestUniqueId = "19482975";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateBillingServicesWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility_Read_Only_Notifications Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5971_RP_Utility_Read_Only_Notifications_Widget()
        {
            testCaseId = "TC-5971";
            qTestUniqueId = "19482976";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateNotificationsWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility_Read_Only_User Management Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5972_RP_Utility_Read_Only_User_Management_Widget()
        {
            testCaseId = "TC-5972";
            qTestUniqueId = "19482977";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserManagementWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility_Read_Only_Utility Management Widget
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5973_RP_Utility_Read_Only_Utility_Management_Widget()
        {
            testCaseId = "TC-5973";
            qTestUniqueId = "19482978";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUtilityManagementWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility_Read_Only_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        public void TC_5974_RP_Utility_Read_Only_Left_Navigation()
        {
            testCaseId = "TC-5974";
            qTestUniqueId = "19482979";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavigationPaneExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility_Read_Only Dashboard_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5975_RP_Utility_Read_Only_Dashboard_Left_Navigation()
        {
            testCaseId = "TC-5975";
            qTestUniqueId = "19482980";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavDashboardExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility_Read_Only Customer Inquiry_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5976_RP_Utility_Read_Only_Customer_Inquiry_Left_Navigation()
        {
            testCaseId = "TC-5976";
            qTestUniqueId = "19482981";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavCustomerInquiryExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility_Read_Only Billing Services_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5977_RP_Utility_Read_Only_Billing_Services_Left_Navigation()
        {
            testCaseId = "TC-5977";
            qTestUniqueId = "19482982";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavBillingServicesExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility_Read_Only Notifications_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5978_RP_Utility_Read_Only_Notifications_Left_Navigation()
        {
            testCaseId = "TC-5978";
            qTestUniqueId = "19482983";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavNotificationsDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility_Read_Only Utility Management_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5979_RP_Utility_Read_Only_Utility_Management_Left_Navigation()
        {
            testCaseId = "TC-5979";
            qTestUniqueId = "19482984";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavUtilityManagementExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility_Read_Only Platform Management_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5980_RP_Utility_Read_Only_Platform_Management_Left_Navigation()
        {
            testCaseId = "TC-5980";
            qTestUniqueId = "19482985";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavPlatformManagementDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility_Read_Only User Management_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5981_RP_Utility_Read_Only_User_Management_Left_Navigation()
        {
            testCaseId = "TC-5981";
            qTestUniqueId = "19482986";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavUserManagementDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility_Read_Only Roles and Permissions_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5982_RP_Utility_Read_Only_RP_Left_Navigation()
        {
            testCaseId = "TC-5982";
            qTestUniqueId = "19482987";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLftNavRolesAndPermissionsDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Top Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5985_RP_Utility_Read_Only_Top_Navigation()
        {
            testCaseId = "TC-5985";
            qTestUniqueId = "19482990";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateTopNavigationPaneExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Home Top Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5986_RP_Utility_Read_Only_Home_Top_Navigation()
        {
            testCaseId = "TC-5986";
            qTestUniqueId = "19482991";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateHomeOptionExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Profile Top Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5987_RP_Utility_Read_Only_Profile_Top_Navigation()
        {
            testCaseId = "TC-5987";
            qTestUniqueId = "19482992";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateProfileOptionTopNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Logout Top Navigation
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5988_RP_Utility_Read_Only_Logout_Top_Navigation()
        {
            testCaseId = "TC-5988";
            qTestUniqueId = "19482993";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateLogOutOptionTopNavigation();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Choose Utility
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5990_RP_Utility_Read_Only_Choose_Utility()
        {
            testCaseId = "TC-5990";
            qTestUniqueId = "19482995";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateChooseUtilitiesTopNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_User/Identity Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5991_RP_Utility_Read_Only_User_Identity_Management()
        {
            testCaseId = "TC-5991";
            qTestUniqueId = "19482996";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utililty Read_Only_Create User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5992_RP_Utility_Read_Only_Create_User()
        {
            testCaseId = "TC-5992";
            qTestUniqueId = "19482997";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateCreateUserDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Search User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_5993_RP_Utility_Read_Only_Search_User()
        {
            testCaseId = "TC-5993";
            qTestUniqueId = "19482998";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateSearchUserAccount(firstName);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Edit User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5994_RP_Utility_Read_Only_Edit_User()
        {
            testCaseId = "TC-5994";
            qTestUniqueId = "19482999";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateEditButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_View User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5995_RP_Utility_Read_Only_View_User()
        {
            testCaseId = "TC-5995";
            qTestUniqueId = "19483000";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateUsersListForUtility();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Deactivate User
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5996_RP_Utility_Read_Only_Deactivate_User()
        {
            testCaseId = "TC-5996";
            qTestUniqueId = "19483001";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateDeactiveUserDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility_Read_Only_Send Password Reset
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_5997_RP_Utility_Read_Only_Send_Password_Reset()
        {
            testCaseId = "TC-5997";
            qTestUniqueId = "19483002";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateUserIdentityManagement();
                userManagement.ValidateLandingPagePwdResetDoesNotDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Utility Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6003_RP_Utility_Read_Only_Utility_Management()
        {
            testCaseId = "TC-6003";
            qTestUniqueId = "19483008";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateHeaderUtilityManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Create Utility
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6004_RP_Utility_Read_Only_Create_Utility()
        {
            testCaseId = "TC-6004";
            qTestUniqueId = "19483009";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCreateUtilityButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Edit Utility
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6006_RP_Utility_Read_Only_Edit_Utility()
        {
            testCaseId = "TC-6006";
            qTestUniqueId = "19483011";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateEditUtilityButtonDoesNotDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Read_Only_View Utility
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6008_RP_Utility_Read_Only_View_Utility()
        {
            testCaseId = "TC-6008";
            qTestUniqueId = "19483013";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateUtilityDetails();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Roles and Permissions_Utility Read_Only_Create Code
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6011_RP_Utility_Read_Only_Create_Code()
        {
            testCaseId = "TC-6011";
            qTestUniqueId = "19483016";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCreateCodeButtonDoesNotDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Search Code
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6012_RP_Utility_Read_Only_Search_Code()
        {
            testCaseId = "TC-6012";
            qTestUniqueId = "19483017";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateSearchCodeDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Edit Code
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6013_RP_Utility_Read_Only_Edit_Code()
        {
            testCaseId = "TC-6013";
            qTestUniqueId = "19483018";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateEditCodeButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_View Code
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6014_RP_Utility_Read_Only_View_Code()
        {
            testCaseId = "TC-6014";
            qTestUniqueId = "19483019";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateViewCodeDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Select and Delete Codes
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_6015_RP_Utility_Read_Only_Select_and_Delete_Codes()
        {
            testCaseId = "TC-6015";
            qTestUniqueId = "19483020";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                code = testData["Code"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateDeleteCodeButtonDoesNotDisplays(code);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Role Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6016_RP_Utility_Read_Only_Role_Management()
        {
            testCaseId = "TC-6016";
            qTestUniqueId = "19483021";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Create Role
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6017_RP_Utility_Read_Only_Create_Role()
        {
            testCaseId = "TC-6017";
            qTestUniqueId = "19483022";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateCreateRoleButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Edit Role
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6018_RP_Utility_Read_Only_Edit_Role()
        {
            testCaseId = "TC-6018";
            qTestUniqueId = "19483023";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateEditRoleButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Enable/Disable Permissions
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_6019_RP_Utility_Read_Only_Enable_Disable_Permissions()
        {
            testCaseId = "TC-6019";
            qTestUniqueId = "19483024";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateEnableDisablePermissionsNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_View Role
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_6020_RP_Utility_Read_Only_View_Role()
        {
            testCaseId = "TC-6020";
            qTestUniqueId = "19483025";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateViewRoleDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Delete Role
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_6021_RP_Utility_Read_Only_Delete_Role()
        {
            testCaseId = "TC-6021";
            qTestUniqueId = "19483026";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateDeleteRoleButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Customer Inquiry
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_6022_RP_Utility_Read_Only_Customer_Inquiry()
        {
            testCaseId = "TC-6022";
            qTestUniqueId = "19483027";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftCustomerInquiry(url, userName, password);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Search and Select Account
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_6023_RP_Utility_Read_Only_Search_and_Select_Account()
        {
            testCaseId = "TC-6023";
            qTestUniqueId = "19483028";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageCustomerInquiry(url, userName, password);
                string accountNo = testData["AccountNumber"];
                customerInquiry.ValidateSearchSelectAccountNo(accountNo);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Edit Asset Configuration
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_6024_RP_Utility_Read_Only_Edit_Asset_Configuration()
        {
            testCaseId = "TC-6024";
            qTestUniqueId = "19483029";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageCustomerInquiry(url, userName, password);
                string accountNo = testData["AccountNumber"];
                customerInquiry.ValidateSearchSelectAccountNo(accountNo);
                customerInquiry.ValidateEditAssertConfigBtnDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Select a Meter
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_6025_RP_Utility_Read_Only_Select_a_Meter()
        {
            testCaseId = "TC-6025";
            qTestUniqueId = "19483030";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageCustomerInquiry(url, userName, password);
                string accountNo = testData["AccountNumber"];
                customerInquiry.ValidateSearchSelectAccountNo(accountNo);
                customerInquiry.ValidateSelectMeter();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_View Dashboard
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_6026_RP_Utility_Read_Only_View_Dashboard()
        {
            testCaseId = "TC-6026";
            qTestUniqueId = "19483031";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageCustomerInquiry(url, userName, password);
                string accountNo = testData["AccountNumber"];
                customerInquiry.ValidateSearchSelectAccountNo(accountNo);
                customerInquiry.ValidateViewDashboard();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Import Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6027_RP_Utility_Read_Only_Import_Management()
        {
            testCaseId = "TC-6027";
            qTestUniqueId = "19483032";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavImportManagement(url, userName, password);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Import
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6028_RP_Utility_Read_Only_Import()
        {
            testCaseId = "TC-6028";
            qTestUniqueId = "19483033";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavImportManagement(url, userName, password);
                billingServicesImport.ValidateImportDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_View Import Files
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6029_RP_Utility_Read_Only_View_Import_Files()
        {
            testCaseId = "TC-6029";
            qTestUniqueId = "19483034";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavImportManagement(url, userName, password);
                billingServicesImport.ValidateImport();
                billingServicesImport.ValidateImportFiles();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Device Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6031_RP_Utility_Read_Only_Device_Management()
        {
            testCaseId = "TC-6031";
            qTestUniqueId = "19483036";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Create Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6032_RP_Utility_Read_Only_Create_Collector()
        {
            testCaseId = "TC-6032";
            qTestUniqueId = "19483037";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCreateCollectorBtnDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Create Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6033_RP_Utility_Read_Only_Create_Gateway()
        {
            testCaseId = "TC-6033";
            qTestUniqueId = "19483038";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCreateGatewayBtnDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Edit Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6034_RP_Utility_Read_Only_Edit_Collector()
        {
            testCaseId = "TC-6034";
            qTestUniqueId = "19483039";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValiadateEditCollectorSaveDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Edit Collector Description
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6035_RP_Utility_Read_Only_Edit_Collector_Description()
        {
            testCaseId = "TC-6035";
            qTestUniqueId = "19483040";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateDeviceNameDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Build USB for Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6036_RP_Utility_Read_Only_Build_USB_for_Collector()
        {
            testCaseId = "TC-6036";
            qTestUniqueId = "19483041";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateBuidUSBCollectorDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Edit Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6038_RP_Utility_Read_Only_Edit_Gateway()
        {
            testCaseId = "TC-6038";
            qTestUniqueId = "19483043";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateEditGatewayDoesNotexists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Edit Gateway Description
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6039_RP_Utility_Read_Only_Edit_Gateway_Description()
        {
            testCaseId = "TC-6039";
            qTestUniqueId = "19483044";
            startDate = DateTime.Now; startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateDeviceNameDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Build USB for Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]
        [Test]
        public void TC_6040_RP_Utility_Read_Only_Build_USB_for_Gateway()
        {
            testCaseId = "TC-6040";
            qTestUniqueId = "19483045";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateBuildUSBGatewayDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Enable/Disable Permissions
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6042_RP_Utility_Read_Only_Enable_Disable_Permissions()
        {
            testCaseId = "TC-6042";
            qTestUniqueId = "19483047";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavRolesPermissions(url, userName, password);
                rolesPermissons.ValidateEditRole();
                rolesPermissons.ValidateEnableDisablePermissions();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_View Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6043_RP_Utility_Read_Only_View_Collector()
        {
            testCaseId = "TC-6043";
            qTestUniqueId = "19483048";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateViewCollector();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_View Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6044_RP_Utility_Read_Only_View_Gateway()
        {
            testCaseId = "TC-6044";
            qTestUniqueId = "19483049";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateViewGateway();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Clone Collector
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6045_RP_Utility_Read_Only_Clone_Collector()
        {
            testCaseId = "TC-6045";
            qTestUniqueId = "19483050";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCloneCollectorDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Clone Gateway
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6046_RP_Utility_Read_Only_Clone_Gateway()
        {
            testCaseId = "TC-6046";
            qTestUniqueId = "19483051";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateCloneGatewayDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Delete Device
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6047_RP_Utility_Read_Only_Delete_Device()
        {
            testCaseId = "TC-6047";
            qTestUniqueId = "19483052";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUtilityDeviceManagement(url, userName, password);
                utilityManagement.ValidateDeleteDeviceDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Export Management
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6048_RP_Utility_Read_Only_Export_Management()
        {
            testCaseId = "TC-6048";
            qTestUniqueId = "19483053";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateExportScreenDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_View Exports
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6049_RP_Utility_Read_Only_View_Exports()
        {
            testCaseId = "TC-6049";
            qTestUniqueId = "19483054";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateExportFiles();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Select One/All File for Export
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6050_RP_Utility_Read_Only_Select_One_All_File_for_Export()
        {
            testCaseId = "TC-6050";
            qTestUniqueId = "19483055";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateSelectOneAllForExportDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Deselect One/All File for Export
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6051_RP_Utility_Read_Only_Deselect_One_All_File_for_Export()
        {
            testCaseId = "TC-6051";
            qTestUniqueId = "19483056";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateDeselectOneAllForExportDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_ReExport
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6052_RP_Utility_Read_Only_ReExport()
        {
            testCaseId = "TC-6052";
            qTestUniqueId = "19483057";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateExportButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Export Settings
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6053_RP_Utility_Read_Only_Export_Settings()
        {
            testCaseId = "TC-6053";
            qTestUniqueId = "19483058";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateExportSettingsDisabled();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_View Only Exported
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6054_RP_Utility_Read_Only_View_Only_Exported()
        {
            testCaseId = "TC-6054";
            qTestUniqueId = "19483059";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftNavExportManagement(url, userName, password);
                billingServicesExport.ValidateViewOnlyExportedDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Notifications
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6055_RP_Utility_Read_Only_Notifications()
        {
            testCaseId = "TC-6055";
            qTestUniqueId = "19483060";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                home.ValidateNotificationsWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_Edit Notification
        /// </summary>
        [Category("RolesAndPermissions-OBSOLETE")]

        [Test]
        public void TC_6057_RP_Utility_Read_Only_Edit_Notification()
        {
            testCaseId = "TC-6057";
            qTestUniqueId = "19483062";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateLanPageNotifications(url, userName, password);
                notification.ValidateEditNotificationDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Read_Only_View Notification
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_6058_RP_Utility_Read_Only_View_Notification()
        {
            testCaseId = "TC-6058";
            qTestUniqueId = "19483063";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateLanPageNotifications(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                notification.ValidateViewNotificationDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Permissions_Validation_Left Navigation_API Deployment_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15450_Permissions_Validation_Left_Navigation_API_Deployment_Neptune_System_Admin_Default_ON()
        {
            testCaseId = "TC-15450";
            qTestUniqueId = "34051151";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToLftNavRolesPermissions(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                notification.ValidateViewNotificationDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Role & Permissions: UI - Navigate to Roles and Permissions Screen - Roles and Permissions Screen
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_3831_UI_Navigate_to_Rnp_Screen_Rnp_Screen()
        {
            testCaseId = "TC-3831";
            qTestUniqueId = "19317426";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToLftNavRolesPermissions(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateRolesnPermPageDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Role & Permissions: UI - Create New Role
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_3832_UI_Create_New_Role()
        {
            testCaseId = "TC-3832";
            qTestUniqueId = "19317427";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToLftNavRolesPermissions(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCreateField();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Role & Permissions: UI - Canceling the creation of Role
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_3836_UI_Canceling_the_creation_of_Role()
        {
            testCaseId = "TC-3836";
            qTestUniqueId = "19317431";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToLftNavRolesPermissions(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCancellingCreateRole();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Landing Page
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12534_Rnp_Utility_Meter_Reader_Landing_Page()
        {
            testCaseId = "TC-12534";
            qTestUniqueId = "27354943";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLandingPage();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Search Account
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12535_Rnp_Utility_Meter_Reader_Search_Account()
        {
            testCaseId = "TC-12535";
            qTestUniqueId = "27354944";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateSearchAccNotAvail();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Dashboard Widget
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12536_Rnp_Utility_Meter_Reader_Dashboard_Widget()
        {
            testCaseId = "TC-12536";
            qTestUniqueId = "27354945";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDashboardWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }

            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Customer Inquiry Widget 
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12537_Rnp_Utility_Meter_Reader_Customer_Inquiry_Widget()
        {
            testCaseId = "TC-12537";
            qTestUniqueId = "27354946";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCustomerInquirydWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Billing Service Widget 
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12538_Rnp_Utility_Meter_Reader_Billing_Service_Widget()
        {
            testCaseId = "TC-12538";
            qTestUniqueId = "27354947";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateBillingServicesWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Notifications Widget
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12539_Rnp_Utility_Meter_Reader_Notifications_Widget()
        {
            testCaseId = "TC-12539";
            qTestUniqueId = "27354948";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNotificationsWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_User Management Widget 
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12540_Rnp_Utility_Meter_Reader_User_Management_Widget()
        {
            testCaseId = "TC-12540";
            qTestUniqueId = "27354949";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUserManagementWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Utility Management Widget 
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12541_Rnp_Utility_Meter_Reader_Utility_Management_Widget()
        {
            testCaseId = "TC-12541";
            qTestUniqueId = "27354950";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUtilityManagementWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Route Management Widget 
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12542_Rnp_Utility_Meter_Reader_Route_Management_Widget()
        {
            testCaseId = "TC-12542";
            qTestUniqueId = "27354951";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateRouteManagementWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Left Navigation
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12543_Rnp_Utility_Meter_Reader_Left_Navigation()
        {
            testCaseId = "TC-12543";
            qTestUniqueId = "27354952";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUtilityManagementLeftNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Dashboard Menu Item 
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12544_Rnp_Utility_Meter_Reader_Dashboard_Menu_Item()
        {
            testCaseId = "TC-12544";
            qTestUniqueId = "27354953";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDashboardAccess();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Search Utilities
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12838_Rnp_Utility_Meter_Reader_Search_Utilities()
        {
            testCaseId = "TC-12838";
            qTestUniqueId = "27481402";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false); rolesPermissons.ValidateSearchUtilityNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Import  File Menu Item 
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12839_Rnp_Utility_Meter_Reader_Import_File_Menu_Item()
        {
            testCaseId = "TC-12839";
            qTestUniqueId = "27481403";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateImportFilesLftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Export  File Menu Item 
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12840_Rnp_Utility_Meter_Reader_Export_File_Menu_Item()
        {
            testCaseId = "TC-12840";
            qTestUniqueId = "27481404";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //     home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateExportFilesLftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Export  History Menu Item  
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12841_Rnp_Utility_Meter_Reader_Export_History_Menu_Item()
        {
            testCaseId = "TC-12841";
            qTestUniqueId = "27481405";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateExportHistoryLftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Account Management Menu Item  
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12842_Rnp_Utility_Meter_Reader_Account_Management_Menu_Item()
        {
            testCaseId = "TC-12842";
            qTestUniqueId = "27481406";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAccManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Create Account Menu Item 
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12843_Rnp_Utility_Meter_Reader_Create_Account_Menu_Item()
        {
            testCaseId = "TC-12843";
            qTestUniqueId = "27481407";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCreateAccount();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader Manage Account Menu Item 
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12844_Rnp_Utility_Meter_Reader_Manage_Account_Menu_Item()
        {
            testCaseId = "TC-12844";
            qTestUniqueId = "27481408";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateManageAccount();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Customer Inquiry Left Navigation
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12546_Rnp_Utility_Meter_Reader_Customer_Inquiry_Left_Navigation()
        {
            testCaseId = "TC-12546";
            qTestUniqueId = "27354955";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];

                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCustomerInquiryLeftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Billing Services Left Navigation 
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12547_Rnp_Utility_Meter_Reader_Billing_Services_Left_Navigation()
        {
            testCaseId = "TC-12547";
            qTestUniqueId = "27354956";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateBillingServicesLeftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Utility Management Left Navigation  
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12548_Rnp_Utility_Meter_Reader_Utility_Management_Left_Navigation()
        {
            testCaseId = "TC-12548";
            qTestUniqueId = "27354957";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUtilityManagementLeftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Device Management Menu Item 
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12845_Rnp_Utility_Meter_Reader_Device_Management_Menu_Item()
        {
            testCaseId = "TC-12845";
            qTestUniqueId = "27481409";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUtilityManagementLeftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Alert Configuration Menu Item 
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12846_Rnp_Utility_Meter_Reader_Alert_Configuration_Menu_Item()
        {
            testCaseId = "TC-12846";
            qTestUniqueId = "27481410";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertManagementLeftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Endpoint Management Menu Item 
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12847_Rnp_Utility_Meter_Reader_Endpoint_Management_Menu_Item()
        {
            testCaseId = "TC-12847";
            qTestUniqueId = "27481411";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateEndPointManagementLeftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Create MIU Asset Menu Item 
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12848_Rnp_Utility_Meter_Reader_Create_MIU_Asset_Menu_Item()
        {
            testCaseId = "TC-12848";
            qTestUniqueId = "27481412";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);

                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCreateMIULeftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_CMIU Mode Management Menu Item 
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12849_Rnp_Utility_Meter_Reader_CMIU_Mode_Management_Menu_Item()
        {
            testCaseId = "TC-12849";
            qTestUniqueId = "27481413";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCMIUModeManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Platform Management Left Navigation 
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12549_Rnp_Utility_Meter_Reader_Platform_Management_Left_Navigation()
        {
            testCaseId = "TC-12549";
            qTestUniqueId = "27354958";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidatePlatformManagementLeftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader User Management Left Navigation 
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12550_Rnp_Utility_Meter_Reader_User_Management_Left_Navigation()
        {
            testCaseId = "TC-12550";
            qTestUniqueId = "27354959";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUserManagementLeftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Route Management Menu Item
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12851_Rnp_Utility_Meter_Reader_Route_Management_Menu_Item()
        {
            testCaseId = "TC-12851";
            qTestUniqueId = "27481415";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateRouteManagementMenu();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Route Assignment Menu Item
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12852_Rnp_Utility_Meter_Reader_Route_Assignment_Menu_Item()
        {
            testCaseId = "TC-12852";
            qTestUniqueId = "27481416";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateRouteAssignementMenu();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Notifications Left Navigation
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12553_Rnp_Utility_Meter_Reader_Notifications_Left_Navigation()
        {
            testCaseId = "TC-12553";
            qTestUniqueId = "27354962";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNotificationMenu();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Roles and Permissions Left Navigation
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12551_Rnp_Utility_Meter_Reader_Rnp_Left_Navigation()
        {
            testCaseId = "TC-12551";
            qTestUniqueId = "27354960";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateRolesAndPermissionsLeft();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Top Navigation 
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12554_Rnp_Utility_Meter_Reader_Top_Navigation()
        {
            testCaseId = "TC-12554";
            qTestUniqueId = "27354963";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateTopNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Home Top Navigation
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12555_Rnp_Utility_Meter_Reader_Home_Top_Navigation()
        {
            testCaseId = "TC-12555";
            qTestUniqueId = "27354964";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateHomeTopNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Profile Top Navigation 
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12556_Rnp_Utility_Meter_Reader_Profile_Top_Navigation()
        {
            testCaseId = "TC-12556";
            qTestUniqueId = "27354965";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateProfileTopNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Alerts Notifications Top Navigation 
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12557_Rnp_Utility_Meter_Reader_Alerts_Notifications_Top_Navigation()
        {
            testCaseId = "TC-12557";
            qTestUniqueId = "27354966";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertTopNavigationNoView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Logout Top Navigation 
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12558_Rnp_Utility_Meter_Reader_Logout_Top_Navigation()
        {
            testCaseId = "TC-12558";
            qTestUniqueId = "27354967";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLogoutTopNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Question Icon Top Navigation  
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12559_Rnp_Utility_Meter_Reader_Question_Icon_Top_Navigation()
        {
            testCaseId = "TC-12559";
            qTestUniqueId = "27354968";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateQuestionMark();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Question Icon Top Navigation  
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12560_Rnp_Utility_Meter_Reader_Help_Contents_Top_Navigation()
        {
            testCaseId = "TC-12560";
            qTestUniqueId = "27354969";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateHelpMarkTopNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_About Neptune 360 Top Navigation  
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12561_Rnp_Utility_Meter_Reader_About_Neptune_360_Top_Navigation()
        {
            testCaseId = "TC-12561";
            qTestUniqueId = "27354970";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptune360MarkTopNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Choose Utility 
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12562_Rnp_Utility_Meter_Reader_Choose_Utility()
        {
            testCaseId = "TC-12562";
            qTestUniqueId = "27354971";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateChooseUtilityTopNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Dashboard
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12854_Rnp_Utility_Meter_Reader_Dashboard()
        {
            testCaseId = "TC-12854";
            qTestUniqueId = "27481418";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDashboardNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_View All Dashboard Widgets
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12855_Rnp_Utility_Meter_Reader_View_All_Dashboard_Widgets()
        {
            testCaseId = "TC-12855";
            qTestUniqueId = "27481419";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAllDashboardWidgets();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_User/Identity Management
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12563_Rnp_Utility_Meter_Reader_User_Identity_Management()
        {
            testCaseId = "TC-12563";
            qTestUniqueId = "27354972";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUserManagementOption();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Create Neptune User
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12564_Rnp_Utility_Meter_Reader_Create_Neptune_User()
        {
            testCaseId = "TC-12564";
            qTestUniqueId = "27354973";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");

                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCreateUser();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Search User
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12565_Rnp_Utility_Meter_Reader_Search_User()
        {
            testCaseId = "TC-12565";
            qTestUniqueId = "27354974";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateSearchUserNotExist();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Edit User
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12566_Rnp_Utility_Meter_Reader_Edit_User()
        {
            testCaseId = "TC-12566";
            qTestUniqueId = "27354975";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateEditUserNotExist();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_View User
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12567_Rnp_Utility_Meter_Reader_View_User()
        {
            testCaseId = "TC-12567";
            qTestUniqueId = "27354976";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateViewUserNotExist();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Deactivate User
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12568_Rnp_Utility_Meter_Reader_Deactivate_User()
        {
            testCaseId = "TC-12568";
            qTestUniqueId = "27354977";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDeactivateUserDoesNotExist();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Deactivate User
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12569_Rnp_Utility_Meter_Reader_Deactivate_User()
        {
            testCaseId = "TC-12569";
            qTestUniqueId = "27354978";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDeactivateUserDoesNotExist();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Send Password Reset to Self
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12571_Rnp_Utility_Meter_Reader_Send_Password_Reset_to_Others()
        {
            testCaseId = "TC-12571";
            qTestUniqueId = "27354980";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateSendPasswordResetToOthers();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Designate as Neptune User
        /// </summary> 
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12572_Rnp_Utility_Meter_Reader_Designate_as_Neptune_User()
        {
            testCaseId = "TC-12572";
            qTestUniqueId = "27354981";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDesignateNeptuneUser();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Designate as Neptune User
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12573_Rnp_Utility_Meter_Reader_Designate_as_Neptune_User()
        {
            testCaseId = "TC-12573";
            qTestUniqueId = "27354982";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDesignateNeptuneUser();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Assign Neptune Only Roles
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12574_Rnp_Utility_Meter_Reader_Assign_Neptune_Only_Roles()
        {
            testCaseId = "TC-12574";
            qTestUniqueId = "27354983";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneOnlyRoles();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Utility Management
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12575_Rnp_Utility_Meter_Reader_Utility_Management()
        {
            testCaseId = "TC-12575";
            qTestUniqueId = "27354984";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUtilityManagementPage();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Create Utility
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12576_Rnp_Utility_Meter_Reader_Create_Utility()
        {
            testCaseId = "TC-12576";
            qTestUniqueId = "27354985";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCreateUtility();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Search Utility
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12577_Rnp_Utility_Meter_Reader_Search_Utility()
        {
            testCaseId = "TC-12577";
            qTestUniqueId = "27354986";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateSearchUtilityNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Edit Utility
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12578_Rnp_Utility_Meter_Reader_Edit_Utility()
        {
            testCaseId = "TC-12578";
            qTestUniqueId = "27354987";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateEditUtility();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Filter Utility
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12579_Rnp_Utility_Meter_Reader_Filter_Utility()
        {
            testCaseId = "TC-12579";
            qTestUniqueId = "27354988";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateFilterUtility();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_View Utility
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12580_Rnp_Utility_Meter_Reader_View_Utility()
        {
            testCaseId = "TC-12580";
            qTestUniqueId = "27354989";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateViewUtility();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_View Utility
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12581_Rnp_Utility_Meter_Reader_View_Utility()
        {
            testCaseId = "TC-12581";
            qTestUniqueId = "27354990";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDeactivateUtility();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_View Utility
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12582_Rnp_Utility_Meter_Reader_View_Utility()
        {
            testCaseId = "TC-12582";
            qTestUniqueId = "27354991";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCodeManagementSection();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Create Code
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12583_Rnp_Utility_Meter_Create_Code()
        {
            testCaseId = "TC-12583";
            qTestUniqueId = "27354992";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCreateCode();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Create Code
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12584_Rnp_Utility_Meter_Create_Code()
        {
            testCaseId = "TC-12584";
            qTestUniqueId = "27354993";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCreateCode();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Edit Code
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12585_Rnp_Utility_Meter_Edit_Code()
        {
            testCaseId = "TC-12585";
            qTestUniqueId = "27354994";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateEditCode();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_View Code
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12586_Rnp_Utility_Meter_View_Code()
        {
            testCaseId = "TC-12586";
            qTestUniqueId = "27354995";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateViewCode();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader Delete Code
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12587_Rnp_Utility_Meter_Delete_Code()
        {
            testCaseId = "TC-12587";
            qTestUniqueId = "27354996";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDeleteCode();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Role Management
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12588_Rnp_Utility_Meter_Reader_Role_Management()
        {
            testCaseId = "TC-12588";
            qTestUniqueId = "27354997";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateRoleManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Set Neptune Only Option
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12862_Rnp_Utility_Meter_Reader_Set_Neptune_Only_Option()
        {
            testCaseId = "TC-12862";
            qTestUniqueId = "27481426";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneOption();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Create Role
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun16")]
        [Test]
        public void TC_12589_Rnp_Utility_Meter_Reader_Create_Role()
        {
            testCaseId = "TC-12589";
            qTestUniqueId = "27354998";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateMeterReaderCreateRole();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Enable/Disable Feature Groups
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12863_Rnp_Utility_Meter_Reader_Enable_Disable_Feature_Groups()
        {
            testCaseId = "TC-12863";
            qTestUniqueId = "27481427";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateEnableDisableFeatureGroup();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Edit System-Level Role
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12590_Rnp_Utility_Meter_Reader_Edit_System_Level_Role()
        {
            testCaseId = "TC-12590";
            qTestUniqueId = "27354999";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateEditSystemLevelRole();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Toggle Permissions
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12591_Rnp_Utility_Meter_Reader_Toggle_Permissions()
        {
            testCaseId = "TC-12591";
            qTestUniqueId = "27355000";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateEnableDisableFeatureGroup();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_View Role
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12592_Rnp_Utility_Meter_Reader_View_Role()
        {
            testCaseId = "TC-12592";
            qTestUniqueId = "27355001";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateEnableDisableFeatureGroup();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader Delete Role
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12593_Rnp_Utility_Meter_Reader_Delete_Role()
        {
            testCaseId = "TC-12593";
            qTestUniqueId = "27355002";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateEnableDisableFeatureGroup();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Customer Inquiry
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12594_Rnp_Utility_Meter_Reader_Customer_Inquiry()
        {
            testCaseId = "TC-12594";
            qTestUniqueId = "27355003";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCustomerInquiry();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Search and Select Account
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12595_Rnp_Utility_Meter_Reader_Search_and_Select_Account()
        {
            testCaseId = "TC-12595";
            qTestUniqueId = "27355004";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCustomerInquiry();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Edit Asset Configuration
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12596_Rnp_Utility_Meter_Reader_Edit_Asset_Configuration()
        {
            testCaseId = "TC-12596";
            qTestUniqueId = "27355005";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateEditSystemLevelRole();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Select a Meter
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12597_Rnp_Utility_Meter_Reader_Select_a_Meter()
        {
            testCaseId = "TC-12597";
            qTestUniqueId = "27355005";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUtilityMeterReader();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_View Consumption Metrics
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12864_Rnp_Utility_Meter_Reader_View_Consumption_Metrics()
        {
            testCaseId = "TC-12864";
            qTestUniqueId = "27481428";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateViewConsumptionMatrix();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Consumption Metrics Trend Line
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12865_Rnp_Utility_Meter_Reader_Consumption_Metrics_Trend_Line()
        {
            testCaseId = "TC-12865";
            qTestUniqueId = "27481429";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateViewConsumptionMatrix();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Consumption Metrics Map View
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12866_Rnp_Utility_Meter_Reader_Consumption_Metrics_Map_View()
        {
            testCaseId = "TC-12866";
            qTestUniqueId = "27481430";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateViewConsumptionMatrix();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Initiate On-Demand Reads
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12867_Rnp_Utility_Meter_Reader_Initiate_OnDemand_Reads()
        {
            testCaseId = "TC-12867";
            qTestUniqueId = "27481433";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateViewConsumptionMatrix();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_View Dashboard
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12598_Rnp_Utility_Meter_Reader_View_Dashboard()
        {
            testCaseId = "TC-12598";
            qTestUniqueId = "27355007";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
               rolesPermissons.ValidateDashboard();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Import Management
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12599_Rnp_Utility_Meter_Reader_Import_Management()
        {
            testCaseId = "TC-12599";
            qTestUniqueId = "27355008";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateImportManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Import 
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12600_Rnp_Utility_Meter_Reader_Import()
        {
            testCaseId = "TC-12600";
            qTestUniqueId = "27355009";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateImportManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_View Import Files
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12601_Rnp_Utility_Meter_Reader_View_Import_Files()
        {
            testCaseId = "TC-12601";
            qTestUniqueId = "27355010";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateImportManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Upload Import File
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12602_Rnp_Utility_Meter_Reader_Upload_Import_File()
        {
            testCaseId = "TC-12602";
            qTestUniqueId = "27355011";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateImportManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Device Management
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12603_Rnp_Utility_Meter_Reader_Device_Management()
        {
            testCaseId = "TC-12603";
            qTestUniqueId = "27355012";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDeviceManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Create Collector
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12604_Rnp_Utility_Meter_Reader_Create_Collector()
        {
            testCaseId = "TC-12604";
            qTestUniqueId = "27355013";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCollectorNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Create Gateway
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12605_Rnp_Utility_Meter_Reader_Create_Gateway()
        {
            testCaseId = "TC-12605";
            qTestUniqueId = "27355014";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCollectorNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Edit Collector 
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12606_Rnp_Utility_Meter_Reader_Edit_Collector()
        {
            testCaseId = "TC-12606";
            qTestUniqueId = "27355015";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCollectorNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Edit Collector Description
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12607_Rnp_Utility_Meter_Reader_Edit_Collector_Description()
        {
            testCaseId = "TC-12607";
            qTestUniqueId = "27355016";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCollectorNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Build USB for Collector
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12608_Rnp_Utility_Meter_Reader_Build_USB_for_Collector()
        {
            testCaseId = "TC-12608";
            qTestUniqueId = "27355017";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateBuildUSB();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Edit Gateway
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12610_Rnp_Utility_Meter_Reader_Edit_Gateway()
        {
            testCaseId = "TC-12610";
            qTestUniqueId = "27355019";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateBuildUSB();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Edit Gateway Description
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12611_Rnp_Utility_Meter_Reader_Edit_Gateway_Description()
        {
            testCaseId = "TC-12611";
            qTestUniqueId = "27355020";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateBuildUSB();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Build USB for Gateway
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12612_Rnp_Utility_Meter_Reader_Build_USB_for_Gateway()
        {
            testCaseId = "TC-12612";
            qTestUniqueId = "27355021";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateBuildUSB();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method toRoles and Permissions_Utility Meter Reader_View Device Management
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12868_Rnp_Utility_Meter_Reader_View_Device_Management()
        {
            testCaseId = "TC-12868";
            qTestUniqueId = "27481434";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDeviceManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_View Collector
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12615_Rnp_Utility_Meter_Reader_View_Collector()
        {
            testCaseId = "TC-12615";
            qTestUniqueId = "27355024";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateBuildUSB();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_View Gateway
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12616_Rnp_Utility_Meter_Reader_View_Gateway()
        {
            testCaseId = "TC-12616";
            qTestUniqueId = "27355025";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateBuildUSB();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Clone Collector
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12617_Rnp_Utility_Meter_Reader_Clone_Collector()
        {
            testCaseId = "TC-12617";
            qTestUniqueId = "27355026";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateBuildUSB();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Clone Gateway
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12618_Rnp_Utility_Meter_Reader_Clone_Gateway()
        {
            testCaseId = "TC-12618";
            qTestUniqueId = "27355027";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateBuildUSB();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Delete Device
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12619_Rnp_Utility_Meter_Reader_Delete_Device()
        {
            testCaseId = "TC-12619";
            qTestUniqueId = "27355028";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
               home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false); rolesPermissons.ValidateBuildUSB();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Export Management
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12620_Rnp_Utility_Meter_Reader_Export_Management()
        {
            testCaseId = "TC-12620";
            qTestUniqueId = "27355029";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateExport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_View Exports
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12621_Rnp_Utility_Meter_Reader_View_Exports()
        {
            testCaseId = "TC-12621";
            qTestUniqueId = "27355030";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateExport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Select One/All File for Export
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12622_Rnp_Utility_Meter_Reader_Select_One_All_File_for_Export()
        {
            testCaseId = "TC-12622";
            qTestUniqueId = "27355031";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateExport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Deselect One/All File for Export
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12623_Rnp_Utility_Meter_Reader_Deselect_One_All_File_for_Export()
        {
            testCaseId = "TC-12623";
            qTestUniqueId = "27355032";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateExport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_ReExport
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12624_Rnp_Utility_Meter_Reader_ReExport()
        {
            testCaseId = "TC-12624";
            qTestUniqueId = "27355033";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateExport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Export Settings
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12625_Rnp_Utility_Meter_Reader_Export_Settings()
        {
            testCaseId = "TC-12625";
            qTestUniqueId = "27355034";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateExport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_View Only Exported
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12626_Rnp_Utility_Meter_Reader_View_Only_Exported()
        {
            testCaseId = "TC-12626";
            qTestUniqueId = "27355035";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateExport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Export History Screen
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12837_Rnp_Utility_Meter_Reader_Export_History_Screen()
        {
            testCaseId = "TC-12837";
            qTestUniqueId = "27478623";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateExport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Export History Screen
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12869_Rnp_Utility_Meter_Reader_Export_History_Screen()
        {
            testCaseId = "TC-12869";
            qTestUniqueId = "27481435";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateExport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Notifications
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12627_Rnp_Utility_Meter_Reader_Notifications()
        {
            testCaseId = "TC-12627";
            qTestUniqueId = "27355036";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNotification();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Create Notification
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12628_Rnp_Utility_Meter_Reader_Create_Notification()
        {
            testCaseId = "TC-12628";
            qTestUniqueId = "27355037";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNotification();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader Edit Notification
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12629_Rnp_Utility_Meter_Reader_Edit_Notification()
        {
            testCaseId = "TC-12629";
            qTestUniqueId = "27355038";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNotification();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader View Notification
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12630_Rnp_Utility_Meter_Reader_View_Notification()
        {
            testCaseId = "TC-12630";
            qTestUniqueId = "27355039";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNotification();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Route Assignment Screen
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12631_Rnp_Utility_Meter_Reader_Route_Assignment_Screen()
        {
            testCaseId = "TC-12631";
            qTestUniqueId = "27355040";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateRouteAssignmentScreen();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_View Routes
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12632_Rnp_Utility_Meter_Reader_View_Routes()
        {
            testCaseId = "TC-12632";
            qTestUniqueId = "27355041";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateRouteAssignmentScreen();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_View Reader
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12633_Rnp_Utility_Meter_Reader_View_Reader()
        {
            testCaseId = "TC-12633";
            qTestUniqueId = "27355042";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateRouteAssignmentScreen();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Display as Reader
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12634_Rnp_Utility_Meter_Reader_Display_as_Reader()
        {
            testCaseId = "TC-12634";
            qTestUniqueId = "27355043";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUtiltyAdminMeterReader();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_View Route Management Dashboard
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12635_Rnp_Utility_Meter_Reader_View_Route_Management_Dashboard()
        {
            testCaseId = "TC-12635";
            qTestUniqueId = "27355044";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateRouteAssignmentScreen();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Edit Assignments
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12636_Rnp_Utility_Meter_Reader_Edit_Assignments()
        {
            testCaseId = "TC-12636";
            qTestUniqueId = "27355045";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateRouteAssignmentScreen();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Assign Routes
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12637_Rnp_Utility_Meter_Reader_Assign_Routes()
        {
            testCaseId = "TC-12637";
            qTestUniqueId = "27355046";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false); rolesPermissons.ValidateRouteAssignmentScreen();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Unassign Routes
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12638_Rnp_Utility_Meter_Reader_Unassign_Routes()
        {
            testCaseId = "TC-12638";
            qTestUniqueId = "27355047";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateRouteAssignmentScreen();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Unassign Routes
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12836_Rnp_Utility_Meter_Reader_Unassign_Routes()
        {
            testCaseId = "TC-12836";
            qTestUniqueId = "27478509";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateRouteAssignmentScreen();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Alert Configuration Screen
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12662_Rnp_Utility_Meter_Reader_Alert_Configuration_Screen()
        {
            testCaseId = "TC-12662";
            qTestUniqueId = "27355071";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfigurationNotExist();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_View Alert Configurations
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]

        [Test]
        public void TC_12663_Rnp_Utility_Meter_Reader_View_Alert_Configurations()
        {
            testCaseId = "TC-12663";
            qTestUniqueId = "27355072";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfiguration();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Edit Alert Configurations
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_12664_Rnp_Utility_Meter_Reader_Edit_Alert_Configurations()
        {
            testCaseId = "TC-12664";
            qTestUniqueId = "27355073";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfiguration();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Alert Notifications Screen
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12665_Rnp_Utility_Meter_Reader_Alert_Notifications_Screen()
        {
            testCaseId = "TC-12665";
            qTestUniqueId = "27355074";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false); 
                rolesPermissons.ValidateNotification();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Alert Notifications Screen
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12666_Rnp_Utility_Meter_Reader_View_Alert_Notifications()
        {
            testCaseId = "TC-12666";
            qTestUniqueId = "27355075";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNotification();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// <summary>
        /// Test Method to Roles and Permissions_Utility Meter Reader_Edit Alert Notifications 
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_12667_Rnp_Utility_Meter_Reader_Edit_Alert_Notifications()
        {
            testCaseId = "TC-12667";
            qTestUniqueId = "27355076";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNotification();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions - Neptune System Administrator -  Alert Notifications - Yes - Profile Menu - Displayed 
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_13285_RnP_Neptune_System_Administrator_Alert_Notifications_Yes_Profile_Menu_Displayed()
        {
            testCaseId = "TC-13285";
            qTestUniqueId = "28873621";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertNotification();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to  - Neptune System Administrator -  Alert Notifications - Default Yes - View Alert Notifications
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_13286_RnP_Neptune_System_Administrator_Alert_Notifications_Default_Yes_View_Alert_Notifications()
        {
            testCaseId = "TC-13286";
            qTestUniqueId = "28873622";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertNotificationView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune System Administrator -  Alert Notifications - Default Yes - Edit Alert Notifications
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]


        [Test]
        public void TC_13287_RnP_Neptune_System_Administrator_Alert_Notifications_Default_Yes_Edit_Alert_Notifications()
        {
            testCaseId = "TC-13287";
            qTestUniqueId = "28873623";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertNotificationEdit();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune System Administrator -  Left Navigation - Alert Configuration - Default Yes - Alert Configuration Menu Item
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_13288_RnP_Neptune_System_Administrator_Left_Navigation_Alert_Configuration_Default_Yes_Alert_Configuration_Menu_Item()
        {
            testCaseId = "TC-13288";
            qTestUniqueId = "28873624";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto@gmail.comm", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto@gmail.comm", "Automation#123", false);
                rolesPermissons.ValidateAlertConfiguration();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune System Administrator -  Left Navigation - Alert Configuration - Default Yes - View Alert Configurations
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_13289_RnP_Neptune_System_Administrator_Left_Navigation_Alert_Configuration_Default_Yes_View_Alert_Configurations()
        {
            testCaseId = "TC-13289";
            qTestUniqueId = "28873625";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfigurationView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune System Administrator -  Left Navigation - Alert Configuration - Default Yes - Edit Alert Configurations
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]

        [Test]
        public void TC_13290_RnP_Neptune_System_Administrator_Left_Navigation_Alert_Configuration_Default_Yes_Edit_Alert_Configurations()
        {
            testCaseId = "TC-13290";
            qTestUniqueId = "28873626";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfigurationEdit();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Administrator -  Alert Notifications - No - Profile Menu - Displayed 
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]
       
        [Test]
        public void TC_13303_RnP_Utility_Administrator_Alert_Notifications_No_Profile_Menu_Displayed()
        {
            testCaseId = "TC-13303";
            qTestUniqueId = "28873639";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateTopAlertNotificationNoView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Administrator -  Alert Notifications - No - View Alert Notifications
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]

        [Test]
        public void TC_13304_RnP_Utility_Administrator_Alert_Notifications_No_View_Alert_Notifications()
        {
            testCaseId = "TC-13304";
            qTestUniqueId = "28873640";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateTopAlertNotificationNoView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Administrator -  Alert Notifications - No - Edit Alert Notifications
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]
       
        [Test]
        public void TC_13305_RnP_Utility_Administrator_Alert_Notifications_No_Edit_Alert_Notifications()
        {
            testCaseId = "TC-13305";
            qTestUniqueId = "28873641";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateTopAlertNotificationNoView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Administrator -  Left Navigation - Alert Configuration - No - Alert Configuration Menu Item
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]

        [Test]
        public void TC_13306_RnP_Utility_Administrator_Left_Navigation_Alert_Configuration_No_Alert_Configuration_Menu_Item()
        {
            testCaseId = "TC-13306";
            qTestUniqueId = "28873642";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);

                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false); 
                rolesPermissons.ValidateAlertConfigationLeftNoView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// <summary>
        /// Test Method to Utility Administrator -  Left Navigation - Alert Configuration - No - View Alert Configurations
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]

        [Test]
        public void TC_13307_RnP_Utility_Administrator_Left_Navigation_Alert_Configuration_No_View_Alert_Configurations()
        {
            testCaseId = "TC-13307";
            qTestUniqueId = "28873643";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfigationLeftNoView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Administrator -  Left Navigation - Alert Configuration - No - Edit Alert Configurations
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]


        [Test]
        public void TC_13308_RnP_Utility_Administrator_Left_Navigation_Alert_Configuration_No_Edit_Alert_Configurations()
        {
            testCaseId = "TC-13308";
            qTestUniqueId = "28873644";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfigationLeftNoView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune System Administrator -  Alert Notifications - No - Profile Menu - Displayed 
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]

        [Test]
        public void TC_13291_RnP_Neptune_System_Administrator_Alert_Notifications_No_Profile_Menu_Displayed()
        {
            testCaseId = "TC-13291";
            qTestUniqueId = "28873627";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateTopAlertNotificationNoView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune System Administrator -  Alert Notifications - No - View Alert Notifications
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]

        [Test]
        public void TC_13292_RnP_Neptune_System_Administrator_Alert_Notifications_No_View_Alert_Notifications()
        {
            testCaseId = "TC-13292";
            qTestUniqueId = "28873628";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateTopAlertNotificationNoView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune System Administrator -  Alert Notifications - No - Edit Alert Notifications
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]

        [Test]
        public void TC_13293_RnP_Neptune_System_Administrator_Alert_Notifications_No_Edit_Alert_Notifications()
        {
            testCaseId = "TC-13293";
            qTestUniqueId = "28873629";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateTopAlertNotificationNoEdit();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune System Administrator -  Left Navigation - Alert Configuration - No - Alert Configuration Menu Item
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]

        [Test]
        public void TC_13294_RnP_Neptune_System_Administrator_Left_Navigation_Alert_Configuration_No_Alert_Configuration_Menu_Item()
        {
            testCaseId = "TC-13294";
            qTestUniqueId = "28873630";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfigationLeftNoView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune System Administrator -  Left Navigation - Alert Configuration - No - View Alert Configurations
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]
       

        [Test]
        public void TC_13295_RnP_Neptune_System_Administrator_Left_Navigation_Alert_Configuration_No_View_Alert_Configurations()
        {
            testCaseId = "TC-13295";
            qTestUniqueId = "28873631";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);

                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false); rolesPermissons.ValidateAlertConfigationLeftNoView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune System Administrator -  Left Navigation - Alert Configuration - No - Edit Alert Configurations
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]
       
        [Test]
        public void TC_13296_RnP_Neptune_System_Administrator_Left_Navigation_Alert_Configuration_No_Edit_Alert_Configurations()
        {
            testCaseId = "TC-13296";
            qTestUniqueId = "28873632";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfigationLeftNoView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Meter Reader -  Left Navigation - Alert Configuration - No - Edit Alert Configurations
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]


        [Test]
        public void TC_13314_RnP_Utility_Meter_Reader_Left_Navigation_Alert_Configuration_No_Edit_Alert_Configurations()
        {
            testCaseId = "TC-13314";
            qTestUniqueId = "28873650";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfigurationNoEdit();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Meter Reader -  Alert Notifications - Yes - Profile Menu - Displayed 
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]


        [Test]
        public void TC_13315_RnP_Utility_Meter_Reader_Alert_Notifications_Yes_Profile_Menu_Displayed()
        {
            testCaseId = "TC-13315";
            qTestUniqueId = "28873651";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertNotification();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Meter Reader -  Alert Notifications - Yes - View Alert Notifications
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]


        [Test]
        public void TC_13316_RnP_Utility_Meter_Reader_Alert_Notifications_Yes_View_Alert_Notifications()
        {
            testCaseId = "TC-13316";
            qTestUniqueId = "28873652";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertNotificationView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Meter Reader -  Alert Notifications - Yes - View Alert Notifications
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]


        [Test]
        public void TC_13317_RnP_Utility_Meter_Reader_Alert_Notifications_Yes_Edit_Alert_Notifications()
        {
            testCaseId = "TC-13317";
            qTestUniqueId = "28873653";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertNotificationEdit();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Meter Reader -  Left Navigation - Alert Configuration - Yes - Alert Configuration Menu Item
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]


        [Test]
        public void TC_13318_RnP_Utility_Meter_Reader_Left_Navigation_Alert_Configuration_Yes_Alert_Configuration_Menu_Item()
        {
            testCaseId = "TC-13318";
            qTestUniqueId = "28873654";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfiguration();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Meter Reader -  Left Navigation - Alert Configuration - Yes - View Alert Configuration Menu Item
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]


        [Test]
        public void TC_13319_RnP_Utility_Meter_Reader_Left_Navigation_Alert_Configuration_Yes_View_Alert_Configuration_Menu_Item()
        {
            testCaseId = "TC-13319";
            qTestUniqueId = "28873655";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfigurationView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Meter Reader -  Left Navigation - Alert Configuration - Yes - Edit Alert Configuration Menu Item
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]

        [Test]
        public void TC_13320_RnP_Utility_Meter_Reader_Left_Navigation_Alert_Configuration_Yes_Edit_Alert_Configuration_Menu_Item()
        {
            testCaseId = "TC-13320";
            qTestUniqueId = "28873656";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfigurationEdit();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// <summary>
        /// Test Method to Utility Read Only Access -  Alert Notifications - Default Yes - Edit Alert Notifications
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]


        [Test]
        public void TC_13323_RnP_Utility_Read_Only_Access_Alert_Notifications_Default_Yes_Edit_Alert_Notifications()
        {
            testCaseId = "TC-13323";
            qTestUniqueId = "28873659";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertNotificationEdit();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Read Only Access -  Left Navigation - Alert Configuration - Yes - Alert Configuration Menu Item
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]


        [Test]
        public void TC_13324_RnP_Utility_Read_Only_Access_Left_Navigation_Alert_Configuration_Yes_Alert_Configuration_Menu_Item()
        {
            testCaseId = "TC-13324";
            qTestUniqueId = "28873660";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfiguration();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Read Only Access -  Left Navigation - Alert Configuration - Yes - View Alert Configurations
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]


        [Test]
        public void TC_13325_RnP_Utility_Read_Only_Access_Left_Navigation_Alert_Configuration_Yes_View_Alert_Configurations()
        {
            testCaseId = "TC-13325";
            qTestUniqueId = "28873661";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfigurationView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Read Only Access -  Left Navigation - Alert Configuration - Yes - Edit Alert Configurations
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]

        [Test]
        public void TC_13326_RnP_Utility_Read_Only_Access_Left_Navigation_Alert_Configuration_Yes_Edit_Alert_Configurations()
        {
            testCaseId = "TC-13326";
            qTestUniqueId = "28873662";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //     home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfigurationEdit();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Read Only Access -  Left Navigation - Alert Configuration - Yes - Edit Alert Configurations
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]

        [Test]
        public void TC_13327_RnP_Utility_Read_Only_Access_Alert_Notifications_No_Profile_Menu_Displayed()
        {
            testCaseId = "TC-13327";
            qTestUniqueId = "28873663";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateTopAlertNotificationNoView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Read Only Access -  Alert Notifications - No - View Alert Notifications
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]

        [Test]
        public void TC_13328_RnP_Utility_Read_Only_Access_Alert_Notifications_No_View_Alert_Notifications()
        {
            testCaseId = "TC-13328";
            qTestUniqueId = "28873664";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateTopAlertNotificationNoView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Read Only Access -  Alert Notifications - No - Edit Alert Notifications
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]

        [Test]
        public void TC_13329_RnP_Utility_Read_Only_Access_Alert_Notifications_No_Edit_Alert_Notifications()
        {
            testCaseId = "TC-13329";
            qTestUniqueId = "28873665";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateTopAlertNotificationNoEdit();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility User -  Left Navigation - Alert Configuration - Yes - View Alert Configurations
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]


        [Test]
        public void TC_13337_RnP_Utility_User_Left_Navigation_Alert_Configuration_Yes_View_Alert_Configurations()
        {
            testCaseId = "TC-13337";
            qTestUniqueId = "28873673";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfigurationView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility User -  Left Navigation - Alert Configuration - Yes - Edit Alert Configurations
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]


        [Test]
        public void TC_13338_RnP_Utility_User_Left_Navigation_Alert_Configuration_Yes_Edit_Alert_Configurations()
        {
            testCaseId = "TC-13338";
            qTestUniqueId = "28873674";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfigurationView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility User -  Alert Notifications - No - Profile Menu - Displayed 
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_13339_RnP_Utility_User_Alert_Notifications_No_Profile_Menu_Displayed()
        {
            testCaseId = "TC-13339";
            qTestUniqueId = "28873675";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertTopNavigationNoView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility User -  Alert Notifications - No - View Alert Notifications
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_13340_RnP_Utility_User_Alert_Notifications_No_View_Alert_Notifications()
        {
            testCaseId = "TC-13340";
            qTestUniqueId = "28873676";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertTopNavigationNoView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility User -  Alert Notifications - No - Edit Alert Notifications
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]

        [Test]
        public void TC_13341_RnP_Utility_User_Alert_Notifications_No_Edit_Alert_Notifications()
        {
            testCaseId = "TC-13341";
            qTestUniqueId = "28873677";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateTopAlertNotificationNoEdit();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility User -  Left Navigation - Alert Configuration - No - Edit Alert Configurations
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]


        [Test]
        public void TC_13344_RnP_Utility_User_Left_Navigation_Alert_Configuration_No_Edit_Alert_Configurations()
        {
            testCaseId = "TC-13344";
            qTestUniqueId = "28873680";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfigurationNoEdit();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune System Admin - Dashboard Network Health - Permission Available
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_13380_RnP_Neptune_System_Admin_Dashboard_Network_Health_Permission_Available()
        {
            testCaseId = "TC-13380";
            qTestUniqueId = "28910359";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDashboardNetworkHealth();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// <summary>
        /// Test Method to Neptune Customer Service Rep - Dashboard Network Health - Permission Available
        /// </summary>
        [Category("RolesAndPermissions")]
       

        [Test]
        public void TC_13383_RnP_Neptune_Customer_Service_Rep_Dashboard_Network_Health_Permission_Available()
        {
            testCaseId = "TC-13383";
            qTestUniqueId = "28910362";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCustServDashboardNetworkHealth();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }



        /// <summary>
        /// Test Method to Utility Admin - Dashboard Network Health - Permission Available
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_13386_RnP_Utility_Admin_Dashboard_Network_Health_Permission_Available()
        {
            testCaseId = "TC-13386";
            qTestUniqueId = "28910365";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUtilityAdminDashboardNetworkHealth();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility User - Dashboard Network Health - Permission Available
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_13389_RnP_Utility_User_Dashboard_Network_Health_Permission_Available()
        {
            testCaseId = "TC-13389";
            qTestUniqueId = "28910368";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUtilityUserDashboardNetworkHealth();
                home.UserLogOut();
               QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Read Only Access - Dashboard Network Health - Permission Available
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_13392_RnP_Utility_Read_Only_Access_Dashboard_Network_Health_Permission_Available()
        {
            testCaseId = "TC-13392";
            qTestUniqueId = "28910371";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateReadOnlyDashboardNetworkHealth();
                home.UserLogOut();
             QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Meter Reader - Dashboard Network Health - Permission Available
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_13395_RnP_Utility_Meter_Reader_Dashboard_Network_Health_Permission_Available()
        {
            testCaseId = "TC-13395";
            qTestUniqueId = "28910374";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateMeterReaderDashboardNetworkHealth();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Coded Notes Report_Neptune System Admin_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14076_PVR_Coded_Notes_Report_Neptune_System_Admin_Default_ON()
        {
            testCaseId = "TC-14076";
            qTestUniqueId = "30430051";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCodedNotes();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Coded Notes Report_Neptune Customer Service_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14077_PVR_Coded_Notes_Report_Neptune_Customer_Service_Default_ON()
        {
            testCaseId = "TC-14077";
            qTestUniqueId = "30430070";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCodedNotes();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// <summary>
        /// Test Method to Coded Notes Report_Utility Admin_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14078_PVR_Coded_Notes_Report_Utility_Admin_Default_ON()
        {
            testCaseId = "TC-14078";
            qTestUniqueId = "30430071";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCodedNotes();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Coded Notes Report_Utility User_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14079_PVR_Coded_Notes_Report_Utility_User_Default_ON()
        {
            testCaseId = "TC-14079";
            qTestUniqueId = "30430073";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCodedNotes();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Coded Notes Report_Utility Read Only Access_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14080_PVR_Coded_Notes_Report_Utility_Read_Only_Access_Default_ON()
        {
            testCaseId = "TC-14080";
            qTestUniqueId = "30430074";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCodedNotes();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Coded Notes Report_Utility Meter Reader_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]
       

        [Test]
        public void TC_14081_PVR_Coded_Notes_Report_Utility_Meter_Reader_Default_ON()
        {
            testCaseId = "TC-14081";
            qTestUniqueId = "30430075";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCodedNotes();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Coded Notes Report_Utility System Admin Reader_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]
       

        [Test]
        public void TC_14082_PVR_Coded_Notes_Report_Utility_System_Admin_Reader_Default_ON()
        {
            testCaseId = "TC-14082";
            qTestUniqueId = "30430435";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password)
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCodedNotes();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Coded Notes Report_Neptune Customer Service_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14083_PVR_Coded_Notes_Report_Neptune_Customer_Service_OFF()
        {
            testCaseId = "TC-14083";
            qTestUniqueId = "30430436";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                rolesPermissons.SetPermission("Neptune Customer Service Rep", "Coded Notes Report", false);

                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCodedNotesOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);

                rolesPermissons.SetPermission("Neptune Customer Service Rep", "Coded Notes Report");

                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Reports_Coded Notes Report_Utility Admin_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14084_PVR_Reports_Coded_Notes_Report_Utility_Admin_OFF()
        {
            testCaseId = "TC-14084";
            qTestUniqueId = "30430438";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                rolesPermissons.SetPermission("Utility Administrator", "Coded Notes Report", false);

                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCodedNotesOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Administrator", "Coded Notes Report");

                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Coded Notes Report_Utility User_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14085_PVR_Coded_Notes_Report_Utility_User_OFF()
        {
            testCaseId = "TC-14085";
            qTestUniqueId = "30430440";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                rolesPermissons.SetPermission("Utility User", "Coded Notes Report", false);
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCodedNotesOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility User", "Coded Notes Report",true);

                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Coded Notes Report_Utility Read Only Access_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14086_PVR_Coded_Notes_Report_Utility_Read_Only_Access_OFF()
        {
            testCaseId = "TC-14086";
            qTestUniqueId = "30430441";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                rolesPermissons.SetPermission("Utility Read Only Access", "Coded Notes Report", false);

                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCodedNotesOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Read Only Access", "Coded Notes Report");


                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Coded Notes Report_Utility Meter Reader_OFF
        /// </summary>
        [Category("RolesAndPermissions")]
       
        [Test]
        public void TC_14087_PVR_Coded_Notes_Report_Utility_Meter_Reader_OFF()
        {
            testCaseId = "TC-14087";
            qTestUniqueId = "30430443";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                rolesPermissons.SetPermission("Utility Meter Reader", "Coded Notes Report", false);

                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCodedNotesOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Meter Reader", "Coded Notes Report");

                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Comments Report_Neptune System Admin_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14088_PVR_Comments_Report_Neptune_System_Admin_Default_ON()
        {
            testCaseId = "TC-14088";
            qTestUniqueId = "30430444";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Comments Report_Neptune Customer Service_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14089_PVR_Comments_Report_Neptune_Customer_Service_Default_ON()
        {
            testCaseId = "TC-14089";
            qTestUniqueId = "30430452";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Comments Report_Utility Admin_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14090_PVR_Comments_Report_Utility_Admin_Default_ON()
        {
            testCaseId = "TC-14090";
            qTestUniqueId = "30430453";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Comments Report_Utility User_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14091_PVR_Comments_Report_Utility_User_Default_ON()
        {
            testCaseId = "TC-14091";
            qTestUniqueId = "30430455";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Comments Report_Utility User_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14092_PVR_Comments_Report_Utility_User_Default_ON()
        {
            testCaseId = "TC-14092";
            qTestUniqueId = "30430455";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Comments Report_Utility Meter Reader_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14093_PVR_Comments_Report_Utility_Meter_Reader_Default_ON()
        {
            testCaseId = "TC-14093";
            qTestUniqueId = "30430457";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Comments Report_Neptune System Admin_OFF
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14094_PVR_Comments_Report_Neptune_System_Admin_OFF()
        {
            testCaseId = "TC-14094";
            qTestUniqueId = "30430458";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                rolesPermissons.SetPermission("Neptune System Administrator", "Comments Report",false);
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCommentsOff();
                home.UserLogOut();

                home.NavigateToHome(url, userName, password, false);

                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Comments Report_Neptune Customer Service_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14095_PVR_Comments_Report_Neptune_Customer_Service_OFF()
        {
            testCaseId = "TC-14095";
            qTestUniqueId = "30430459";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                rolesPermissons.SetPermission("Neptune Customer Service Rep", "Comments Report", false);

                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCommentsOff();
                home.UserLogOut();

                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Neptune Customer Service Rep", "Comments Report");

                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Comments Report_Utility Admin_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14096_PVR_Comments_Report_Utility_Admin_OFF()
        {
            testCaseId = "TC-14096";
            qTestUniqueId = "30430461";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                rolesPermissons.SetPermission("Utility Administrator", "Comments Report", false);

                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCommentsOff();
                home.UserLogOut();

                home.NavigateToHome(url, userName, password, false);

                rolesPermissons.SetPermission("Utility Administrator", "Comments Report");

                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Comments Report_Utility User_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14097_PVR_Comments_Report_Utility_User_OFF()
        {
            testCaseId = "TC-14097";
            qTestUniqueId = "30430462";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                rolesPermissons.SetPermission("Utility User", "Comments Report", false);

                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCommentsOff(); 
                home.UserLogOut();

                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility User", "Comments Report");

                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Comments Report_Utility Read Only Access_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14098_PVR_Comments_Report_Utility_Read_Only_Access_OFF()
        {
            testCaseId = "TC-14098";
            qTestUniqueId = "30430463";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                rolesPermissons.SetPermission("Utility Read Only Access", "Comments Report", false);

                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCommentsOff();
                home.UserLogOut();

                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Read Only Access", "Comments Report");

                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Comments Report_Utility Meter Reader_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14099_PVR_Comments_Report_Utility_Meter_Reader_OFF()
        {
            testCaseId = "TC-14099";
            qTestUniqueId = "30430465";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                rolesPermissons.SetPermission("Utility Meter Reader", "Comments Report", false);

                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCommentsOff();
                home.UserLogOut();

                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Meter Reader", "Comments Report");

                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Mach 10 Battery Status_Neptune System Admin_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14100_PVR_Mach_10_Battery_Status_Neptune_System_Admin_Default_ON()
        {
            testCaseId = "TC-14100";
            qTestUniqueId = "30430466";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateMachTenOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Mach 10 Battery Status_Neptune Customer Service_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14101_PVR_Mach_10_Battery_Status_Neptune_Customer_Service_Default_ON()
        {
            testCaseId = "TC-14101";
            qTestUniqueId = "30430519";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateMachTenOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Mach 10 Battery Status_Utility Admin_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14102_PVR_Mach_10_Battery_Status_Utility_Admin_Default_ON()
        {
            testCaseId = "TC-14102";
            qTestUniqueId = "30430526";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateMachTenOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Mach 10 Battery Status_Utility User_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14103_PVR_Mach_10_Battery_Status_Utility_User_Default_ON()
        {
            testCaseId = "TC-14103";
            qTestUniqueId = "30430531";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);

                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateMachTenOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Mach 10 Battery Status_Utility Read Only Access_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14104_PVR_Mach_10_Battery_Status_Utility_Read_Only_Access_Default_ON()
        {
            testCaseId = "TC-14104";
            qTestUniqueId = "30430534";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateMachTenOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Mach 10 Battery Status_Utility Meter Reader_Default OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14105_PVR_Mach_10_Battery_Status_Utility_Meter_Reader_Default_OFF()
        {
            testCaseId = "TC-14105";
            qTestUniqueId = "30430536";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateMachTenOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Mach 10 Battery Status_Neptune System Admin_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14106_PVR_Mach_10_Battery_Status_Neptune_System_Admin_OFF()
        {
            testCaseId = "TC-14106";
            qTestUniqueId = "30430539";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Mach 10 Battery Status", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateMachTenOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Mach 10 Battery Status", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Mach 10 Battery Status_Neptune Customer Service_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14107_PVR_Mach_10_Battery_Status_Neptune_Customer_Service_OFF()
        {
            testCaseId = "TC-14107";
            qTestUniqueId = "30430542";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                rolesPermissons.SetPermission("Neptune Customer Service Rep", new Dictionary<string, bool>() { { "Mach 10 Battery Status", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateMachTenOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Neptune Customer Service Rep", new Dictionary<string, bool>() { { "Mach 10 Battery Status", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Mach 10 Battery Status_Utility Admin_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14108_PVR_Mach_10_Battery_Status_Utility_Admin_OFF()
        {
            testCaseId = "TC-14108";
            qTestUniqueId = "30430543";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                rolesPermissons.SetPermission("Utility Administrator", new Dictionary<string, bool>() { { "Mach 10 Battery Status", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateMachTenOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Administrator", new Dictionary<string, bool>() { { "Mach 10 Battery Status", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Mach 10 Battery Status_Utility User_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14109_PVR_Mach_10_Battery_Status_Utility_User_OFF()
        {
            testCaseId = "TC-14109";
            qTestUniqueId = "30430544";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                rolesPermissons.SetPermission("Utility User", new Dictionary<string, bool>() { { "Mach 10 Battery Status", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateMachTenOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility User", new Dictionary<string, bool>() { { "Mach 10 Battery Status", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Mach 10 Battery Status_Utility Read Only Access_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14110_PVR_Mach_10_Battery_Status_Utility_Read_Only_Access_OFF()
        {
            testCaseId = "TC-14110";
            qTestUniqueId = "30430545";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                rolesPermissons.SetPermission("Utility Read Only Access", new Dictionary<string, bool>() { { "Mach 10 Battery Status", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateMachTenOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Read Only Access", new Dictionary<string, bool>() { { "Mach 10 Battery Status", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Mach 10 Battery Status_Utility Meter Reader_ON
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14111_PVR_Mach_10_Battery_Status_Utility_Meter_Reader_ON()
        {
            testCaseId = "TC-14111";
            qTestUniqueId = "30430546";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                rolesPermissons.SetPermission("Utility Meter Reader", new Dictionary<string, bool>() { { "Mach 10 Battery Status", true } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateMachTenOn();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Meter Reader", new Dictionary<string, bool>() { { "Mach 10 Battery Status", false } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
             
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune System Admin_All Reports Disabled
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14121_PVR_Neptune_System_Admin_All_Reports_Disabled()
        {
            testCaseId = "TC-14121";
            qTestUniqueId = "30481786";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Coded Notes Report", false }, { "Comments Report", false }, { "Mach 10 Battery Status", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateReportLandingPageBlank();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Coded Notes Report", true }, { "Comments Report", true }, { "Mach 10 Battery Status", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune CSR_All Reports Disabled
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14122_PVR_Neptune_CSR_All_Reports_Disabled()
        {
            testCaseId = "TC-14122";
            qTestUniqueId = "30481787";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                rolesPermissons.SetPermission("Neptune Customer Service Rep", new Dictionary<string, bool>() { { "Coded Notes Report", false }, { "Comments Report", false }, { "Mach 10 Battery Status", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateReportLandingPageBlank();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Neptune Customer Service Rep", new Dictionary<string, bool>() { { "Coded Notes Report", true }, { "Comments Report", true }, { "Mach 10 Battery Status", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Admin_All Reports Disabled
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14123_PVR_Utility_Admin_All_Reports_Disabled()
        {
            testCaseId = "TC-14123";
            qTestUniqueId = "30481788";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                rolesPermissons.SetPermission("Utility Administrator", new Dictionary<string, bool>() { { "Reports Left Navigation", true } ,{ "Coded Notes Report", false }, { "Comments Report", false }, { "Mach 10 Battery Status", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateReportLandingPageBlank();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Administrator", new Dictionary<string, bool>() { { "Reports Left Navigation", true },  { "Coded Notes Report", true }, { "Comments Report", true }, { "Mach 10 Battery Status", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility User_All Reports Disabled
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14124_PVR_Utility_User_All_Reports_Disabled()
        {
            testCaseId = "TC-14124";
            qTestUniqueId = "30481790";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                rolesPermissons.SetPermission("Utility User", new Dictionary<string, bool>() { { "Coded Notes Report", false }, { "Comments Report", false }, { "Mach 10 Battery Status", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateReportLandingPageBlank();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility User", new Dictionary<string, bool>() { { "Coded Notes Report", true }, { "Comments Report", true }, { "Mach 10 Battery Status", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Read Only Access_All Reports Disabled
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14125_PVR_Utility_Read_Only_Access_All_Reports_Disabled()
        {
            testCaseId = "TC-14125";
            qTestUniqueId = "30481791";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                rolesPermissons.SetPermission("Utility Read Only Access", new Dictionary<string, bool>() { { "Coded Notes Report", false }, { "Comments Report", false }, { "Mach 10 Battery Status", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateReportLandingPageBlank();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Read Only Access", new Dictionary<string, bool>() { { "Coded Notes Report", true }, { "Comments Report", true }, { "Mach 10 Battery Status", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Read Only Access_All Reports Disabled
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14126_PVR_Utility_Meter_Reader_All_Reports_Disabled()
        {
            testCaseId = "TC-14126";
            qTestUniqueId = "30481800";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                rolesPermissons.SetPermission("Utility Meter Reader", new Dictionary<string, bool>() { { "Coded Notes Report", false }, { "Comments Report", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateReportLandingPageBlank();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Meter Reader", new Dictionary<string, bool>() { { "Coded Notes Report", true }, { "Comments Report", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Role Management_Reporting_Permissions_Invalid Readings Report_Display
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14277_Role_Management_Reporting_Permissions_Invalid_Readings_Report_Display()
        {
            testCaseId = "TC-14277";
            qTestUniqueId = "31075632";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidatePermissionsInvalidReadingsReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Role Management_Reporting_Permissions_Invalid Readings Report_Display Location
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14278_Role_Management_Reporting_Permissions_Invalid_Readings_Report_Display_Location()
        {
            testCaseId = "TC-14278";
            qTestUniqueId = "31075633";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidatePermissionsInvalidReadingsReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Invalid Readings_Neptune System Admin_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14280_PVR_Invalid_Readings_Neptune_System_Admin_Default_ON()
        {
            testCaseId = "TC-14280";
            qTestUniqueId = "31075635";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidatePermissionsInvalidReadingsReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Invalid Readings_Neptune Customer Service_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14281_PVR_Invalid_Readings_Neptune_Customer_Service_Default_ON()
        {
            testCaseId = "TC-14281";
            qTestUniqueId = "31075636";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidatePermissionsInvalidReadingsReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Invalid Readings Invalid Readings_Utility Admin_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14282_PVR_Invalid_Readings_Utility_Admin_Default_ON()
        {
            testCaseId = "TC-14282";
            qTestUniqueId = "31075637";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidatePermissionsInvalidReadingsReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Invalid Readings Invalid Readings_Utility User_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14283_PVR_Invalid_Readings_Utility_User_Default_ON()
        {
            testCaseId = "TC-14283";
            qTestUniqueId = "31075638";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidatePermissionsInvalidReadingsReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Invalid Readings Invalid Readings_Utility Read Only Access_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14284_PVR_Invalid_Readings_Utility_Read_Only_Access_Default_ON()
        {
            testCaseId = "TC-14284";
            qTestUniqueId = "31075639";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
             //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidatePermissionsInvalidReadingsReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Invalid Readings_Utility Meter Reader_Default OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14285_PVR_Invalid_Readings_Utility_Meter_Reader_Default_OFF()
        {
            testCaseId = "TC-14285";
            qTestUniqueId = "31075640";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidatePermissionsInvalidReadingsReportOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Invalid Readings_Neptune System Admin_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14286_PVR_Invalid_Readings_Neptune_System_Admin_OFF()
        {
            testCaseId = "TC-14286";
            qTestUniqueId = "31078371";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Invalid Readings Report", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidatePermissionsInvalidReadingsReportOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Invalid Readings Report", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Invalid Readings_Neptune Customer Service_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14287_PVR_Invalid_Readings_Neptune_Customer_Service_OFF()
        {
            testCaseId = "TC-14287";
            qTestUniqueId = "31078372";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                rolesPermissons.SetPermission("Neptune Customer Service Rep", new Dictionary<string, bool>() { { "Invalid Readings Report", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidatePermissionsInvalidReadingsReportOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Neptune Customer Service Rep", new Dictionary<string, bool>() { { "Invalid Readings Report", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Invalid Readings_Utility Admin_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14288_PVR_Invalid_Readings_Utility_Admin_OFF()
        {
            testCaseId = "TC-14288";
            qTestUniqueId = "31078373";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                rolesPermissons.SetPermission("Utility Administrator", new Dictionary<string, bool>() { { "Invalid Readings Report", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidatePermissionsInvalidReadingsReportOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Administrator", new Dictionary<string, bool>() { { "Invalid Readings Report", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Invalid Readings_Utility User_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14289_PVR_Invalid_Readings_Utility_User_OFF()
        {
            testCaseId = "TC-14289";
            qTestUniqueId = "31078374";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                rolesPermissons.SetPermission("Utility User", new Dictionary<string, bool>() { { "Invalid Readings Report", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidatePermissionsInvalidReadingsReportOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility User", new Dictionary<string, bool>() { { "Invalid Readings Report", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Invalid Readings_Utility Read Only Access_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14290_PVR_Invalid_Readings_Utility_Read_Only_Access_OFF()
        {
            testCaseId = "TC-14290";
            qTestUniqueId = "31078376";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                rolesPermissons.SetPermission("Utility Read Only Access", new Dictionary<string, bool>() { { "Invalid Readings Report", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidatePermissionsInvalidReadingsReportOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Read Only Access", new Dictionary<string, bool>() { { "Invalid Readings Report", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Invalid Readings_Utility Read Only Access_OFF
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14291_PVR_Invalid_Readings_Utility_Read_Only_Access_OFF()
        {
            testCaseId = "TC-14291";
            qTestUniqueId = "31078377";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidatePermissionsInvalidReadingsReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation_File Mapper _Display
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_15837_RnP_Left_Navigation_File_Mapper_Display()
        {
            testCaseId = "TC-15837";
            qTestUniqueId = "34020535";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateFileMapperLeftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method toFile Mapper Feature_File Mapper_Display
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_15839_RnP_File_Mapper_Feature_File_Mapper_Display()
        {
            testCaseId = "TC-15839";
            qTestUniqueId = "34020643";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);

                rolesPermissons.ValidateFileMapperLeftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method toFile Mapper Feature_File Mapper_Display
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_16046_PRM_Left_Navigation_Handhelds_Left_Navigation()
        {
            testCaseId = "TC-16046";
            qTestUniqueId = "34905464";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateHandheldsLeftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation - Neptune 360 Sync Left Navigation - Neptune 360 Partner - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_16048_PRM_Left_Navigation_Neptune_360_Sync_Left_Navigation_Neptune_360_Partner_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16048";
            qTestUniqueId = "34905466";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360essentialNo();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation - Neptune 360 Sync Left Navigation - Neptune 360 Partner - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16049_PRM_Left_Navigation_Neptune_360_Sync_Left_Navigation_Neptune_360_Partner_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16049";
            qTestUniqueId = "34905467";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360partnerNo();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation - Neptune 360 Sync Left Navigation - Neptune Field Service PM
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16050_PRM_Left_Navigation_Neptune_360_Sync_Left_Navigation_Neptune_Field_Service_PM_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16050";
            qTestUniqueId = "34905469";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneFieldServiceYes();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation - Neptune 360 Sync Neptune Customer Support PM
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16051_PRM_Left_Navigation_Neptune_360_Sync_Left_Navigation_Neptune_Customer_Support_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16051";
            qTestUniqueId = "34905470";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCustomerSupportYes();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation - Neptune 360 Sync Neptune Neptune Customer Service
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16052_PRM_Left_Navigation_Neptune_360_Sync_Left_Navigation_Neptune_Customer_Service_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16052";
            qTestUniqueId = "34905471";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCustomerServiceYes();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// <summary>
        /// Test Method to Left Navigation - Neptune 360 Sync Left Navigation - Neptune Sys Admin - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16053_PRM_Left_Navigation_Neptune_360_Sync_Left_Navigation_Neptune_Sys_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16053";
            qTestUniqueId = "34905471";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSystemAdmin();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation - Neptune 360 Sync Left Navigation - Utility Admin - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16054_PRM_Left_Navigation_Neptune_360_Sync_Left_Navigation_Utility_Admin_Default()
        {
            testCaseId = "TC-16054";
            qTestUniqueId = "34905473";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneUtilityAdmin();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation - Neptune 360 Sync Left Navigation - Utility Admin Beta - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16055_PRM_Left_Navigation_Neptune_360_Sync_Left_Navigation_Utility_Admin_Beta_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16055";
            qTestUniqueId = "34905474";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneUtilityAdminBeta();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation - Neptune 360 Sync Left Navigation - Utility Read Only  - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16056_PRM_Left_Navigation_Neptune_360_Sync_Left_Navigation_Utility_Read_Only_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16056";
            qTestUniqueId = "34905475";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneUtilityReadOnly();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation - Neptune 360 Sync Left Navigation - Utility Meter Reader Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16057_PRM_Left_Navigation_Neptune_360_Sync_Left_Navigation_Utility_Meter_Reader_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16057";
            qTestUniqueId = "34905476";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminHandheldManagementYes();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation - Neptune 360 Sync Left Navigation - Utility User Reader Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16058_PRM_Left_Navigation_Neptune_360_Sync_Left_Navigation_Utility_User_Reader_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16058";
            qTestUniqueId = "34905477";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneUtilityUserReader();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Handheld Management - Enabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_16059_PRM_Handheld_Management_Enabled()
        {
            testCaseId = "TC-16059";
            qTestUniqueId = "34905478";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateHandheldManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// <summary>
        /// Test Method to Validate Handheld Management - Enabled - Click
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_16060_PRM_Handheld_Management_Enabled_Click()
        {
            testCaseId = "TC-16060";
            qTestUniqueId = "34905479";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");

                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateHandheldManagementClick();
                home.UserLogOut();
               
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Handheld Management Left Navigation - Neptune Customer Service - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16061_PRM_Handheld_Management_Left_Navigation_Neptune_Customer_Service_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16061";
            qTestUniqueId = "34905480";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateHandheldManagementDefaultYes();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Handheld Management -Handheld Settings - Enabled
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_16062_PRM_Handheld_Management_Handheld_Settings_Enabled()
        {
            testCaseId = "TC-16062";
            qTestUniqueId = "34905481";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateHandheldSettingEnabled();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Handheld Management Disabled
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_16063_PRM_Handheld_Handheld_Management_Disabled()
        {
            testCaseId = "TC-16063";
            qTestUniqueId = "34905482";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Handheld Management Left Navigation", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateHandheldSettingDisabled();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Handheld Management Left Navigation", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Handheld Management -Handheld Settings - Disabled
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_16064_PRM_Handheld_Management_Handheld_Settings_Disabled()
        {
            testCaseId = "TC-16064";
            qTestUniqueId = "34905483";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Handheld Management Left Navigation", true }, { "Handhelds Left Navigation", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateHandheldSettingDisabled();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Handheld Management Left Navigation", true }, { "Handhelds Left Navigation", true } });
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Handheld Management Left Navigation - Neptune Sys Admin - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16065_PRM_Handheld_Management_Left_Navigation_Neptune_Sys_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16065";
            qTestUniqueId = "34905484";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminHandheldManagementYes();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Handheld Management - Handhelds - Enabled
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_16066_PRM_Handheld_Management_Handhelds_Enabled()
        {
            testCaseId = "TC-16066";
            qTestUniqueId = "34905485";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateHandheldsEnabled();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Handheld Management - Handhelds - disabled
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_16067_PRM_Handheld_Management_Handhelds_Disabled()
        {
            testCaseId = "TC-16067";
            qTestUniqueId = "34905487";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Handheld Management Left Navigation", true }, { "Handhelds Left Navigation", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateHandheldsDisabled();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Handheld Management Left Navigation", true }, { "Handhelds Left Navigation", true } });

                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Handheld Management Left Navigation - Neptune 360 Partner - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16068_PRM_Handheld_Management_Left_Navigation_Neptune_360_Partner_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16068";
            qTestUniqueId = "34905488";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerHandheldManagementNo();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Handheld Management Left Navigation - Neptune 360 Essentials - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16069_PRM_Handheld_Management_Left_Navigation_Neptune_360_Essentials_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16069";
            qTestUniqueId = "34905489";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360EssentialsHandheldManagementYes();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Handheld Management Left Navigation - Neptune Customer Support - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16070_PRM_Handheld_Management_Left_Navigation_Neptune_Customer_Support_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16070";
            qTestUniqueId = "34905490";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateCustSupportHandheldManagementYes();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Handheld Management - Handhelds - Enabled - Click
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_16071_PRM_Handheld_Management_Handhelds_Enabled_Click()
        {
            testCaseId = "TC-16071";
            qTestUniqueId = "34905491";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateHandheldsPage();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Handheld Management -Neptune 360 Sync - Disabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]

        [Test]
        public void TC_16072_PRM_Handheld_Management_Neptune360_Sync_Disabled()
        {
            testCaseId = "TC-16072";
            qTestUniqueId = "34905492";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Handheld Management Left Navigation", true }, { "Neptune 360 Sync Left Navigation", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptune360SyncDisabled();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Handheld Management Left Navigation", true }, { "Neptune 360 Sync Left Navigation", true } });
                home.UserLogOut();

                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Handheld Management Left Navigation", true }, { "Neptune 360 Sync Left Navigation", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Left Navigation - Handheld Settings Left Navigation - Utility Admin - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16073_PRM_Left_Navigation_Handheld_Settings_Left_Navigation_Utility_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16073";
            qTestUniqueId = "34905493";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminHandheldLftNavNo();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Handheld Management -Neptune 360 Sync - Enabled
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_16074_PRM_Handheld_Management_Neptune360_Sync_Enabled()
        {
            testCaseId = "TC-16074";
            qTestUniqueId = "34905494";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Handheld Management Left Navigation", true }, { "Neptune 360 Sync Left Navigation", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptune360SyncNoIcon();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Handheld Management Left Navigation", true }, { "Neptune 360 Sync Left Navigation", true } });
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate  Handheld Management Left Navigation - Utility Admin - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16075_PRM_Handheld_Management_Left_Navigation_Utility_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16075";
            qTestUniqueId = "34905495";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminHandheldLftNavYes();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Left Navigation - Neptune 360 Sync Left Navigation
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_16076_PRM_Left_Navigation_Neptune_360_Sync_Left_Navigation()
        {
            testCaseId = "TC-16076";
            qTestUniqueId = "34905496";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptune360LeftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handheld Settings Left Navigation - Neptune Customer Service - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16077_PRM_Handheld_Settings_Left_Navigation_Neptune_Customer_Service_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16077";
            qTestUniqueId = "34905497";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCustServsHandheldSettingYes();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handheld Management Left Navigation - Neptune Field Service PM - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16078_PRM_Handheld_Management_Left_Navigation_Neptune_Field_Service_PM_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16078";
            qTestUniqueId = "34905498";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneFieldServiceHandheldManagementYes();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handheld Management -Handheld Settings - Enabled - Click
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]

        [Test]
        public void TC_16079_PRM_Handheld_Management_Handheld_Settings_Enabled_Click()
        {
            testCaseId = "TC-16079";
            qTestUniqueId = "34905499";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateHandheldManagementHandheldSetting();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handheld Settings Left Navigation - Neptune Customer Support - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16080_PRM_Handheld_Settings_Left_Navigation_Neptune_Customer_Support_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16080";
            qTestUniqueId = "34905500";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCustSupportHandheldManagementYes();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handheld Management -Neptune 360 Sync - Enabled - Click
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]

        [Test]
        public void TC_16081_PRM_Handheld_Management_Neptune360_Sync_Enabled_Click()
        {
            testCaseId = "TC-16081";
            qTestUniqueId = "34905501";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateHandheldManagementNeptune360SyncEnabled();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handheld Management Left Navigation - Utility Admin Beta - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16082_PRM_Handheld_Management_Left_Navigation_Utility_Admin_Beta_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16082";
            qTestUniqueId = "34905502";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneUtilityAdminBetaHandheldManagementYes();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation - Handheld Management Left Navigation
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16083_PRM_Left_Navigation_Handheld_Management_Left_Navigation_ON_Permission_On_Off()
        {
            testCaseId = "TC-16083";
            qTestUniqueId = "34905503";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneUtilityAdminBetaHandheldManagementYes();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handheld Settings Left Navigation - Utility Read Only - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16084_PRM_Handheld_Settings_Left_Navigation_Utility_Read_Only_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16084";
            qTestUniqueId = "34905504";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateHandheldSettingsLeftNavigationUtilityReadOnlyNo();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handheld Settings Left Navigation - Neptune 360 Essentials - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16085_PRM_Handheld_Settings_Left_Navigation_Neptune360_Essentials_Default()
        {
            testCaseId = "TC-16085";
            qTestUniqueId = "34905505";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360HandheldSetting();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation - Handhelds Left Navigation - Utility Meter Reader - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16086_PRM_Left_Navigation_Handhelds_Left_Navigation_Utility_Meter_Reader_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16086";
            qTestUniqueId = "34905506";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderHandheld();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handheld Management Left Navigation - Utility User - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16087_PRM_Handheld_Management_Left_Navigation_Utility_User_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16087";
            qTestUniqueId = "34905507";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserHandheldManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handhelds Left Navigation - Neptune Customer Service - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16088_PRM_Handhelds_Left_Navigation_Neptune_Customer_Service_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16088";
            qTestUniqueId = "34905508";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCustSeviceHandheldLft();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handheld Management Left Navigation - Utility Read Only - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16089_PRM_Left_Navigation_Handheld_Management_Left_Navigation_Utility_Read_Only_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16089";
            qTestUniqueId = "34905509";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyHandheldLft();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation - Handheld Settings Left Navigation - Neptune Sys Admin - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16090_PRM_Left_Navigation_Handheld_Settings_Left_Navigation_Neptune_Sys_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16090";
            qTestUniqueId = "34905510";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateSysAdminHandheldSettings();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handhelds Left Navigation - Utility Read Only - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16091_PRM_Handhelds_Left_Navigation_Utility_Read_Only_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16091";
            qTestUniqueId = "34905511";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyHandheldLft();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handhelds Left Navigation - Utility User Only - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16092_PRM_Handhelds_Left_Navigation_Utility_User_Only_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16092";
            qTestUniqueId = "34905512";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserHandheldLft();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handhelds Left Navigation - Neptune 360 Partner - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16093_PRM_Handhelds_Left_Navigation_Neptune_360_Partner_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16093";
            qTestUniqueId = "34905513";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerHandheldLft();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handhelds Left Navigation - Neptune Field Service PM - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16094_PRM_Handhelds_Left_Navigation_Neptune_Field_Service_PM_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16094";
            qTestUniqueId = "34905514";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneFeildServicePMHandheldLft();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handheld Settings Left Navigation - Utility Admin Beta - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_16095_PRM_Handheld_Settings_Left_Navigation_Utility_Admin_Beta_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16095";
            qTestUniqueId = "34905515";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminBetaHandheldSettings();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handheld Settings Left Navigation - Neptune Field Service PM - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16096_PRM_Handheld_Settings_Left_Navigation_Neptune_Field_Service_PM_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16096";
            qTestUniqueId = "34905516";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneFeildServicePMHandheldSettings();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handheld Management Left Navigation - Utility Meter Reader - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16097_PRM_Handheld_Management_Left_Navigation_Utility_Meter_Reader_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16097";
            qTestUniqueId = "34905517";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderHandheldManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handhelds Left Navigation - Neptune 360 Essentials - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16098_PRM_Handhelds_Left_Navigation_Neptune360_Essentials_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16098";
            qTestUniqueId = "34905519";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360EssentialHandheldLft();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation - Handhelds Left Navigation - Utility Admin - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16099_PRM_Left_Navigation_Handhelds_Left_Navigation_Utility_Admin_Default()
        {
            testCaseId = "TC-16099";
            qTestUniqueId = "34905520";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminHandheldLft();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation - Handhelds Left Navigation - Utility Admin Beta - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16100_PRM_Left_Navigation_Handhelds_Left_Navigation_Utility_Admin_Beta_Default()
        {
            testCaseId = "TC-16100";
            qTestUniqueId = "34905521";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminBetaHandheldLft();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handheld Settings Left Navigation - Neptune 360 Partner - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16101_PRM_Handheld_Settings_Left_Navigation_Neptune360_Partner_Default()
        {
            testCaseId = "TC-16101";
            qTestUniqueId = "34905522";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerHandheldsSetting();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handhelds Left Navigation - Neptune Customer Support - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16102_PRM_Handhelds_Left_Navigation_Neptune_Customer_Support_Default()
        {
            testCaseId = "TC-16102";
            qTestUniqueId = "34905523";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCustSupportHandheldsLft();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handhelds Left Navigation - Neptune Sys Admin - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16103_PRM_Handhelds_Left_Navigation_Neptune_Sys_Admin_Default()
        {
            testCaseId = "TC-16103";
            qTestUniqueId = "34905524";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminHandheldsLft();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Handheld Settings Left Navigation - Utility Meter Reader - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_16104_PRM_Handheld_Settings_Left_Navigation_Utility_Meter_Reader_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16104";
            qTestUniqueId = "34905525";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderHandheldsSettings();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation - Handheld Settings Left Navigation
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_16105_PRM_Left_Navigation_Handheld_Settings_Left_Navigation()
        {
            testCaseId = "TC-16105";
            qTestUniqueId = "34905526";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateHandheldsSettingsLeftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune 360 Sync Left Navigation
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_17088_RnP_Neptune_360Sync_Left_Navigation()
        {
            testCaseId = "TC-17088";
            qTestUniqueId = "36719274";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptune360LeftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to View Neptune 360 Sync Screen Permission
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_17089_RnP_View_Neptune360_Sync_Screen_Permission()
        {
            testCaseId = "TC-17089";
            qTestUniqueId = "36719275";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptune360SyncSreen();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune 360 Sync Permission Block
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_17092_RnP_Neptune360_Sync_Permission_Block()
        {
            testCaseId = "TC-17092";
            qTestUniqueId = "36719278";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptune360SyncBlock();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Permissions_Days of No Flow (AMR)_Display
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_17308_RMP_Days_of_No_Flow_AMR_Display()
        {
            testCaseId = "TC-17308";
            qTestUniqueId = "37404837";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDaysOfNoFlow();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Report_Days of No Flow (AMR)_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_17309_RMP_Report_Days_of_No_Flow_AMR_OFF()
        {
            testCaseId = "TC-17309";
            qTestUniqueId = "37404839";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                rolesPermissons.SetPermission("Utility User", new Dictionary<string, bool>() { { "Reports Landing Page Access", true }, { "Days of No Flow (AMR)", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDaysOfNoFlowOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility User", new Dictionary<string, bool>() { { "Reports Landing Page Access", true }, { "Days of No Flow (AMR)", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Report_Days of No Flow (AMR)_ON
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_17310_PVR_Days_of_No_Flow_AMR_ON()
        {
            testCaseId = "TC-17310";
            qTestUniqueId = "37404843";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDaysOfNoFlow();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Report_Days of Consumption  (AMR)_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_17311_PVR_Report_Days_of_Consumption_AMR_OFF()
        {
            testCaseId = "TC-17311";
            qTestUniqueId = "37404844";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                rolesPermissons.SetPermission("Utility User", new Dictionary<string, bool>() { { "Reports Landing Page Access", true }, { "Days of Consumption (AMR)", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDaysOfonsumptionOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility User", new Dictionary<string, bool>() { { "Reports Landing Page Access", true }, { "Days of Consumption (AMR)", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Report_Days of Consumption  (AMR)_On
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_17312_PVR_Report_Days_of_Consumption_AMR_On()
        {
            testCaseId = "TC-17312";
            qTestUniqueId = "37404849";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDaysOfonsumptionON();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Permissions_Days of Consumption (AMR)_Display
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_17313_PVR_Permissions_Days_of_Consumption_AMR_Display()
        {
            testCaseId = "TC-17313";
            qTestUniqueId = "37404849";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDaysOfonsumptionON();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Advanced RF Test_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_15784_PVM_Advanced_RF_Test_Neptune360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15784";
            qTestUniqueId = "34541395";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptunePartnerAdvancedRFTest();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Mobile MMR_MIU Logging_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_15785_PVM_Mobile_MMR_MIU_Logging_Neptune360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15785";
            qTestUniqueId = "34541396";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneFieldServiceMobileMMRMIULogging();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Pressure_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_15786_PVM_Pressure_Neptune360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15786";
            qTestUniqueId = "34541397";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptunePartnerPressure();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Meter Reading_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]


        [Test]
        public void TC_15787_PVM_Meter_Reading_Neptune360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15787";
            qTestUniqueId = "34541398";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptunePartnerMeterReading();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// <summary>
        /// Test Method to Sync Unassigned Routes_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15788_PVM_Sync_Unassigned_Routes_Neptune360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15788";
            qTestUniqueId = "34541399";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptunePartnerSyncUnassignedRoutes();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to List of Roles - Displays within the border
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_7387_List_of_Roles_Displays_within_the_border()
        {
            testCaseId = "TC-7387";
            qTestUniqueId = "19730133";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateListOfRoles();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune Admin_Question Icon Top Navigation 
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_5613_Neptune_Admin_Question_Icon_Top_Navigation()
        {
            testCaseId = "TC-5613";
            qTestUniqueId = "19482617";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateQuestionMark();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune Admin_Create Utility 
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_5628_RnP_Neptune_Admin_Create_Utility()
        {
            testCaseId = "TC-5628";
            qTestUniqueId = "19482632";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCreateUtilityDialog();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// <summary>
        /// Test Method to Neptune CSR_Notifications Left Navigation 
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_5696_RnP_Neptune_CSR_Notifications_Left_Navigation()
        {
            testCaseId = "TC-5696";
            qTestUniqueId = "19482701";
            startDate = DateTime.Now; try
            {   
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("nkumar@neptunetg.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "nkumar@neptunetg.com", "Automation#123", false);
                rolesPermissons.ValidateCSRNotificationLeftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Read Only_Create Notification
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_6056_RnP_Utility_Read_Only_Create_Notification()
        {
            testCaseId = "TC-6056";
            qTestUniqueId = "19483061";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUtilityReadOnlyCreateNotificationNo();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Read Only_View Notification 
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_6058_RnP_Utility_Read_Only_View_Notification()
        {
            testCaseId = "TC-6058";
            qTestUniqueId = "19483063";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCSRNotificationLeftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Admin_Notifications Left Navigation 
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_5790_RnP_Utility_Admin_Notifications_Left_Navigation()
        {
            testCaseId = "TC-5790";
            qTestUniqueId = "19482795";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("lveldi@neptunetg.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "lveldi@neptunetg.com", "Lucky@7290", false);
                rolesPermissons.ValidateUtilityAdminNotificationLeftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Admin_Question Icon Top Navigation 
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_5801_RnP_Utility_Admin_Question_Icon_Top_Navigation()
        {
            testCaseId = "TC-5801";
            qTestUniqueId = "19482806";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateQuestionMark();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Admin_Send Password Reset
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_5809_RnP_Utility_Admin_Send_Password_Reset()
        {
            testCaseId = "TC-5809";
            qTestUniqueId = "19482814";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateSendPasswordReset();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Admin_Export Settings
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_5865_RnP_Utility_Admin_Export_Settings()
        {
            testCaseId = "TC-5865";
            qTestUniqueId = "19482870";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("lveldi@neptunetg.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "lveldi@neptunetg.com", "Lucky@7290", false);
                rolesPermissons.ValidateExportSettings();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Admin_Create Notification
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_5868_RnP_Utility_Admin_Create_Notification()
        {
            testCaseId = "TC-5868";
            qTestUniqueId = "19482873";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUtilityReadOnlyCreateNotificationNo();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility User_Question Icon Top Navigation
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_5895_RnP_Utility_User_Question_Icon_Top_Navigation()
        {
            testCaseId = "TC-5895";
            qTestUniqueId = "19482900";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateQuestionMark();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility User_Create Notification
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_5962_RnP_Utility_User_Create_Notification()
        {
            testCaseId = "TC-5962";
            qTestUniqueId = "19482967";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUtilityReadOnlyCreateNotificationNo();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Read Only_Question Icon Top Navigation
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_5989_RnP_Utility_Read_Only_Question_Icon_Top_Navigation()
        {
            testCaseId = "TC-5989";
            qTestUniqueId = "19482994";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateQuestionMark();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility User_Notifications Left Navigation 
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_5884_RnP_Utility_User_Notifications_Left_Navigation()
        {
            testCaseId = "TC-5884";
            qTestUniqueId = "19482889";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);

                rolesPermissons.ValidateCSRNotificationLeftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune Customer Service Rep -  Alert Notifications - No - Profile Menu - Displayed 
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_13267_RnP_Neptune_Customer_Service_Rep_Alert_Notifications_No_Profile_Menu_Displayed()
        {
            testCaseId = "TC-13267";
            qTestUniqueId = "28873603";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateTopAlertNotificationNoView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune Customer Service Rep -  Alert Notifications - No - View Alert Notifications
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]

        [Test]
        public void TC_13268_RnP_Neptune_Customer_Service_Rep_Alert_Notifications_No_View_Alert_Notifications()
        {
            testCaseId = "TC-13268";
            qTestUniqueId = "28873604";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateTopAlertNotificationNoView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune Customer Service Rep -  Alert Notifications - No - Edit Alert Notifications
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]

        [Test]
        public void TC_13269_RnP_Neptune_Customer_Service_Rep_Alert_Notifications_No_Edit_Alert_Notifications()
        {
            testCaseId = "TC-13269";
            qTestUniqueId = "28873604";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateTopAlertNotificationNoEdit();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Utility Management - Alert Configuration - Events Section
        /// </summary>
        //[Category("RolesAndPermissions")]
        //[Category("SmokeTests_AlertNotifications")]
        [Category("AlertNotifications_Rework")]

        [Test]
        public void TC_13249_Left_Navigation_Utility_Management_Alert_Configuration_Events_Section()
        {
            testCaseId = "TC-13249";
            qTestUniqueId = "28873563";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEventHeader();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// <summary>
        /// Test Method to Neptune CSR -  Left Navigation - Alert Configuration - No - Alert Configuration Menu Item
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_13270_RnP_Neptune_CSR_Left_Navigation_Alert_Configuration_No_Alert_Configuration_Menu_Item()
        {
            testCaseId = "TC-13270";
            qTestUniqueId = "28873606";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfigurationNotExist();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune CSR Left Navigation - Alert Configuration - No - View Alert Configurations
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]


        [Test]
        public void TC_13271_RnP_Neptune_CSR_Left_Navigation_Alert_Configuration_No_View_Alert_Configurations()
        {
            testCaseId = "TC-13271";
            qTestUniqueId = "28873607";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfigurationNoView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune Customer Service Rep -  Left Navigation - Alert Configuration - No - Edit Alert Configurations
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]


        [Test]
        public void TC_13272_RnP_Neptune_CSR_Left_Navigation_Alert_Configuration_No_Edit_Alert_Configurations()
        {
            testCaseId = "TC-13272";
            qTestUniqueId = "28873608";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfigurationNoEdit();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune Field Service PM -  Alert Notifications - No - Profile Menu - Displayed 
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_13279_RnP_Neptune_Field_Service_PM_Alert_Notifications_No_Profile_Menu_Displayed()
        {
            testCaseId = "TC-13279";
            qTestUniqueId = "28873615";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertTopNavigationNoView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune Field Service PM -  Alert Notifications - No - View Alert Notifications
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_13280_RnP_Neptune_Field_Service_PM_Alert_Notifications_No_View_Alert_Notifications()
        {
            testCaseId = "TC-13280";
            qTestUniqueId = "28873616";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertTopNavigationNoView();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune Field Service PM -  Alert Notifications - No - Edit Alert Notifications
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]

        [Test]
        public void TC_13281_RnP_Neptune_Field_Service_PM_Alert_Notifications_No_Edit_Alert_Notifications()
        {
            testCaseId = "TC-13281";
            qTestUniqueId = "28873617";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateTopAlertNotificationNoEdit();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune Field Service PM -  Left Navigation - Alert Configuration - No - Alert Configuration Menu Item
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_13282_RnP_Neptune_Field_Service_PM_Left_Navigation_Alert_Configuration_No_Alert_Configuration_Menu_Item()
        {
            testCaseId = "TC-13282";
            qTestUniqueId = "28873618";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfigurationNotExist();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune Field Service PM -  Left Navigation - Alert Configuration - No - Edit Alert Configurations
        /// </summary>
        [Category("RolesAndPermissions_AlertNotifications")]


        [Test]
        public void TC_13284_RnP_Neptune_Field_Service_PM_Left_Navigation_Alert_Configuration_No_Edit_Alert_Configurations()
        {
            testCaseId = "TC-13284";
            qTestUniqueId = "28873620";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAlertConfigurationNoEdit();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Permissions_Validation_Left Navigation_Partner Management_Display
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15484_Permissions_Validation_Left_Navigation_Partner_Management_Display_ON_Permission_On_Off()
        {
            testCaseId = "TC-15484";
            qTestUniqueId = "34100851";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePartnerManagementLeftNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Permissions_Validation_Partner Management_Feature Group_Display
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_15485_Permissions_Validation_Partner_Management_Feature_Group_Display()
        {
            testCaseId = "TC-15485";
            qTestUniqueId = "34100852";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidatePartnerManagementFeatureGroup();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Permissions_Validation_Partner Management_View Partner Management_Display
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_15486_Permissions_Validation_Partner_Management_View_Partner_Management_Display()
        {
            testCaseId = "TC-15486";
            qTestUniqueId = "34100853";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateViewPartnerManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Permissions_Validation_Partner Management_Create Partner
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_15487_Permissions_Validation_Partner_Management_Create_Partner()
        {
            testCaseId = "TC-15487";
            qTestUniqueId = "34100854";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCreatePartner();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Permissions_Validation_Partner Management_EDit Partner
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_15488_Permissions_Validation_Partner_Management_Edit_Partner()
        {
            testCaseId = "TC-15488";
            qTestUniqueId = "34100855";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateEditPartner();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Landing Page_Reports_Neptune System Admin_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14844_PVR_Landing_Page_Reports_Neptune_System_Admin_Default_ON()
        {
            testCaseId = "TC-14844";
            qTestUniqueId = "32413134";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateReportsWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Landing Page_Reports_Neptune System Admin_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14845_PVR_Landing_Page_Reports_Neptune_System_Admin_OFF()
        {
            testCaseId = "TC-14845";
            qTestUniqueId = "32413139";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //     home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Reports Widget", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLftNavReportsWidgetOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Reports Widget", true }});
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Landing Page_Reports_Neptune CSR_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14846_PVR_Landing_Page_Reports_Neptune_CSR_Default_ON()
        {
            testCaseId = "TC-14846";
            qTestUniqueId = "32413208";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateReportsWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Landing Page_Reports_Utility Admin_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14847_PVR_Landing_Page_Reports_Utility_Admin_Default_ON()
        {
            testCaseId = "TC-14847";
            qTestUniqueId = "32413209";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateReportsWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Landing Page_Reports_Utility User_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14848_PVR_Landing_Page_Reports_Utility_User_Default_ON()
        {
            testCaseId = "TC-14848";
            qTestUniqueId = "32413211";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateReportsWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Landing Page Reports_Utility Read Only Access_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]


        [Test]
        public void TC_14849_PVR_Landing_Page_Reports_Utility_Read_Only_Access_Default_ON()
        {
            testCaseId = "TC-14849";
            qTestUniqueId = "32413212";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateReportsWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
                                                               catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Landing Page_Reports_Utility Meter Reader_Default OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14854_PV_Landing_Page_Reports_Utility_Meter_Reader_Default_OFF()
        {
            testCaseId = "TC-14854";
            qTestUniqueId = "32413329";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                rolesPermissons.SetPermission("Utility Meter Reader", new Dictionary<string, bool>() { { "Reports Widget", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLandingPageReportsWidgetNotExist();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Meter Reader", new Dictionary<string, bool>() { { "Reports Widget", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Landing Page_Reports_Neptune CSR_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14855_PV_Landing_Page_Reports_Neptune_CSR_OFF()
        {
            testCaseId = "TC-14855";
            qTestUniqueId = "32413334";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                rolesPermissons.SetPermission("Neptune Customer Service Rep", new Dictionary<string, bool>() { { "Reports Widget", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLandingPageReportsWidgetNotExist();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Neptune Customer Service Rep", new Dictionary<string, bool>() { { "Reports Widget", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Landing Page_Reports_Utility User_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14856_PV_Landing_Page_Reports_Utility_User_OFF()
        {
            testCaseId = "TC-14856";
            qTestUniqueId = "32413336";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                rolesPermissons.SetPermission("Utility User", new Dictionary<string, bool>() { { "Reports Widget", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLandingPageReportsWidgetNotExist();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility User", new Dictionary<string, bool>() { { "Reports Widget", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Landing Page_Reports_Utility Admin_OFF
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14857_PV_Landing_Page_Reports_Utility_Admin_OFF()
        {
            testCaseId = "TC-14857";
            qTestUniqueId = "32413338";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Reports Widget", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLandingPageReportsWidgetNotExist();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Reports Widget", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Landing Page_Reports_Utility Read Only Access_OFF
        /// </summary>
        [Category("RolesAndPermissions")]
       
        [Test]
        public void TC_14858_PV_Landing_Page_Reports_Utility_Read_Only_Access_OFF()
        {
            testCaseId = "TC-14858";
            qTestUniqueId = "32413339";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                rolesPermissons.SetPermission("Utility Read Only Access", new Dictionary<string, bool>() { { "Reports Widget", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLandingPageReportsWidgetNotExist();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Read Only Access", new Dictionary<string, bool>() { { "Reports Widget", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Landing Page_Reports_Utility Meter Reader_ON
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14859_PV_Landing_Page_Reports_Utility_Meter_Reader_ON()
        {
            testCaseId = "TC-14859";
            qTestUniqueId = "32413340";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLandingPageReportsWidgetOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation_Reports_Neptune CSR_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14860_PV_Left_Navigation_Reports_Neptune_CSR_Default_ON()
        {
            testCaseId = "TC-14860";
            qTestUniqueId = "32413348";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLftNavReportsWidgetOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation_Reports_Utility Admin_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14861_PV_Left_Navigation_Reports_Utility_Admin_Default_ON()
        {
            testCaseId = "TC-14861";
            qTestUniqueId = "32413349";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLftNavReportsWidgetOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation_Reports_Utility User_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]
       
        [Test]
        public void TC_14862_PV_Left_Navigation_Reports_Utility_User_Default_ON()
        {
            testCaseId = "TC-14862";
            qTestUniqueId = "32413350";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLftNavReportsWidgetOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation_Reports_Utility Read Only Access_Default Off
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_14863_PV_Left_Navigation_Reports_Utility_Read_Only_Access_Default_Off()
        {
            testCaseId = "TC-14863";
            qTestUniqueId = "32413351";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                rolesPermissons.SetPermission("Utility Read Only Access", new Dictionary<string, bool>() { { "Reports Left Navigation", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLftNavReportsWidgetOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Read Only Access", new Dictionary<string, bool>() { { "Reports Left Navigation", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// <summary>
        /// Test Method to Left Navigation_Reports_Utility Meter Reader_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_14864_PV_Left_Navigation_Reports_Utility_Meter_Reader_Default_ON()
        {
            testCaseId = "TC-14864";
            qTestUniqueId = "32413352";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLftNavReportsWidgetOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation_Reports_Neptune CSR_OFF
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_14865_PV_Left_Navigation_Reports_Neptune_CSR_OFF()
        {
            testCaseId = "TC-14865";
            qTestUniqueId = "32413353";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                rolesPermissons.SetPermission("Utility User", new Dictionary<string, bool>() { { "Reports Left Navigation", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLftNavReportsWidgetOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility User", new Dictionary<string, bool>() { { "Reports Left Navigation", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation_Reports_Utility Admin_OFF
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_14866_PV_Left_Navigation_Reports_Utility_Admin_OFF()
        {
            testCaseId = "TC-14866";
            qTestUniqueId = "32413354";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                rolesPermissons.SetPermission("Utility Administrator", new Dictionary<string, bool>() { { "Reports Left Navigation", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLftNavReportsWidgetOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Administrator", new Dictionary<string, bool>() { { "Reports Left Navigation", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation_Reports_Utility User_OFF
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_14867_PV_Left_Navigation_Reports_Utility_User_OFF()
        {
            testCaseId = "TC-14867";
            qTestUniqueId = "32413355";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                rolesPermissons.SetPermission("Utility User", new Dictionary<string, bool>() { { "Reports Left Navigation", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLftNavReportsWidgetOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility User", new Dictionary<string, bool>() { { "Reports Left Navigation", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation_Utility Read Only Access_On
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14868_PV_Left_Navigation_Utility_Read_Only_Access_On()
        {
            testCaseId = "TC-14868";
            qTestUniqueId = "32413356";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateLftNavReportsWidgetOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation_Reports_Utility Meter Reader_Off
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_14869_PV_Left_Navigation_Reports_Utility_Meter_Reader_Off()
        {
            testCaseId = "TC-14869";
            qTestUniqueId = "32413357";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                rolesPermissons.SetPermission("Utility Meter Reader", new Dictionary<string, bool>() { { "Reports Left Navigation", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLftNavReportsWidgetOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Meter Reader", new Dictionary<string, bool>() { { "Reports Left Navigation", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Roles and Permissions_Reports Left Navigation_Display
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14870_PV_Reports_Left_Navigation_Display()
        {
            testCaseId = "TC-14870";
            qTestUniqueId = "32413358";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLftNavReportsWidgetOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Left Navigation_Reports_Neptune System Admin_Default ON
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_14872_PV_Left_Navigation_Reports_Neptune_System_Admin_Default_ON()
        {
            testCaseId = "TC-14872";
            qTestUniqueId = "32413360";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLftNavReportsWidgetOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Left Navigation_Reports_Neptune System Admin _OFF
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_14873_PV_Left_Navigation_Reports_Neptune_System_Admin_Off()
        {
            testCaseId = "TC-14873";
            qTestUniqueId = "32413361";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Reports Left Navigation", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLftNavReportsWidgetOff();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Neptune System Administrator", new Dictionary<string, bool>() { { "Reports Left Navigation", true }});
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Left Navigation_File Mapper_Neptune Admin_Default ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15391_PV_Left_Navigation_File_Mapper_Neptune_Admin_Default_On_ON_Permission_On_Off()
        {
            testCaseId = "TC-15391";
            qTestUniqueId = "34020757";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneAdminFileMapperFeatureOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Left Navigation_File Mapper_Neptune Customer Support_Default ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15392_PV_Left_Navigation_File_Mapper_Neptune_Customer_Support_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-15392";
            qTestUniqueId = "34020796";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateCustomerSupportFileMapperOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// <summary>
        /// Test Method to Validate Left Navigation_File Mapper_Utility Admin_Default OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15393_PV_Left_Navigation_File_Mapper_Utility_Admin_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15393";
            qTestUniqueId = "34020797";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminFileMapperOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Left Navigation_File Mapper_Utility User Default OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15394_PV_Left_Navigation_File_Mapper_Utility_User_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15394";
            qTestUniqueId = "34020798";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserFileMapperOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Left Navigation_File Mapper_Utility Meter Reader_Default OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15395_PV_Left_Navigation_File_Mapper_Utility_Meter_Reader_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15395";
            qTestUniqueId = "34020802";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderFileMapperOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Left Navigation_File Mapper_Utility Read Only_Default OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15396_PV_Left_Navigation_File_Mapper_Utility_Read_Only_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15396";
            qTestUniqueId = "34020803";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyFileMapperOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Left Navigation_File Mapper Neptune Admin_Default ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15397_PV_Left_Navigation_File_Mapper_Neptune_Admin_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-15397";
            qTestUniqueId = "34020936";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneAdminFileMapperFeatureOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Left Navigation_File Mapper Neptune Customer Support_Default ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15398_PV_Left_Navigation_File_Mapper_Neptune_Customer_Support_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-15398";
            qTestUniqueId = "34020940";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCustSupportFileMapperOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Left Navigation_File Mapper Neptune Utility Admin_Default OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15399_PV_Left_Navigation_File_Mapper_Neptune_Utility_Admin_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15399";
            qTestUniqueId = "34020941";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminFileMapperOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Left Navigation_File Mapper Utility User_Default OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15400_PV_Left_Navigation_File_Mapper_Utility_User_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15400";
            qTestUniqueId = "34020942";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtillityUserFileMapperOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Left Navigation_File Mapper Utility Meter Reader_Default OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15401_PV_Left_Navigation_File_Mapper_Utility_Meter_Reader_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15401";
            qTestUniqueId = "34020943";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtillityMeterReaderFileMapperOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Left Navigation_File Mapper Utility Read Only_Default OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15402_PV_Left_Navigation_File_Mapper_Utility_Read_Only_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15402";
            qTestUniqueId = "34020944";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtillityReadOnlyFileMapperOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Left Navigation_File Mapper Neptune CSR_Default OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15429_PV_Left_Navigation_File_Mapper_Neptune_CSR_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15429";
            qTestUniqueId = "34048231";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRFileMapperOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate File Mapper Feature_File Mapper_Neptune CSR_Default OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15430_PV_File_Mapper_Feature_File_Mapper_Neptune_CSR_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15430";
            qTestUniqueId = "34048528";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRFileMapperOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate File Mapper Feature_Enabled_Neptune Admin
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15433_PV_File_Mapper_Feature_Enabled_Neptune_Admin_ON_Permission_On_Off()
        {
            testCaseId = "TC-15433";
            qTestUniqueId = "34049197";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneAdminFileMapperFeatureOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate File Mapper Feature_Enabled_Neptune Customer Support
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15434_PV_File_Mapper_Feature_Enabled_Neptune_Customer_Support_ON_Permission_On_Off()
        {
            testCaseId = "TC-15434";
            qTestUniqueId = "34049217";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCustSupportFileMapperFeatureOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate File Mapper Feature_Disabled_Neptune CSR
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15435_PV_File_Mapper_Feature_Disabled_Neptune_CSR_ON_Permission_On_Off()
        {
            testCaseId = "TC-15435";
            qTestUniqueId = "34049239";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRFileMapperFeatureDisabled();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate File Mapper Feature_Disabled_Utility Admin
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15436_PV_File_Mapper_Feature_Disabled_Utility_Admin_ON_Permission_On_Off()
        {
            testCaseId = "TC-15436";
            qTestUniqueId = "34049248";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminFileMapperFeatureDisabled();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate File Mapper Feature_Disabled_Utility User
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15437_PV_File_Mapper_Feature_Disabled_Utility_User_ON_Permission_On_Off()
        {
            testCaseId = "TC-15437";
            qTestUniqueId = "34049396";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserFileMapperFeatureDisabled();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate File Mapper Feature_Disabled_Utility Meter Reader
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15438_PV_File_Mapper_Feature_Disabled_Utility_Meter_Reader_ON_Permission_On_Off()
        {
            testCaseId = "TC-15438";
            qTestUniqueId = "34049397";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderFileMapperFeatureDisabled();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate File Mapper Feature_Disabled_Utility Read Only
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15439_PV_File_Mapper_Feature_Disabled_Utility_Read_Only_ON_Permission_On_Off()
        {
            testCaseId = "TC-15439";
            qTestUniqueId = "34049464";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyFileMapperFeatureDisabled();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Left Navigation_API Deployment_Display
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_15445_PV_Left_Navigation_API_Deployment_Display()
        {
            testCaseId = "TC-15445";
            qTestUniqueId = "34050991";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAPIDeploymentLeftNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate API Deployment_Feature Group_Display
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_15446_PV_API_Deployment_Feature_Group_Display()
        {
            testCaseId = "TC-15446";
            qTestUniqueId = "34050992";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAPIDeploymentFeatureGroup();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate API Deployment_View API Deployment_Display
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_15447_PV_API_Deployment_View_API_Deployment_Display()
        {
            testCaseId = "TC-15447";
            qTestUniqueId = "34050994";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAPIDeploymentFeatureGroup();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate API Deployment_Create Bundles_Display
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_15448_PV_API_Deployment_Create_Bundles_Display()
        {
            testCaseId = "TC-15448";
            qTestUniqueId = "34050995";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAPIDeploymentCreateBundles();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate API Deployment_Edit Bundles_Display
        /// </summary>
        [Category("RolesAndPermissions")]

        [Test]
        public void TC_15449_PV_API_Deployment_Edit_Bundles_Display()
        {
            testCaseId = "TC-15449";
            qTestUniqueId = "34050996";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateAPIDeploymentEditBundles();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate API Deployment_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15450_PV_API_Deployment_Neptune_System_Admin_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-15450";
            qTestUniqueId = "34051151";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminAPIDeploymentLftOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// <summary>
        /// Test Method to Validate Left Navigation Deployment_Neptune CSR_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15451_PV_Left_Navigation_Deployment_Neptune_CSR_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15451";
            qTestUniqueId = "34051152";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRAPIDeploymentLftOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Left Navigation_API Deployment_Utility Admin_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15452_PV_Left_Navigation_API_Deployment_Utility_Admin_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15452";
            qTestUniqueId = "34051155";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneUtilityAdminAPIDeploymentLftOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// <summary>
        /// Test Method to Validate Left Navigation_API Deployment_Utility User_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15453_PV_Left_Navigation_API_Deployment_Utility_User_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15453";
            qTestUniqueId = "34051189";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneUtilityUserAPIDeploymentLftOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Left Navigation_API Deployment_Utility Read Only_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15454_PV_Left_Navigation_API_Deployment_Utility_ReadOnly_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15454";
            qTestUniqueId = "34051191";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyAPIDeploymentLftOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Left Navigation_API Deployment_Utility Meter Reader_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15455_PV_Left_Navigation_API_Deployment_Utility_Meter_Reader_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15455";
            qTestUniqueId = "34051289";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderAPIDeploymentLftOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate API Deployment_View API Deployment_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15456_PV_API_Deployment_View_API_Deployment_Neptune_System_Admin_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-15456";
            qTestUniqueId = "34051467";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSystemAdminAPIDeploymentOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate API Deployment_View API Deployment_Neptune CSR_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15457_PV_API_Deployment_View_API_Deployment_Neptune_CSR_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15457";
            qTestUniqueId = "34051468";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRAPIDeploymentOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate API Deployment_View API Deployment_Utility Admin_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15458_PV_API_Deployment_View_API_Deployment_Utility_Admin_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15458";
            qTestUniqueId = "34051473";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminAPIDeploymentOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate API Deployment_View API Deployment_Utility User_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15459_PV_API_Deployment_View_API_Deployment_Utility_User_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15459";
            qTestUniqueId = "34051477";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserAPIDeploymentOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate API Deployment_View API Deployment_Utility Read Only_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15460_PV_API_Deployment_View_API_Deployment_Utility_Read_Only_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15460";
            qTestUniqueId = "34051478";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyAPIDeploymentOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to API Deployment_View API Deployment_Utility Meter Reader_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15461_PV_API_Deployment_View_API_Deployment_Utility_Meter_Reader_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15461";
            qTestUniqueId = "34051481";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderAPIDeploymentOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to API Deployment_Create Bundles_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15464_PV_API_Deployment_Create_Bundles_Neptune_System_Admin_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-15464";
            qTestUniqueId = "34051584";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilitySystemAdminCreateBundlesOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to API Deployment_Create Bundles_Neptune CSR_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15465_PV_API_Deployment_Create_Bundles_Neptune_CSR_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15465";
            qTestUniqueId = "34051585";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRCreateBundlesOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to API Deployment_Create Bundles_Utility Admin_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15466_PV_API_Deployment_Create_Bundles_Utility_Admin_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15466";
            qTestUniqueId = "34051586";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminCreateBundlesOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to API Deployment_Create Bundles_Utility User_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15467_PV_API_Deployment_Create_Bundles_Utility_User_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15467";
            qTestUniqueId = "34051587";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserCreateBundlesOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to API Deployment_Create Bundles_Utility Read Only_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15468_PV_API_Deployment_Create_Bundles_Utility_Read_Only_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15468";
            qTestUniqueId = "34051588";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyCreateBundlesOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to API Deployment_Create Bundles_Utility Meter_Reader_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
       
        [Test]
        public void TC_15469_PV_API_Deployment_Create_Bundles_Utility_Meter_Reader_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15469";
            qTestUniqueId = "34051589";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderCreateBundlesOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to API Deployment_Edit Bundles_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15470_PV_API_Deployment_Edit_Bundles_Neptune_System_Admin_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-15470";
            qTestUniqueId = "34051804";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSystemAdminEditBundlesOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to API Deployment_Edit Bundles_Neptune CSR_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15471_PV_API_Deployment_Edit_Bundles_Neptune_CSR_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15471";
            qTestUniqueId = "34051805";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRAdminEditBundlesOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// <summary>
        /// Test Method to Validation_API Deployment_Edit Bundles_Utility Admin_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15472_PV_API_Deployment_Edit_Bundles_Utility_Admin_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15472";
            qTestUniqueId = "34051806";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminEditBundlesOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validation_API Deployment_Edit Bundles_Utility User_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15473_PV_API_Deployment_Edit_Bundles_Utility_User_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15473";
            qTestUniqueId = "34051807";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserEditBundlesOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to ValidationAPI Deployment_Edit Bundles_Utility Read Only_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15474_PV_API_Deployment_Edit_Bundles_Utility_Read_Only_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15474";
            qTestUniqueId = "34051808";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyEditBundlesOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to ValidationAPI Deployment_Edit Bundles_Utility Meter Reader_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15475_PV_API_Deployment_Edit_Bundles_Utility_Meter_Reader_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15475";
            qTestUniqueId = "34051809";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderEditBundlesOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Partner Management_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15489_PV_Left_Navigation_Partner_Management_Neptune_System_Admin_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-15489";
            qTestUniqueId = "34102130";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSystemAdminPartnerManagementON();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Partner Management_Partner Management_Neptune CSR_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15490_PV_Left_Navigation_Partner_Management_Neptune_CSR_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15490";
            qTestUniqueId = "34102131";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRPartnerManagementOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Partner Management_Partner Management_Neptune Utility_Admin_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15491_PV_Left_Navigation_Partner_Management_Utility_Admin_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15491";
            qTestUniqueId = "34102132";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminPartnerManagementOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Partner Management_Partner Management_Utility User_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15492_PV_Left_Navigation_Partner_Management_Utility_User_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15492";
            qTestUniqueId = "34102133";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserPartnerManagementOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Partner Management_Partner Management_Utility Read Only_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15493_PV_Left_Navigation_Partner_Management_Utility_Read_Only_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15493";
            qTestUniqueId = "34102134";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyPartnerManagementOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Partner Management_Utility Meter Reader_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15494_PV_Left_Navigation_Partner_Management_Utility_Meter_Reader_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15494";
            qTestUniqueId = "34102137";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderPartnerManagementOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to View Partner Management_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
       
        [Test]
        public void TC_15495_PV_View_Partner_Management_Neptune_System_Admin_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-15495";
            qTestUniqueId = "34103076";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSystemAdminPartnerManagementOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to View Partner Management_View Partner Management_Neptune CSR_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15496_PV_View_Partner_Management_View_Partner_Management_Neptune_CSR_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15496";
            qTestUniqueId = "34103077";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRPartnerManagementOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to View Partner Management_View Partner Management_Utility Admin_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15497_PV_View_Partner_Management_View_Partner_Management_Utility_Admin_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15497";
            qTestUniqueId = "34103078";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminPartnerManagementOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to View Partner Management_View Partner Management_Utility User_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15498_PV_View_Partner_Management_View_Partner_Management_Utility_User_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15498";
            qTestUniqueId = "34103079";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserViewPartnerManagementOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to View Partner Management_View Partner Management_Utility Read ONly_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15499_PV_View_Partner_Management_View_Partner_Management_Utility_Read_Only_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15499";
            qTestUniqueId = "34103080";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyPartnerManagementOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to View Partner Management_View Partner Management_Utility Meter Reader_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
       
        [Test]
        public void TC_15500_PV_View_Partner_Management_View_Partner_Management_Utility_Meter_Reader_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15500";
            qTestUniqueId = "34103081";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderViewPartnerManagementOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to View Partner Management_Create Partners_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15501_PV_View_Partner_Management_Create_Partners_Neptune_System_Admin_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-15501";
            qTestUniqueId = "34103374";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSystemAdminCreatePartnerOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// <summary>
        /// Test Method to View Partner Management_Create Partners_Neptune CSR_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
       
        [Test]
        public void TC_15502_PV_View_Partner_Management_Create_Partners_Neptune_CSR_Default_Off_ON_Permission_On_Off()
        {
            testCaseId = "TC-15502";
            qTestUniqueId = "34103375";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRCreatePartnerOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to View Partner Management_Create Partners Utility_Admin_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15503_PV_View_Partner_Management_Create_Partners_Utility_Admin_Default_Off_ON_Permission_On_Off()
        {
            testCaseId = "TC-15503";
            qTestUniqueId = "34103376";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminCreatePartnerOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to View Partner Management_Create Partners Utility_User_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15504_PV_View_Partner_Management_Create_Partners_Utility_User_Default_Off_ON_Permission_On_Off()
        {
            testCaseId = "TC-15504";
            qTestUniqueId = "34103377";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserCreatePartnerOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to View Partner Management_Create Partners Utility_REad_Only_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15505_PV_View_Partner_Management_Create_Partners_Utility_REad_Only_Default_Off_ON_Permission_On_Off()
        {
            testCaseId = "TC-15505";
            qTestUniqueId = "34103378";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyCreatePartnerOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to View Partner Management_Create Partners Utility_Meter_Reader_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15506_PV_View_Partner_Management_Create_Partners_Utility_Meter_Reader_Default_Off_ON_Permission_On_Off()
        {
            testCaseId = "TC-15506";
            qTestUniqueId = "34103379";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderCreatePartnerOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Partner Management_Edit Partners_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15507_PV_Partner_Management_Edit_Partners_Neptune_System_Admin_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-15507";
            qTestUniqueId = "34103427";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSystemAdminEditPartnersOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Partner Management_Edit Partners_Neptune CSR_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15508_PV_Partner_Management_Edit_Partners_Neptune_CSR_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15508";
            qTestUniqueId = "34103428";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSREditPartnersOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Partner Management_Edit Partners_Utility Admin_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
       
        [Test]
        public void TC_15509_PV_Partner_Management_Edit_Partners_Utility_Admin_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15509";
            qTestUniqueId = "34103429";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminEditPartnersOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Partner Management_Edit Partners_Utility User_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
       
        [Test]
        public void TC_15510_PV_Partner_Management_Edit_Partners_Utility_User_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15510";
            qTestUniqueId = "34103430";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserEditPartnersOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Partner Management_Edit Partners_Utility ReadOnly_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15511_PV_Partner_Management_Edit_Partners_Utility_ReadOnly_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15511";
            qTestUniqueId = "34103431";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserReadOnlyPartnersOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Partner Management_Edit Partners_Utility Meter Reader_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
       
        [Test]
        public void TC_15512_PV_Partner_Management_Edit_Partners_Utility_Meter_Reader_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15512";
            qTestUniqueId = "34103432";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserMeterReaderPartnersOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation_Partner Management_Display
        /// </summary>
        [Category("RolesAndPermissions")]
       
        [Test]
        public void TC_15513_PV_Left_Navigation_Partner_Management_Display()
        {
            testCaseId = "TC-15513";
            qTestUniqueId = "34103905";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUsagePlansLeftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Usage Plans_Feature Group_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_15514_PV_Usage_Plans_Feature_Group_Display()
        {
            testCaseId = "TC-15514";
            qTestUniqueId = "34103906";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUsagePlansFeatureGroup();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Usage Plans_View Usage Plans_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_15515_PV_Usage_Plans_View_Usage_Plans_Display()
        {
            testCaseId = "TC-15515";
            qTestUniqueId = "34103907";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateViewUsagePlans();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Usage Plans_Edit Usage Plans_Display
        /// </summary>
        [Category("RolesAndPermissions")]
       
        [Test]
        public void TC_15517_PV_Usage_Plans_Edit_Usage_Plans_Display()
        {
            testCaseId = "TC-15517";
            qTestUniqueId = "34103910";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateEditUsagePlans();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation_Usage Plans_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15518_PV_Left_Navigation_Usage_Plans_Neptune_System_Admin_Default_ON()
        {
            testCaseId = "TC-15518";
            qTestUniqueId = "34104861";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUsagePlansLftNavOnSystemAdmin();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation_Usage Plans_Neptune CSR_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
       
        [Test]
        public void TC_15519_PV_Left_Navigation_Usage_Plans_Neptune_CSR_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15519";
            qTestUniqueId = "34104862";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUsagePlansLftNavCSROff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation_Usage Plans_Utility Admin_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
       
        [Test]
        public void TC_15520_PV_Left_Navigation_Usage_Plans_Utility_Admin_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15520";
            qTestUniqueId = "34104863";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUsagePlansLftNavUtilityAdminOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation_Usage Plans_Utility User_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15521_PV_Left_Navigation_Usage_Plans_Utility_User_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15521";
            qTestUniqueId = "34104865";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUsagePlansLftNavUtilityUserOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation_Usage Plans_Utility Read Only_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
       
        [Test]
        public void TC_15522_PV_Left_Navigation_Usage_Plans_Utility_Read_Only_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15522";
            qTestUniqueId = "34104866";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUsagePlansLftNavUtilityReadOnlyOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Left Navigation_Usage Plans_Utility Meter Reader_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15523_PV_Left_Navigation_Usage_Plans_Utility_Meter_Reader_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15523";
            qTestUniqueId = "34104868";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUsagePlansLftNavUtilityMeterReaderOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Usage Plans_View Usage Plans_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15523_PV_Usage_Plans_View_Usage_Plans_Neptune_System_Admin_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-15523";
            qTestUniqueId = "34104868";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUsagePlansLftNavNeptuneSystemAdminOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Validate Usage Plans_View Usage Plans_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
       
        [Test]
        public void TC_15524_PV_Usage_Plans_View_Usage_Plans_Neptune_System_Admin_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-15524";
            qTestUniqueId = "34104868";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUsagePlansLftNavNeptuneSystemAdminOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Search Utility
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_5629_RnP_Neptune_Admin_Search_Utility()
        {
            testCaseId = "TC-5629";
            qTestUniqueId = "19482633";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateSearchUtility();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Filter Utility
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_5631_RnP_Neptune_Admin_Filter_Utility()
        {
            testCaseId = "TC-5631";
            qTestUniqueId = "19482635";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateFilterUtilities();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune Admin_Enable/Disable Permissions
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_5643_Rnp_Neptune_Admin_Enable_Disable_Permissions()
        {
            testCaseId = "TC-5643";
            qTestUniqueId = "19482647";
            startDate = DateTime.Now;
            try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToLftNavRolesPermissions(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateEditRole();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Search Utility
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_5723_Rnp_Neptune_CSR_Search_Utility()
        {
            testCaseId = "TC-5723";
            qTestUniqueId = "19482728";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateSearchUtility();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Search Utility
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_5725_Rnp_Neptune_CSR_Search_Utility()
        {
            testCaseId = "TC-5725";
            qTestUniqueId = "19482728";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateSearchUtility();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Neptune CSR_Export Settings
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_5771_Rnp_Neptune_CSR_Export_Settings()
        {
            testCaseId = "TC-5771";
            qTestUniqueId = "19482776";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("lveldi@neptunetg.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "lveldi@neptunetg.com", "Lucky@7290", false);
                rolesPermissons.ValidateExportSettingsDisabled();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Search Utility
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_5817_Rnp_Utility_Admin_Search_Utility()
        {
            testCaseId = "TC-5817";
            qTestUniqueId = "19482822";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateSearchUtility();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Filter Utility
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_5819_Rnp_Utility_Admin_Filter_Utility()
        {
            testCaseId = "TC-5819";
            qTestUniqueId = "19482824";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateFilterUtilities();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions_Utility Admin_Filter Utility
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_5854_Rnp_Utility_Admin_Filter_Utility_Permission_On_Off()
        {
            testCaseId = "TC-5854";
            qTestUniqueId = "19482824";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEnableDisablePermissions();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions Utility User_Search Utility
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_5911_Rnp_Utility_User_Search_Utility()
        {
            testCaseId = "TC-5911";
            qTestUniqueId = "19482916";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateSearchUtility();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions Utility User_Filter Utility
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_5913_Rnp_Utility_User_Filter_Utility()
        {
            testCaseId = "TC-5913";
            qTestUniqueId = "19482918";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateFilterUtilities();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions Utility User_Device Management
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_5937_Rnp_Utility_User_Device_Management()
        {
            testCaseId = "TC-5937";
            qTestUniqueId = "19482942";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDeviceManagement();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions Utility User_Build USB for Collector
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_5942_Rnp_Utility_User_Build_USB_for_Collector()
        {
            testCaseId = "TC-5942";
            qTestUniqueId = "19482947";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateLanPageUtilityManagement(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateBuildUSBCollector();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions Utility User_Edit Gateway Description
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_5945_Rnp_Utility_User_Edit_Gateway_Description()
        {
            testCaseId = "TC-5945";
            qTestUniqueId = "19482947";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateLanPageUtilityManagement(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("lveldi@neptunetg.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "lveldi@neptunetg.com", "Lucky@7290", false);
                rolesPermissons.ValidateDeviceNameDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions Utility User_Build USB for Gateway
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_5946_Rnp_Utility_User_Build_USB_for_Gateway()
        {
            testCaseId = "TC-5946";
            qTestUniqueId = "19482951";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateLanPageUtilityManagement(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateBuildUSBCollector();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions Utility Read Only_Search Utility
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_6005_Rnp_Utility_Read_Only_Search_Utility()
        {
            testCaseId = "TC-6005";
            qTestUniqueId = "19483010";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateLanPageUtilityManagement(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateSearchUtility();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions Utility Read Only_Filter Utility
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_6007_Rnp_Utility_Read_Only_Filter_Utility()
        {
            testCaseId = "TC-6007";
            qTestUniqueId = "19483012";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateLanPageUtilityManagement(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateFilterUtilities();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions Verify Access to Dashboard - Neptune Admin
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_7938_Rnp_Verify_Access_to_Dashboard_Neptune_Admin()
        {
            testCaseId = "TC-7938";
            qTestUniqueId = "20244487";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateDashboardWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions Verify Access to Dashboard Neptune Customer Service Representative
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_7939_Rnp_Verify_Access_to_Dashboard_Neptune_Customer_Service_Representative()
        {
            testCaseId = "TC-7939";
            qTestUniqueId = "20244488";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateDashboardWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions Verify Access to Dashboard Neptune Customer Service Representative
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_7940_Rnp_Verify_Access_to_Dashboard_Neptune_Customer_Service_Representative()
        {
            testCaseId = "TC-7940";
            qTestUniqueId = "20244488";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateDashboardWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions Verify Access to Dashboard Utility Admin
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_7941_Rnp_Verify_Access_to_Dashboard_Utility_Admin()
        {
            testCaseId = "TC-7941";
            qTestUniqueId = "20244490";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateDashboardWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions Verify Access to Dashboard Utility User
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_7944_Rnp_Verify_Access_to_Dashboard_Utility_User()
        {
            testCaseId = "TC-7944";
            qTestUniqueId = "20244493";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateDashboardWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Roles and Permissions Verify Access to Dashboard Utility Read Only Access
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_7947_Rnp_Verify_Access_to_Dashboard_Utility_Read_Only_Access()
        {
            testCaseId = "TC-7947";
            qTestUniqueId = "20244496";
            startDate = DateTime.Now;
            try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
             //   rolesPermissons.SetPermission("Neptune 360 Partner", "AMI No Flow Report", false);
                home.UserLogOut();
                //home.NavigateToHome(url, userName, password);
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateDashboardWidget();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune Only - Ability to create New Role
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_3692_Neptune_Only_Ability_to_create_New_Role()
        {
            testCaseId = "TC-3692";
            qTestUniqueId = "19238436";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateRoleManagementPage(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneOnly();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// <summary>
        /// Test Method to Neptune Only - "Neptune Only" field is displayed on Role Screen
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_3694_Neptune_Only_Neptune_Only_field_is_displayed_on_Role_Screen()
        {
            testCaseId = "TC-3694";
            qTestUniqueId = "19238438";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateRoleManagementPage(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneOnly();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune Only - Setting "Neptune Only" to On
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_3695_Neptune_Only_Setting_Neptune_Only_to_On_Permission_On_Off()
        {
            testCaseId = "TC-3695";
            qTestUniqueId = "19238439";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateRoleManagementPage(url, userName, password);
                rolesPermissons.ValidateNeptuneOnlyToON();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune Only - Setting "Neptune Only" to On
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_3696_Neptune_Only_Setting_Neptune_Only_to_OFF_Permission_On_Off()
        {
            testCaseId = "TC-3696";
            qTestUniqueId = "19238440";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateRoleManagementPage(url, userName, password);
                rolesPermissons.ValidateNeptuneOnlyToOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune Only - Updating "Neptune Only" field
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_3697_Neptune_Only_Updating_Neptune_Only_Field_Permission_On_Off()
        {
            testCaseId = "TC-3697";
            qTestUniqueId = "19238441";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateRoleManagementPage(url, userName, password);
                rolesPermissons.ValidateNeptuneOnlyToON();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation_Mobile MMR_Advanced RF Test_Neptune Field Service PM_On
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_10273_PV_Mobile_MMR_Advanced_RF_Test_Neptune_Field_Service_PM_On_PermissionOnOff_ON_Permission_On_Off()
        {
            testCaseId = "TC-10273";
            qTestUniqueId = "24860195";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateRoleManagementPage(url, userName, password);
                rolesPermissons.ValidateNeptuneMobileAdvanceRFTest();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation_Mobile MMR_MIU Logging_Neptune Field Service PM_On
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_10274_PV_Mobile_MMR_MIU_Logging_Neptune_Field_Service_PM_On_ON_Permission_On_Off()
        {
            testCaseId = "TC-10274";
            qTestUniqueId = "24860196";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateRoleManagementPage(url, userName, password);
                rolesPermissons.ValidateNeptuneFieldServiceMobileMMRMIULogging();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation_Mobile MMR_Pressure_Neptune Field Service PM_On
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_10275_PV_Mobile_MMR_Pressure_Neptune_Field_Service_PM_On_ON_Permission_On_Off()
        {
            testCaseId = "TC-10275";
            qTestUniqueId = "24860197";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateRoleManagementPage(url, userName, password);
                rolesPermissons.ValidateNeptuneFieldServiceMobileMMRPressure();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation_Mobile MMR_Meter_Reading_Neptune Field Service PM_On
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_10276_PV_Mobile_MMR_Meter_Reading_Neptune_Field_Service_PM_On()
        {
            testCaseId = "TC-10276";
            qTestUniqueId = "24860198";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateRoleManagementPage(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneFieldServiceMobileMMRMeterReading();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation_Mobile MMR_Advanced RF Test_Neptune Field Service PM_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_10278_PV_Mobile_MMR_Advanced_RF_Test_Field_Service_PM_Off()
        {
            testCaseId = "TC-10278";
            qTestUniqueId = "24860200";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //home.NavigateRoleManagementPage(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Field Service PM");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneFieldServiceMobileMMRMeterReading();
                rolesPermissons.ValidateNeptuneFieldServiceMIULoggingOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions Validation_Mobile MMR_Advanced RF Test_Neptune Field Service PM_Off
        /// </summary>
        //[Category("RolesAndPermissions_NonRegression")]
        //[Test]
        public void TC_01_SetDefaultPermissions()
        {
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];

                home.NavigateRoleManagementPage(url, userName, password);

                rolesPermissons.SetPermissions("Utility Administrator");
                rolesPermissons.SetPermissions("Utility Meter Reader");
                rolesPermissons.SetPermissions("Utility Read Only Access");
                rolesPermissons.SetPermissions("Utility User");
                rolesPermissons.SetPermissions("Neptune System Administrator");
                rolesPermissons.SetPermissions("Neptune Field Service PM");
                rolesPermissons.SetPermissions("Neptune Customer Support");
                rolesPermissons.SetPermissions("Neptune Customer Service Rep");
                rolesPermissons.SetPermissions("Neptune 360 Essentials");
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation_Mobile MMR_Advanced RF Test_Neptune Field Service PM_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_10279_PV_Mobile_MMR_Advanced_RF_Test_Field_Service_PM_Off()
        {
            testCaseId = "TC-10279";
            qTestUniqueId = "24860201";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateRoleManagementPage(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Field Service PM");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneFieldServicePressureOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Permissions Validation_Mobile MMR_Pressure_Neptune Field Service PM_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_10280_PV_Mobile_MMR_Pressure_Neptune_Field_Service_PM_Off()
        {
            testCaseId = "TC-10280";
            qTestUniqueId = "24860202";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateRoleManagementPage(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Field Service PM");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneFieldServicePressureOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader_Dashboard Settings Menu Item 
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_12545_RP_Utility_Meter_Reader_Dashboard_Settings_Menu_Item()
        {
            testCaseId = "TC-12545";
            qTestUniqueId = "27354954";
            startDate = DateTime.Now; try
            {
              //  char cc = testCaseId[100];
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateDashboardNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader_Account Management Menu Item 
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12842_RP_Utility_Meter_Reader_Account_Management_Menu_Item()
        {
            testCaseId = "TC-12842";
            qTestUniqueId = "27481406";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateAccManagementNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader_ Create Account  Menu Item 
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12843_RP_Utility_Meter_Reader_Create_Account_Menu_Item()
        {
            testCaseId = "TC-12843";
            qTestUniqueId = "27481407";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateAccManagementNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader_ Manage Account  Menu Item 
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12844_RnP_Utility_Meter_Reader_Manage_Account_Menu_Item()
        {
            testCaseId = "TC-12844";
            qTestUniqueId = "27481408";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateAccManagementNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader_Claim Unassigned MIU Item 
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12850_RnP_Utility_Meter_Reader_Claim_Unassigned_MIU_Menu_Item()
        {
            testCaseId = "TC-12850";
            qTestUniqueId = "27481414";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateAccManagementNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader Review Reads Menu Item
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12853_RnP_Utility_Meter_Reader_Review_Reads_Menu_Item()
        {
            testCaseId = "TC-12853";
            qTestUniqueId = "27481417";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateReviewReadsNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader Dashboard Settings
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12856_RnP_Utility_Meter_Reader_Dashboard_Settings()
        {
            testCaseId = "TC-12856";
            qTestUniqueId = "27481420";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateDashboardNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader View Dashboard Settings
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12857_RnP_Utility_Meter_Reader_View_Dashboard_Settings()
        {
            testCaseId = "TC-12857";
            qTestUniqueId = "27481421";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateDashboardNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader Edit Dashboard Settings
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12858_RnP_Utility_Meter_Reader_Edit_Dashboard_Settings()
        {
            testCaseId = "TC-12858";
            qTestUniqueId = "27481422";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateDashboardNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader Create Utility User
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12859_RnP_Utility_Meter_Reader_Create_Utility_User()
        {
            testCaseId = "TC-12859";
            qTestUniqueId = "27481423";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto@gmail.comm", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto@gmail.comm", "Automation#123", false);
                home.NavigateToLftUtilityDeviceManagement();
              utilityManagement.ValidateCreateUtilityButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader Edit Neptune User
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12860_RnP_Utility_Meter_Reader_Edit_Neptune_User()
        {
            testCaseId = "TC-12860";
            qTestUniqueId = "27481424";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateUtilityManagementNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader Edit Utility User
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12861_RnP_Utility_Meter_Reader_Edit_Utility_User()
        {
            testCaseId = "TC-12861";
            qTestUniqueId = "27481425";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateUtilityManagementNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader_Send Password Reset to Self
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12570_RnP_Utility_Meter_Reader_Send_Password_Reset_to_Self()
        {
            testCaseId = "TC-12570";
            qTestUniqueId = "27354979";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                utilityName = testData["UtilityName"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateSendPasswordResetToSelf(utilityName);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader_Send Config for Collector
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12609_RnP_Utility_Meter_Reader_Send_Config_for_Collector()
        {
            testCaseId = "TC-12609";
            qTestUniqueId = "27355018";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCollectorNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader_Send Config for Gateway
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12613_RnP_Utility_Meter_Reader_Send_Config_for_Gateway()
        {
            testCaseId = "TC-12613";
            qTestUniqueId = "27355022";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCollectorNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader Enable/Disable Permissions
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12614_RnP_Utility_Meter_Reader_Enable_Disable_Permissions()
        {
            testCaseId = "TC-12614";
            qTestUniqueId = "27355023";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCollectorNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader Split Route
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12639_RnP_Utility_Meter_Reader_Split_Route()
        {
            testCaseId = "TC-12639";
            qTestUniqueId = "27355048";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCollectorNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader UnSplit Route
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12640_RnP_Utility_Meter_Reader_UnSplit_Route()
        {
            testCaseId = "TC-12640";
            qTestUniqueId = "27355049";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCollectorNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Roles Permissions Utility Meter Reader Sync Unassigned Routes
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12645_RnP_Utility_Meter_Reader_Sync_Unassigned_Routes()
        {
            testCaseId = "TC-12645";
            qTestUniqueId = "27355054";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCollectorNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader Create Account Screen
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12646_RnP_Utility_Meter_Reader_Create_Account_Screen()
        {
            testCaseId = "TC-12646";
            qTestUniqueId = "27355055";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavPlatformManagementDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader Create Account
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12647_RnP_Utility_Meter_Reader_Create_Account()
        {
            testCaseId = "TC-12647";
            qTestUniqueId = "27355056";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavPlatformManagementDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader Edit Account Details
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12648_RnP_Utility_Meter_Reader_Edit_Account_Details()
        {
            testCaseId = "TC-12648";
            qTestUniqueId = "27355057";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavPlatformManagementDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader Manage Account Screen 
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12649_RnP_Utility_Meter_Reader_Manage_Account_Screen()
        {
            testCaseId = "TC-12649";
            qTestUniqueId = "27355058";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavPlatformManagementDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader View Account
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12650_RnP_Utility_Meter_Reader_View_Account()
        {
            testCaseId = "TC-12650";
            qTestUniqueId = "27355059";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavPlatformManagementDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader Edit Account Details
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12651_RnP_Utility_Meter_Reader_Edit_Account_Details()
        {
            testCaseId = "TC-12651";
            qTestUniqueId = "27355060";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavPlatformManagementDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader Create MIU Asset Screen
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12652_RnP_Utility_Meter_Reader_Create_MIU_Asset_Screen()
        {
            testCaseId = "TC-12652";
            qTestUniqueId = "27355061";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavPlatformManagementDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader Search Account Details
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12653_RnP_Utility_Meter_Reader_Search_Account_Details()
        {
            testCaseId = "TC-12653";
            qTestUniqueId = "27355062";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavPlatformManagementDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader Create MIU Asset
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12654_RnP_Utility_Meter_Reader_Create_MIU_Asset()
        {
            testCaseId = "TC-12654";
            qTestUniqueId = "27355063";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavPlatformManagementDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter CMIU Mode Management Screen
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12655_RnP_Utility_Meter_Reader_CMIU_Mode_Management_Screen()
        {
            testCaseId = "TC-12655";
            qTestUniqueId = "27355064";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLftNavSearchEndPOintsDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter View CMIU Mode 
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12656_RnP_Utility_Meter_Reader_View_CMIU_Mode()
        {
            testCaseId = "TC-12656";
            qTestUniqueId = "27355065";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLftNavSearchEndPOintsDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Edit CMIU Mode 
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12657_RnP_Utility_Meter_Reader_Edit_CMIU_Mode()
        {
            testCaseId = "TC-12657";
            qTestUniqueId = "27355066";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLftNavSearchEndPOintsDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Claim Unassigned MIU Screen
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12658_RnP_Utility_Meter_Reader_Claim_Unassigned_MIU_Screen()
        {
            testCaseId = "TC-12658";
            qTestUniqueId = "27355067";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLftNavSearchEndPOintsDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Search Accounts
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12659_RnP_Utility_Meter_Reader_Search_Accounts()
        {
            testCaseId = "TC-12659";
            qTestUniqueId = "27355068";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLftNavSearchEndPOintsDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter View Unassigned MIU Grid
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12660_RnP_Utility_Meter_Reader_View_Unassigned_MIU_Grid()
        {
            testCaseId = "TC-12660";
            qTestUniqueId = "27355069";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false); rolesPermissons.ValidateLftNavSearchEndPOintsDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles Permissions Utility Meter Reader_Assign MIU (s)
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12661_RnP_Utility_Meter_Reader_Reader_Assign_MIUs()
        {
            testCaseId = "TC-12661";
            qTestUniqueId = "27355070";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLftNavSearchEndPOintsDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles & Permissions UI Neptune System Administrator Permission Validation-Mobile MMR - Sync Unassigned Routes - Displayed 
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12817_RnP_Neptune_System_AdministratorMobile_MMR_Sync_Unassigned_Routes_Displayed()
        {
            testCaseId = "TC-12817";
            qTestUniqueId = "27448312";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavMobileMMRNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles & Permissions UI Neptune System Administrator Permission Validation-Mobile MMR - Sync Unassigned Routes Enabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12818_RnP_Neptune_System_AdministratorMobile_MMR_Sync_Unassigned_Routes_Enabled()
        {
            testCaseId = "TC-12818";
            qTestUniqueId = "27448313";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavMobileMMRNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Roles & Permissions UI Neptune System Administrator Permission Validation-Mobile MMR - Sync Unassigned Routes Enabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12819_RnP_Neptune_System_AdministratorMobile_MMR_Sync_Unassigned_Routes_Enabled()
        {
            testCaseId = "TC-12819";
            qTestUniqueId = "27448314";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavMobileMMRNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles & Permissions - UI - Neptune System Administrator - Permission Validation-Create -Mobile MMR - Sync Unassigned Routes - Enabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12820_RnP_UI_Neptune_System_Administrator_Permission_Validation_Create_Mobile_MMR_Sync_Unassigned_Routes_Enabled()
        {
            testCaseId = "TC-12820";
            qTestUniqueId = "27448315";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavMobileMMRNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles & Permissions - UI - Created New Role  - Permission Validation- Mobile MMR - Sync Unassigned Routes - Enabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12821_RnP_UI_Created_New_Role_Permission_Validation_Mobile_MMR_Sync_Unassigned_Routes_Enabled()
        {
            testCaseId = "TC-12821";
            qTestUniqueId = "27448316";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavMobileMMRNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles & Permissions - UI - Created New Role  - Permission Validation- Mobile MMR - Sync Unassigned Routes - disabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12822_RnP_UI_Created_New_Role_Permission_Validation_Mobile_MMR_Sync_Unassigned_Routes_Disabled()
        {
            testCaseId = "TC-12822";
            qTestUniqueId = "27448317";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavMobileMMRNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles & Permissions - UI - Created New Role  - Permission Validation- Mobile MMR - Sync Unassigned Routes - Displayed
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12823_RnP_UI_Created_New_Role_Permission_Validation_Mobile_MMR_Sync_Unassigned_Routes_Displayed()
        {
            testCaseId = "TC-12823";
            qTestUniqueId = "27448318";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavMobileMMRNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles & Permissions - UI - Utility Administrator - Permission Validation-Mobile MMR - Sync Unassigned Routes - Enabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12824_RnP_UI_Utility_Administrator_Permission_Validation_Mobile_MMR_Sync_Unassigned_Routes_Enabled()
        {
            testCaseId = "TC-12824";
            qTestUniqueId = "27448319";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavMobileMMRNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Roles & Permissions - UI - Utility Administrator - Permission Validation-Mobile MMR - Sync Unassigned Routes - Disabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12825_RnP_UI_Utility_Administrator_Permission_Validation_Mobile_MMR_Sync_Unassigned_Routes_Disabled()
        {
            testCaseId = "TC-12825";
            qTestUniqueId = "27448320";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavMobileMMRNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles & Permissions - UI - Utility Administrator - Permission Validation-Mobile MMR - Sync Unassigned Routes - Displayed
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12826_RnP_UI_Utility_Administrator_Permission_Validation_Mobile_MMR_Sync_Unassigned_Routes_Displayed()
        {
            testCaseId = "TC-12826";
            qTestUniqueId = "27448321";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavMobileMMRNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles & Permissions - UI - Neptune Customer Service Rep - Permission Validation-Mobile MMR - Sync Unassigned Routes - Enabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12827_RnP_UI_Neptune_Customer_Service_Rep_Permission_Validation_Mobile_MMR_Sync_Unassigned_Routes_Enabled()
        {
            testCaseId = "TC-12827";
            qTestUniqueId = "27448322";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavMobileMMRNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles & Permissions - UI - Neptune Customer Service Rep - Permission Validation-Mobile MMR - Sync Unassigned Routes - Displayed
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12828_RnP_UI_Neptune_Customer_Service_Rep_Permission_Validation_Mobile_MMR_Sync_Unassigned_Routes_Displayed()
        {
            testCaseId = "TC-12828";
            qTestUniqueId = "27448323";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavMobileMMRNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles & Permissions - UI - Neptune Field Service PM - Permission Validation-Mobile MMR - Sync Unassigned Routes - Enabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12829_RnPermissions_UI_Neptune_Field_Service_PM_Permission_Validation_Mobile_MMR_Sync_Unassigned_Routes_Enabled()
        {
            testCaseId = "TC-12829";
            qTestUniqueId = "27448324";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavMobileMMRNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles & Permissions - UI - Utility Meter Reader - Permission Validation-Mobile MMR - Sync Unassigned Routes - Displayed
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12830_RnPermissions_UI_Utility_Meter_Reader_Permission_Validation_Mobile_MMR_Sync_Unassigned_Routes_Displayed()
        {
            testCaseId = "TC-12830";
            qTestUniqueId = "27448325";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavMobileMMRNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles & Permissions - UI - Utility Meter Reader - Permission Validation-Mobile MMR - Sync Unassigned Routes - Disabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12831_RnP_UI_Utility_Meter_Reader_Permission_Validation_Mobile_MMR_Sync_Unassigned_Routes_Disabled()
        {
            testCaseId = "TC-12831";
            qTestUniqueId = "27448326";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavMobileMMRNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles & Permissions - UI - Utility Meter Reader - Permission Validation-Mobile MMR - Sync Unassigned Routes - Displayed 
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12832_RnP_UI_Utility_Meter_Reader_Permission_Validation_Mobile_MMR_Sync_Unassigned_Routes_Displayed()
        {
            testCaseId = "TC-12832";
            qTestUniqueId = "27448327";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavMobileMMRNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles & Permissions - UI - Utility Read Only Access - Permission Validation-Mobile MMR - Sync Unassigned Routes - Disabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12833_RnP_UI_Utility_Read_Only_Access_Permission_Validation_Mobile_MMR_Sync_Unassigned_Routes_Disabled()
        {
            testCaseId = "TC-12833";
            qTestUniqueId = "27448328";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavMobileMMRNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles & Permissions - UI - Utility Read Only Access - Permission Validation-Mobile MMR - Sync Unassigned Routes - Displayed
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12834_RnP_UI_Utility_Read_Only_Access_Permission_Validation_Mobile_MMR_Sync_Unassigned_Routes_Displayed()
        {
            testCaseId = "TC-12834";
            qTestUniqueId = "27448329";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //     home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavMobileMMRNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles & Permissions - UI - Utility User - Permission Validation-Mobile MMR - Sync Unassigned Routes - Disabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12835_RnP_UI_Utility_User_Permission_Validation_Mobile_MMR_Sync_Unassigned_Routes_Disabled()
        {
            testCaseId = "TC-12835";
            qTestUniqueId = "27448330";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateLftNavMobileMMRNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions_Display as Reader_Neptune Customer Service Rep_Enabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12870_RnP_Display_as_Reader_Neptune_Customer_Service_Rep_Enabled()
        {
            testCaseId = "TC-12870";
            qTestUniqueId = "27597877";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                rolesPermissons.SetPermission("Neptune Customer Service Rep", new Dictionary<string, bool>() { { "Route Management Widget", true }, { "Display as Reader", true }, { "View Route Management Dashboard", true }, { "Route Assignment Screen", true } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                routeManagement.ValidateReadersName();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Neptune Customer Service Rep", new Dictionary<string, bool>() { { "Route Management Widget", false }, { "Display as Reader", false }, { "View Route Management Dashboard", false }, { "Route Assignment Screen", false } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions_Display as Reader_Neptune Customer Service Rep_Disabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_12871_RnP_Display_as_Reader_Neptune_Customer_Service_Rep_Disabled()
        {
            testCaseId = "TC-12871";
            qTestUniqueId = "27597878";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                firstName = testData["FirstName"];
                lastName = testData["LastName"];
                userName = testData["UserName"];
                password = testData["Password"];
                string fullName = firstName + " " + lastName;
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                rolesPermissons.SetPermission("Neptune Customer Service Rep", new Dictionary<string, bool>() { { "Route Management Widget", true }, { "Display as Reader", false }, { "View Route Management Dashboard", true }, { "Route Assignment Screen", true } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                routeManagement.ValidateReadersNameNotDisplayed(fullName);
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Neptune Customer Service Rep", new Dictionary<string, bool>() { { "Route Management Widget", false }, { "Display as Reader", false }, { "View Route Management Dashboard", false }, { "Route Assignment Screen", false } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions_Display as Reader_Neptune Field Service PM_Enabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12872_RnP_Display_as_Reader_Neptune_Field_Service_PM_Enabled()
        {
            testCaseId = "TC-12872";
            qTestUniqueId = "27597879";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Field Service PM");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                routeManagement.ValidateReadersName();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Roles and Permissions_Display as Reader_Neptune Field Service PM_Disabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_12873_RnP_Display_as_Reader_Neptune_Field_Service_PM_Disabled()
        {
            testCaseId = "TC-12873";
            qTestUniqueId = "27597880";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                firstName = testData["FirstName"];
                lastName = testData["LastName"];
                userName = testData["UserName"];
                password = testData["Password"];
                string fullName = firstName + " " + lastName;
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto@gmail.comm", "Neptune Field Service PM");
                rolesPermissons.SetPermission("Neptune Field Service PM", new Dictionary<string, bool>() { { "Display as Reader", false }});
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto@gmail.comm", "Automation#123", false);
                routeManagement.ValidateReadersNameNotDisplayed(fullName);
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Neptune Field Service PM", new Dictionary<string, bool>() {{ "Display as Reader", true }});
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Roles and Permissions_Display as Reader_Neptune System Admin_Enabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_12874_RnP_Display_as_Reader_Neptune_System_Admin_Enabled()
        {
            testCaseId = "TC-12874";
            qTestUniqueId = "27597881";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                routeManagement.ValidateReadersName();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions_Display as Reader_Neptune System Admin_Disabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_12875_RnP_Display_as_Reader_Neptune_System_Admin_Disabled()
        {
            testCaseId = "TC-12875";
            qTestUniqueId = "27597882";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                firstName = testData["FirstName"];
                lastName = testData["LastName"];
                userName = testData["UserName"];
                password = testData["Password"];
                string fullName = firstName + " " + lastName;
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto@gmail.comm", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto@gmail.comm", "Automation#123", false);
                routeManagement.ValidateReadersNameNotDisplayed(fullName);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions_Display as Utiliy Admin Enabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_12876_RnP_Display_as_Utility_Admin_Enabled()
        {
            testCaseId = "TC-12876";
            qTestUniqueId = "27597883";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                routeManagement.ValidateReadersName();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions_Display as Utiliy Admin Disabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_12877_RnP_Display_as_Utility_Admin_Disabled()
        {
            testCaseId = "TC-12877";
            qTestUniqueId = "27597884";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                firstName = testData["FirstName"];
                lastName = testData["LastName"];
                userName = testData["UserName"];
                password = testData["Password"];
                string fullName = firstName + " " + lastName;
                //home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto@gmail.comm", "Utility Administrator");
                rolesPermissons.SetPermission("Utility Administrator", new Dictionary<string, bool>() { { "Display as Reader", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto@gmail.comm", "Automation#123", false);
                routeManagement.ValidateReadersNameNotDisplayed(fullName);
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Administrator", new Dictionary<string, bool>() { { "Display as Reader", true } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions_Display as Reader_Utility Meter Reader_Enabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_12878_RnP_Display_as_Reader_Utility_Meter_Reader_Enabled()
        {
            testCaseId = "TC-12878";
            qTestUniqueId = "27597885";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto@gmail.comm", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto@gmail.comm", "Automation#123", false);
                routeManagement.ValidateReadersName();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions_Display as Reader_Utility Meter Reader_Disabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_12879_RnP_Display_as_Reader_Utility_Meter_Reader_Disabled()
        {
            testCaseId = "TC-12879";
            qTestUniqueId = "27597886";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                firstName = testData["FirstName"];
                lastName = testData["LastName"];
                userName = testData["UserName"];
                password = testData["Password"];
                string fullName = firstName + " " + lastName;
                //home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto@gmail.comm", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto@gmail.comm", "Automation#123", false);
                routeManagement.ValidateReadersNameNotDisplayed(fullName);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions_Display as Reader_Utility Read Only_Enabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_12880_RnP_Display_as_Reader_Utility_Read_Only_Enabled()
        {
            testCaseId = "TC-12880";
            qTestUniqueId = "27597887";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto@gmail.comm", "Utility Read Only Access");
                rolesPermissons.SetPermission("Utility Read Only Access", new Dictionary<string, bool>() { { "Route Management Widget", true }, { "Display as Reader", true }, { "View Route Management Dashboard", true }, { "Route Assignment Screen", true } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto@gmail.comm", "Automation#123", false);
                routeManagement.ValidateReadersName();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Read Only Access", new Dictionary<string, bool>() { { "Route Management Widget", false }, { "Display as Reader", false }, { "View Route Management Dashboard", false }, { "Route Assignment Screen", false } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions_Display as Reader_Utility Read Only_Disabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_12881_RnP_Display_as_Reader_Utility_Read_Only_Disabled()
        {
            testCaseId = "TC-12881";
            qTestUniqueId = "27597888";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                firstName = testData["FirstName"];
                lastName = testData["LastName"];
                userName = testData["UserName"];
                password = testData["Password"];
                string fullName = firstName + " " + lastName;
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                rolesPermissons.SetPermission("Utility Read Only Access", new Dictionary<string, bool>() { { "Route Management Widget", true }, { "Display as Reader", false }, { "View Route Management Dashboard", true }, { "Route Assignment Screen", true } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                routeManagement.ValidateReadersNameNotDisplayed(fullName);
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Read Only Access", new Dictionary<string, bool>() { { "Route Management Widget", false }, { "Display as Reader", true }, { "View Route Management Dashboard", false }, { "Route Assignment Screen", false } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Roles and Permissions Display as Reader_Utility User_Enabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_12882_RnP_Display_as_Reader_Utility_User_Enabled()
        {
            testCaseId = "TC-12882";
            qTestUniqueId = "27597889";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                rolesPermissons.SetPermission("Utility User", new Dictionary<string, bool>() { { "Route Management Widget", true }, { "Display as Reader", true }, { "View Route Management Dashboard", true }, { "Route Assignment Screen", true } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                routeManagement.ValidateReadersName();
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility User", new Dictionary<string, bool>() { { "Route Management Widget", false }, { "Display as Reader", false }, { "View Route Management Dashboard", false }, { "Route Assignment Screen", false } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions Display as Reader_Utility User_Disabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_12883_RnP_Display_as_Reader_Utility_User_Disabled()
        {
            testCaseId = "TC-12883";
            qTestUniqueId = "27597890";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                firstName = testData["FirstName"];
                lastName = testData["LastName"];
                userName = testData["UserName"];
                password = testData["Password"];
                string fullName = firstName + " " + lastName;
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                rolesPermissons.SetPermission("Utility User", new Dictionary<string, bool>() { { "Route Management Widget", true }, { "Display as Reader", false }, { "View Route Management Dashboard", true }, { "Route Assignment Screen", true } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                routeManagement.ValidateReadersNameNotDisplayed(fullName);
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility User", new Dictionary<string, bool>() { { "Route Management Widget", false }, { "Display as Reader", false }, { "View Route Management Dashboard", false }, { "Route Assignment Screen", false } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions Display as Reader_Create New Role_Enabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_12884_RnP_Display_as_Reader_Create_New_Role_Enabled()
        {
            testCaseId = "TC-12884";
            qTestUniqueId = "27597891";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                routeManagement.ValidateReadersName();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions Display as Reader_Create New Role_Disabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_12885_RnP_Display_as_Reader_Create_New_Role_Disabled()
        {
            testCaseId = "TC-12885";
            qTestUniqueId = "27597892";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                routeManagement.ValidateReadersName();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Roles and Permissions Neptune System Admin - Dashboard Network Health - No - Left Navigation - Network Health - Not Displayed
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_13382_RnP_Neptune_System_Admin_Dashboard_Network_Health_No_Left_Navigation_Network_Health_Not_Displayed()
        {
            testCaseId = "TC-13382";
            qTestUniqueId = "28910361";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateDashboardPage(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                dashBoard.ValidateNetworkHealthNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions Neptune Customer Service Rep- Dashboard Network Health - No - Left Navigation - Network Health - Not Displayed
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_13385_RnP_Neptune_Customer_Service_Rep_Dashboard_Network_Health_No_Left_Navigation_Network_Health_Not_Displayed()
        {
            testCaseId = "TC-13385";
            qTestUniqueId = "28910364";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateDashboardPage(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                dashBoard.ValidateNetworkHealthNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions Utility User- Dashboard Network Health - No - Left Navigation - Network Health - Not Displayed
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_13391_RnP_Utility_User_Dashboard_Network_Health_No_Left_Navigation_Network_Health_Not_Displayed()
        {
            testCaseId = "TC-13391";
            qTestUniqueId = "28910370";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateDashboardPage(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                dashBoard.ValidateNetworkHealthNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Roles and Permissions Utility Read_Only- Dashboard Network Health - No - Left Navigation - Network Health - Not Displayed
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_13394_RnP_Utility_Read_Only_Access_Dashboard_Network_Health_No_Left_Navigation_Network_Health_Not_Displayed()
        {
            testCaseId = "TC-13394";
            qTestUniqueId = "28910373";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateDashboardPage(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                dashBoard.ValidateNetworkHealthNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions Utility Read_Only- Dashboard Network Health - Yes - Left Navigation - Network Health - Displayed
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_13398_RnP_Utility_Meter_Reader_Dashboard_Network_Health_Yes_Left_Navigation_Network_Health_Displayed()
        {
            testCaseId = "TC-13398";
            qTestUniqueId = "28910376";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateRoleManagementPage(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNetworkHealthField();
                home.UserLogOut();
             QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions View All Network Health Dashboard Widgets - Permission Available
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_13401_RnP_View_All_Network_Health_Dashboard_Widgets_Permission_Available()
        {
            testCaseId = "TC-13401";
            qTestUniqueId = "28910380";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateRoleManagementPage(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNetworkHealthField();
                home.UserLogOut();
              QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Roles and Permissions Utility_Admin_ View All Network Health Dashboard Widgets - Permission Available
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_13404_RnP_Utility_Admin_View_All_Network_Health_Dashboard_Widgets_Permission_Available()
        {
            testCaseId = "TC-13404";
            qTestUniqueId = "28910383";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateRoleManagementPage(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNetworkHealthField();
                home.UserLogOut();
               QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Roles and Permissions Utility_User_ View All Network Health Dashboard Widgets - Permission Available
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_13407_RnP_Utility_User_View_All_Network_Health_Dashboard_Widgets_Permission_Available()
        {
            testCaseId = "TC-13407";
            qTestUniqueId = "28910386";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateRoleManagementPage(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
             //   rolesPermissons.SetPermission("Utility User", new Dictionary<string, bool>() { { "Platform Management Left Navigation", true }, { "Roles and Permissions Left Navigation", true }, { "View All Network Health Dashboard Widgets", true } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNetworkHealthFieldReadOnly();
                home.UserLogOut();
               /* home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility User", new Dictionary<string, bool>() { { "Platform Management Left Navigation", false }, { "Roles and Permissions Left Navigation", false }, { "View All Network Health Dashboard Widgets", false } });
                home.UserLogOut();*/
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Roles and Permissions Utility_Read_Only_Access_ View All Network Health Dashboard Widgets - Permission Available
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_13410_RnP_Utility_Read_Only_Access_View_All_Network_Health_Dashboard_Widgets_Permission_Available()
        {
            testCaseId = "TC-13410";
            qTestUniqueId = "28910389";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateRoleManagementPage(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
              //  rolesPermissons.SetPermission("Utility Read Only Access", new Dictionary<string, bool>() { { "Platform Management Left Navigation", true }, { "Roles and Permissions Left Navigation", true }, { "View All Network Health Dashboard Widgets", true } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNetworkHealthFieldReadOnly();
                home.UserLogOut();
               /* home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Read Only Access", new Dictionary<string, bool>() { { "Platform Management Left Navigation", false }, { "Roles and Permissions Left Navigation", false }, { "View All Network Health Dashboard Widgets", false } });*/
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions Utility_Meter_Reader_ View All Network Health Dashboard Widgets - Permission Available
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_13412_RnP_Utility_Meter_Reader_View_All_Network_Health_Dashboard_Widgets_Permission_Available()
        {
            testCaseId = "TC-13412";
            qTestUniqueId = "28910392";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateDashboardPage(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                dashBoard.ValidateNetworkHealthNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Roles and Permissions Utility_Meter_Reader_ View All Network Health Dashboard Widgets - Permission Available
        /// </summary>
        [Category("RolesAndPermissions")]
       
        [Test]
        public void TC_13415_RnP_Utility_Meter_Reader_View_All_Network_Health_Dashboard_Widgets_Permission_Available()
        {
            testCaseId = "TC-13415";
            qTestUniqueId = "28910394";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateRoleManagementPage(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
              //  rolesPermissons.SetPermission("Utility Meter Reader", new Dictionary<string, bool>() { { "Dashboard Network Health Left Navigation", true } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNetworkHealthFieldUtilityMeterReader();
                home.UserLogOut();
              /*  home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Meter Reader", new Dictionary<string, bool>() { { "Dashboard Network Health Left Navigation", false } });
                home.UserLogOut();*/
               QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation_Customer Inquiry_Initiate Refresh Reads_Neptune Admin _On
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_13467_PV_Customer_Inquiry_Initiate_Refresh_Reads_Neptune_Admin_On()
        {
            testCaseId = "TC-13467";
            qTestUniqueId = "29276658";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                miuId = testData["MiuID"];
                //  home.NavigateToLftCustomerInquiry(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                customerInquiry.ValidateRefreshReadsDisplayed(miuId);
                home.UserLogOut();
              //  QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions Validation_Customer Inquiry_Initiate Refresh Reads_Neptune Admin _Off
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_13468_PV_Customer_Inquiry_Initiate_Refresh_Reads_Neptune_Admin_Off()
        {
            testCaseId = "TC-13468";
            qTestUniqueId = "29276659";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                miuId = testData["MiuID"];
                //  home.NavigateToLftCustomerInquiry(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                rolesPermissons.SetPermission("Neptune System Administrator", "Initiate Refresh Reads", false);

                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                customerInquiry.ValidateRefreshReadsNotDisplayed(miuId);
                rolesPermissons.SetPermission("Neptune System Administrator", "Initiate Refresh Reads");

                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation_Customer Inquiry_Initiate Refresh Reads_Neptune CSR _On
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_13469_PV_Customer_Inquiry_Initiate_Refresh_Reads_Neptune_CSR_On()
        {
            testCaseId = "TC-13469";
            qTestUniqueId = "29276660";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                miuId = testData["MiuID"];
                //  home.NavigateToLftCustomerInquiry(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                customerInquiry.ValidateRefreshReadsDisplayed(miuId);
                home.UserLogOut();
              QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation_Customer Inquiry_Initiate Refresh Reads_Neptune CSR _Off
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_13470_PV_Customer_Inquiry_Initiate_Refresh_Reads_Neptune_CSR_Off()
        {
            testCaseId = "TC-13470";
            qTestUniqueId = "29276661";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                miuId = testData["MiuID"];
                //  home.NavigateToLftCustomerInquiry(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Service Rep");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                customerInquiry.ValidateRefreshReadsNotDisplayed(miuId);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions Validation_Customer Inquiry_Initiate Refresh Reads_Utility_Admin_On
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_13471_PV_Customer_Inquiry_Initiate_Refresh_Reads_Utility_Admin_On()
        {
            testCaseId = "TC-13471";
            qTestUniqueId = "29276662";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                miuId = testData["MiuID"];
                //  home.NavigateToLftCustomerInquiry(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                rolesPermissons.SetPermission("Utility Administrator", new Dictionary<string, bool>() { { "Initiate Refresh Reads", true } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                customerInquiry.ValidateRefreshReadsDisplayed(miuId);
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Administrator", new Dictionary<string, bool>() { { "Initiate Refresh Reads", false } });
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions Validation_Customer Inquiry_Initiate Refresh Reads_Utility_Admin_Off
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_13472_PV_Customer_Inquiry_Initiate_Refresh_Reads_Utility_Admin_Off()
        {
            testCaseId = "TC-13472";
            qTestUniqueId = "29276663";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                miuId = testData["MiuID"];
                //  home.NavigateToLftCustomerInquiry(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                customerInquiry.ValidateRefreshReadsNotDisplayed(miuId);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation_Customer Inquiry_Initiate Refresh Reads_Utility_User On
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_13473_PV_Customer_Inquiry_Initiate_Refresh_Reads_Utility_User_On()
        {
            testCaseId = "TC-13473";
            qTestUniqueId = "29276664";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                miuId = testData["MiuID"];
                //  home.NavigateToLftCustomerInquiry(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                customerInquiry.ValidateRefreshReadsDisplayed(miuId);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation_Customer Inquiry_Initiate Refresh Reads_Utility_User Off
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_13474_PV_Customer_Inquiry_Initiate_Refresh_Reads_Utility_User_Off()
        {
            testCaseId = "TC-13474";
            qTestUniqueId = "29276665";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                miuId = testData["MiuID"];
                //   home.NavigateToLftCustomerInquiry(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                customerInquiry.ValidateRefreshReadsNotDisplayed(miuId);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation_Customer Inquiry_Initiate Refresh Reads_Utility_Read_Access_Only_Off 
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_13475_PV_Customer_Inquiry_Initiate_Refresh_Reads_Utility_Read_Access_Only_Off()
        {
            testCaseId = "TC-13475";
            qTestUniqueId = "29276666";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                miuId = testData["MiuID"];
                //   home.NavigateToLftCustomerInquiry(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                customerInquiry.ValidateRefreshReadsNotDisplayed(miuId);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation_Customer Inquiry_Initiate Refresh Reads_Utility_Meter_Reader_Off 
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_13476_PV_Customer_Inquiry_Initiate_Refresh_Reads_Utility_Meter_Reader_Off()
        {
            testCaseId = "TC-13476";
            qTestUniqueId = "29276667";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                miuId = testData["MiuID"];
                //   home.NavigateToLftCustomerInquiry(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                rolesPermissons.SetPermission("Utility Meter Reader", new Dictionary<string, bool>() { { "Initiate Refresh Reads", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                customerInquiry.ValidateRefreshReadsNotDisplayed(miuId);
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Meter Reader", new Dictionary<string, bool>() { { "Initiate Refresh Reads", true } });
                home.UserLogOut();
               
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions ValidationCustomer Inquiry_Initiate Refresh Reads_360 Lite Utility Admin_Off
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_13477_PV_Customer_Inquiry_Initiate_Refresh_Reads_360_Lite_Utility_Admin_Off()
        {
            testCaseId = "TC-13477";
            qTestUniqueId = "29276668";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                miuId = testData["MiuID"];
                //  home.NavigateToLftCustomerInquiry(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                rolesPermissons.SetPermission("Utility Administrator", new Dictionary<string, bool>() { { "Initiate Refresh Reads", false } });
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                customerInquiry.ValidateRefreshReadsNotDisplayed(miuId);
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Administrator", new Dictionary<string, bool>() { {"Initiate Refresh Reads", true }} );
                home.UserLogOut();
                home.NavigateToHome(url, userName, password, false);
                rolesPermissons.SetPermission("Utility Administrator", new Dictionary<string, bool>() { {"Initiate Refresh Reads", true }} );
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Role Management_Reporting_Permissions_Invalid Readings Report_Editable
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_14279_Role_Management_Reporting_Permissions_Invalid_Readings_Report_Editable()
        {
            testCaseId = "TC-14279";
            qTestUniqueId = "29276668";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateRoleManagementPage(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateInvalidReadingEditable();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Landing Page_Reports_Utility User_OFF
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_14857_PV_Landing_Page_Reports_Utility_User_OFF()
        {
            testCaseId = "TC-14857";
            qTestUniqueId = "32413338";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                home.ValidateReportsNotDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions_Reports Left Navigation_Toggle
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_14871_Roles_and_Permissions_Reports_Left_Navigation_Toggle()
        {
            testCaseId = "TC-14871";
            qTestUniqueId = "32413359";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateRoleManagementPage(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateReportLeftNavigationToggle();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions_Left Navigation_File Mapper _Editable
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_15388_RnP_Left_Navigation_File_Mapper_Editable()
        {
            testCaseId = "TC-15388";
            qTestUniqueId = "34020600";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateRoleManagementPage(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateFileMapperToggle();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions_File Mapper Feature_File Mapper_Editable
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_15390_RnP_File_Mapper_Feature_File_Mapper_Editable()
        {
            testCaseId = "TC-15390";
            qTestUniqueId = "34020744";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateRoleManagementPage(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateFileMapperToggle();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and PermissionsLeft Navigation_File Mapper_Utility Admin_Default OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15393_RnP_Left_Navigation_File_Mapper_Utility_Admin_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15393";
            qTestUniqueId = "34020797";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminFileMapperOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation Usage Plans_View Usage Plans_Neptune CSR_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15525_PV_Usage_Plans_View_Usage_Plans_Neptune_CSR_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15525";
            qTestUniqueId = "34105066";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRViewUsagePlansOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions Validation Usage Plans_View Usage Plans_Utility Admin_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15526_PV_Usage_Plans_View_Usage_Plans_Utility_Admin_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15526";
            qTestUniqueId = "34105067";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminViewUsagePlansOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation Usage Plans_View Usage Plans_Utility User_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15527_PV_Usage_Plans_View_Usage_Plans_Utility_User_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15527";
            qTestUniqueId = "34105068";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserViewUsagePlansOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation Usage Plans_View Usage Plans_Utility Read ONly OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15528_PV_Usage_Plans_View_Usage_Plans_Utility_Read_Only_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15528";
            qTestUniqueId = "34105069";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyViewUsagePlansOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Permissions Validation Usage Plans_View Usage Plans_Utility Meter REader OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
       
        [Test]
        public void TC_15529_PV_Usage_Plans_View_Usage_Plans_Utility_Meter_Reader_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15529";
            qTestUniqueId = "34105070";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderViewUsagePlansOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation Usage Plans_Edit Usage Plans_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
       
        [Test]
        public void TC_15536_PV_Usage_Plans_Edit_Usage_Plans_Neptune_System_Admin_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-15536";
            qTestUniqueId = "34105380";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSystemAdminEditUsagePlanOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions Validation Usage Plans_Edit Usage Plans_Neptune CSR Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15537_PV_Usage_Plans_Edit_Usage_Plans_Neptune_CSR_Off_ON_Permission_On_Off()
        {
            testCaseId = "TC-15537";
            qTestUniqueId = "34105381";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSREditUsagePlanOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions Validation Usage Plans_Edit Usage Plans_Utility admin Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15538_PV_Usage_Plans_Edit_Usage_Plans_Utility_Admin_Off_ON_Permission_On_Off()
        {
            testCaseId = "TC-15538";
            qTestUniqueId = "34105382";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminEditUsagePlanOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions Validation Usage Plans_Edit Usage Plans_Utility admin Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15539_PV_Usage_Plans_Edit_Usage_Plans_Utility_User_Off_ON_Permission_On_Off()
        {
            testCaseId = "TC-15539";
            qTestUniqueId = "34105383";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserEditUsagePlanOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions Validation Usage Plans_Edit Usage Plans_Utility read only Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15540_PV_Usage_Plans_Edit_Usage_Plans_Utility_Read_Only_Off_ON_Permission_On_Off()
        {
            testCaseId = "TC-15540";
            qTestUniqueId = "34105384";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyEditUsagePlanOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions Validation Usage Plans_Edit Usage Plans_Utility read only Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
       
        [Test]
        public void TC_15541_PV_Usage_Plans_Edit_Usage_Plans_Utility_Meter_Reader_Off_ON_Permission_On_Off()
        {
            testCaseId = "TC-15541";
            qTestUniqueId = "34105385";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderEditUsagePlanOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions Validation Left Navigation_SDK Access_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_15681_PV_Left_Navigation_SDK_Access_Display()
        {
            testCaseId = "TC-15681";
            qTestUniqueId = "34503613";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);

                landing.ValidateSDKPageAccess();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation Left Navigation_SDK Access_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15682_PV_Left_Navigation_SDK_Access_Neptune_System_Admin_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-15682";
            qTestUniqueId = "34503660";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminSDKAccessOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions Validation Left Navigation_SDK Access_Utility Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15683_PV_Left_Navigation_SDK_Access_Utility_Admin_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-15683";
            qTestUniqueId = "34503673";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminSDKAccessOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions Validation Left Navigation_SDK Access_Neptune CSR_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15684_PV_Left_Navigation_SDK_Access_Neptune_CSR_Default_Off_ON_Permission_On_Off()
        {
            testCaseId = "TC-15684";
            qTestUniqueId = "34503690";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRSDKAccessOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation Left Navigation_SDK Access_Utility_Read_Only_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15685_PV_Left_Navigation_SDK_Access_Utility_Read_Only_Default_Off_ON_Permission_On_Off()
        {
            testCaseId = "TC-15685";
            qTestUniqueId = "34503696";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlySDKAccessOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation Left Navigation_SDK Access_Utility User Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15686_PV_Left_Navigation_SDK_Access_Utility_User_Default_Off_ON_Permission_On_Off()
        {
            testCaseId = "TC-15686";
            qTestUniqueId = "34503704";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserSDKAccessOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation Left Navigation_SDK Access_Utility Meter_Reader Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15687_PV_Left_Navigation_SDK_Access_Utility_Meter_Reader_Default_Off_ON_Permission_On_Off()
        {
            testCaseId = "TC-15687";
            qTestUniqueId = "34503708";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderSDKAccessOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation SDK Access_Feature Group_Display
        /// </summary>
        [Category("RolesAndPermissions")]
       
        [Test]
        public void TC_15688_PV_SDK_Access_Feature_Group_Display()
        {
            testCaseId = "TC-15688";
            qTestUniqueId = "34515224";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);

                rolesPermissons.ValidateSDKAccessFeatureGroup();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation SDK Access_View SDK Access_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_15689_PV_SDK_Access_View_SDK_Access_Display()
        {
            testCaseId = "TC-15689";
            qTestUniqueId = "34515225";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);

                rolesPermissons.ValidateViewSDKAccess();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation SDK Access_View SDK Access_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15690_PV_SDK_Access_View_SDK_Access_Neptune_System_Admin_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-15690";
            qTestUniqueId = "34515226";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminViewSDKAccessOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions Validation SDK Access_View SDK Access_Utility Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15691_PV_SDK_Access_View_SDK_Access_Utility_Admin_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-15691";
            qTestUniqueId = "34515228";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminViewSDKAccessOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation SDK Access_View SDK Access_Neptune CSR_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15692_PV_SD_Access_View_SDK_Access_Neptune_CSR_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15692";
            qTestUniqueId = "34515231";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRViewSDKAccessOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation SDK Access_View SDK Access_Utiklity USER_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15693_PV_SDK_Access_View_SDK_Access_Utility_User_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15693";
            qTestUniqueId = "34515232";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserViewSDKAccessOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation SDK Access_View SDK Access_Utiklity Read_Only_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15694_PV_SDK_Access_View_SDK_Access_Utility_Read_Only_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15694";
            qTestUniqueId = "34515233";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyViewSDKAccessOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions Validation SDK Access_View SDK Access_Utiklity Meter_Reader_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15695_PV_SDK_Access_View_SDK_Access_Utility_Meter_Reader_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15695";
            qTestUniqueId = "34515235";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderViewSDKAccessOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Role_Validation_Neptune 360 Partner_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_15696_Role_Validation_Neptune_360_Partner_Display()
        {
            testCaseId = "TC-15696";
            qTestUniqueId = "34515493";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);

                rolesPermissons.ValidateNeptune360Partner();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Left Navigation_SDK Access_Neptune 360 Partner_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15697_PV_Left_Navigation_SDK_Access_Neptune_360_Partner_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-15697";
            qTestUniqueId = "34515494";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerViewSDKAccessOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation SDK Access_View SDK Access_Neptune 360 Partner_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15698_PV_SDK_Access_View_SDK_Access_Neptune_360_Partner_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-15698";
            qTestUniqueId = "34515494";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerViewSDKAccessOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Top Navigation_Logout Top Navigation_Neptune 360 Partner_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15699_PV_Top_Navigation_Logout_Top_Navigation_Neptune_360_Partner_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-15699";
            qTestUniqueId = "34515496";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerLogOutTopNavOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Identity Management_View Users_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15701_PV_Identity_Management_View_Users_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15701";
            qTestUniqueId = "34515827";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerViewUsersNo();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Identity Management_Create Users_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15702_PV_Identity_Management_Create_Users_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15702";
            qTestUniqueId = "34515828";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerCreateUsersNo();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Identity Management_Search Users_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15703_PV_Identity_Management_Search_Users_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15703";
            qTestUniqueId = "34515830";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerSearchUsersNo();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Identity Management_Edit Users_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15704_PV_Identity_Management_Edit_Users_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15704";
            qTestUniqueId = "34515831";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerEditUsersNo();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Identity Management_Deactivate Users_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
       
        [Test]
        public void TC_15705_PV_Identity_Management_Deactivate_Users_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15705";
            qTestUniqueId = "34515832";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerDeactivateUsersNo();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Identity Management_Send Password Reset_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
       
        [Test]
        public void TC_15706_PV_Identity_Management_Send_Password_Reset_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15706";
            qTestUniqueId = "34515834";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerSendPasswordResetNo();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Identity Management_Users_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15707_PV_Identity_Management_Users_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15707";
            qTestUniqueId = "34515835";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerUsersResetNo();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Identity Management_Users Profile_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15708_PV_Identity_Management_Users_Profile_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15708";
            qTestUniqueId = "34515836";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerUsersProfileResetNo();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Identity Management_Users Profile_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15709_PV_Identity_Management_Users_Profile_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15709";
            qTestUniqueId = "34515859";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerUsersManagementNo();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Pemissions Validation Identity Management_Create Utilities_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15710_PV_Identity_Management_Create_Utilities_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15710";
            qTestUniqueId = "34516623";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerCreateUtilitiesNo();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Identity Management_Edit Utilities_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15711_PV_Identity_Management_Edit_Utilities_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15711";
            qTestUniqueId = "34516624";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerEditUtilitiesNo();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Identity Management_Edit Utilities_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15712_PV_Identity_Management_View_Utilities_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15712";
            qTestUniqueId = "34516626";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerViewUtilitiesNo();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Identity Management_Utilitie_Management_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15713_PV_Identity_Management_Utilitie_Management_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15713";
            qTestUniqueId = "34516627";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerUtilitiesManagementNo();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Top Navigation_Home Top Navigation_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15714_PV_Top_Navigation_Home_Top_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15714";
            qTestUniqueId = "34516676";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerHomeTopNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Top Navigation_Profile Top Navigation_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15715_PV_Top_Navigation_Profile_Top_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15715";
            qTestUniqueId = "34516678";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerProfileTopNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Top Navigation Choose Utilities_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15716_PV_Top_Navigation_Choose_Utilities_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15716";
            qTestUniqueId = "34516679";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerChooseUtilitiesOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Top Navigation Alert Notifications Top Navigation_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15717_PV_Top_Navigation_Alert_Notifications_Top_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15717";
            qTestUniqueId = "34516680";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerAlertNotificationOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Pemissions Validation Code Maintenance_Create Codes_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15718_PV_Code_Maintenance_Create_Codes_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15718";
            qTestUniqueId = "34516805";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerCreateCodesOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Code Maintenance_Search Codes_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15719_PV_Code_Maintenance_Search_Codes_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15719";
            qTestUniqueId = "34516806";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerSearchCodesOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Code Maintenance_Edit Codes_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15720_PV_Code_Maintenance_Edit_Codes_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15720";
            qTestUniqueId = "34516808";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerEditCodesOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Code Maintenance_View Codes_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15721_PV_Code_Maintenance_View_Codes_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15721";
            qTestUniqueId = "34516809";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerViewCodesOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Code Maintenance_Select_And_Delete Codes_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15722_PV_Code_Maintenance_Select_And_Delete_Codes_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15722";
            qTestUniqueId = "34516810";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerselectanddeleteCodesOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Settings_View Handheld Settings_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15723_PV_Settings_View_Handheld_Settings_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15723";
            qTestUniqueId = "34517095";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerviewHandheldSettingOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Settings_Edit Handheld Settings_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15724_PV_Settings_Edit_Handheld_Settings_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15724";
            qTestUniqueId = "34517096";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnereditHandheldSettingOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation View Neptune Connect Screen_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15725_PV_View_Neptune_Connect_Screen_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15725";
            qTestUniqueId = "34517097";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerviewNeptuneConnectOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Neptune Connect_Download Neptune Connect Screen_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15726_PV_View_Neptune_Connect_Download_Neptune_Connect_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15726";
            qTestUniqueId = "34517099";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerDownloadNeptuneConnectOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Handhelds_View Handhelds_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]

        [Test]
        public void TC_15727_PV_View_Handhelds_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15727";
            qTestUniqueId = "34517100";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerviewHandheldOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Handhelds_create Handhelds_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15728_PV_Create_Handhelds_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15728";
            qTestUniqueId = "34517101";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnercreateHandheldOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Handhelds_edit Handhelds_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15729_PV_Edit_Handhelds_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15729";
            qTestUniqueId = "34517102";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnereditHandheldOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation File Mapper_File Mapper_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15730_PV_File_Mapper_File_Mapper_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15730";
            qTestUniqueId = "34517103";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerFileMapperOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Usage Plans_View Usage Plans_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15731_PV_Usage_Plans_View_Usage_Plans_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15731";
            qTestUniqueId = "34517104";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerViewUsagePlanOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Usage Plans_Create Usage Plans_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15732_PV_Usage_Plans_Create_Usage_Plans_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15732";
            qTestUniqueId = "34517104";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerCreateUsagePlanOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Pemissions Validation Usage Plans_Edit Usage Plans_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15733_PV_Usage_Plans_Edit_Usage_Plans_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15733";
            qTestUniqueId = "34517108";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerEditUsagePlanOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation API Deployment_View API Deployment_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15734_PV_API_Deployment_View_API_Deployment_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15734";
            qTestUniqueId = "34517109";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerViewAPIDepOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation API Deployment_Create Bundles__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15735_PV_API_Deployment_Create_Bundles_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15735";
            qTestUniqueId = "34517111";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerCreateBundlesOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation API Deployment_edit Bundles__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15736_PV_API_Deployment_Edit_Bundles_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15736";
            qTestUniqueId = "34517168";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerEditBundlesOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Left Navigation_Dashboard Left Navigation__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15737_PV_Left_Navigation_Dashboard_Left_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15737";
            qTestUniqueId = "34517299";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerDashboardLeftNavigationOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Left Navigation_Customer Inquiry Left Navigation__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15738_PV_Left_Navigation_Customer_Inquiry_Left_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15738";
            qTestUniqueId = "34517405";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerCustInqLeftNavigationOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Left Navigation_Billing Services Left Navigation__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15739_PV_Left_Navigation_Billing_Services_Left_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15739";
            qTestUniqueId = "34517407";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerBillingServicesLeftNavigationOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Left Navigation_Utility Management Left Navigation__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15740_PV_Left_Navigation_Utility_Management_Left_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15740";
            qTestUniqueId = "34517408";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerUtilityManagementLeftNavigationOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Left Navigation_Platform Management Left Navigation__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15741_PV_Left_Navigation_Platform_Management_Left_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15741";
            qTestUniqueId = "34517411";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerPlatformManagementLeftNavigationOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Left Navigation_User Management Left Navigation__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15742_PV_Left_Navigation_User_Management_Left_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15742";
            qTestUniqueId = "34517412";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerUserManagementLeftNavigationOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Left Navigation_Roles and Permissions Left Navigation__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15743_PV_Left_Navigation_Roles_Permissions_Left_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15743";
            qTestUniqueId = "34517413";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerRolesPermLeftNavigationOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Left Navigation_Notifications Left Navigation__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15744_PV_Left_Navigation_Notifications_Left_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15744";
            qTestUniqueId = "34517414";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerNotificationLeftNavigationOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Left Navigation_Alert Configuration Left Navigation__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15745_PV_Left_Navigation_Alert_Configuration_Left_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15745";
            qTestUniqueId = "34517421";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerAlertConfigLeftNavigationOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Pemissions Validation Left Navigation_Dashboard Network Health Left Navigation__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15746_PV_Left_Navigation_Dashboard_Network_Health_Left_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15746";
            qTestUniqueId = "34517422";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerDashboardNetworkLeftNavigationOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Left Navigation_Route Assignments Left Navigation__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15747_PV_Left_Navigation_Route_Assignments_Left_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15747";
            qTestUniqueId = "34517423";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerRouteAssignmentLeftNavigationOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Left Navigation_Route Management Left Navigation__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15748_PV_Left_Navigation_Route_Management_Left_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15748";
            qTestUniqueId = "34517424";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerRouteManagementLeftNavigationOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Left Navigation_Reports Left Navigation__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15749_PV_Left_Navigation_Reports_Left_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15749";
            qTestUniqueId = "34517425";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerReportsLeftNavigationOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Left Navigation_API Deployment  Left Navigation__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15750_PV_Left_Navigation_API_Deployment_Left_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15750";
            qTestUniqueId = "34517426";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerAPIDeplomentLeftNavigationOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Left Navigation_Partner Management Left Navigation__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15751_PV_Left_Navigation_Partner_Management_Left_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15751";
            qTestUniqueId = "34517427";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerPartnerManagementLeftNavigationOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Left Navigation_File Mapper Left Navigation Left Navigation__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15752_PV_Left_Navigation_File_Mapper_Left_Navigation_Left_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15752";
            qTestUniqueId = "34517428";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerFileMapperLeftNavigationOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Pemissions Validation Left Navigation_Usage Plans Left Navigation Left Navigation__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15753_PV_Left_Navigation_Usage_Plans_Left_Navigation_Left_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15753";
            qTestUniqueId = "34517441";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerUsagePlanLeftNavigationOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Left Navigation_Handheld Management Left Navigation Left Navigation__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15754_PV_Left_Navigation_Handheld_Management_Left_Navigation_Left_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15754";
            qTestUniqueId = "34517442";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerHandheldManagementLeftNavigationOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Left Navigation_Handhelds Left Navigation Left Navigation__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15755_PV_Left_Navigation_Handheld_Left_Navigation_Left_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15754";
            qTestUniqueId = "34517443";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerHandheldLeftNavigationOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Left Navigation_Neptune Connect Left Navigation Left Navigation__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15756_PV_Left_Navigation_Neptune_Connect_Left_Navigation_Left_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15756";
            qTestUniqueId = "34517444";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerNeptuneConnectLeftNavigationOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Left Navigation_Handheld Settings Left Navigation Left Navigation__Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15757_PV_Left_Navigation_Handheld_Settings_Left_Navigation_Left_Navigation_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15757";
            qTestUniqueId = "34517445";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerHandheldSettingLeftNavigationOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation  Partner Management_View Partner Management Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15758_PV_Partner_Management_View_Partner_Management_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15758";
            qTestUniqueId = "34518396";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerViewPartnerManagementOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation  Partner Management_edit Partner Management Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15759_PV_Partner_Management_Create_Partner_Management_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15759";
            qTestUniqueId = "34518397";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerCreatePartnerManagementOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation  Partner Management_edit Partner Management Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15760_PV_Partner_Management_Edit_Partner_Management_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15760";
            qTestUniqueId = "34518399";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerEditPartnerManagementOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation View All Network Health Dashboard Widgets_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15761_PV_Partner_Management_View_All_Network_Health_Dashboard_Widgets_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15761";
            qTestUniqueId = "34518400";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerViewAllNetworkOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Alert Configuration_Alert Configuration Screen_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15762_PV_Alert_Configuration_Alert_Configuration_Screen_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15762";
            qTestUniqueId = "34518401";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360AlertConfigScreenOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Alert Configuration_Alert Configuration Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15763_PV_Alert_Configuration_Alert_Configuration_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15763";
            qTestUniqueId = "34518403";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360AlertConfigOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Alert Configuration_Alert Configuration Screen_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15764_PV_Alert_Configuration_Edit_Alert_Configuration_Screen_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15764";
            qTestUniqueId = "34518404";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Alert Notification_Alert Notifications Screen_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15765_PV_Alert_Notification_Alert_Notifications_Screen_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15765";
            qTestUniqueId = "34518405";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Alert Notification_View Alert_Notifications Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15766_PV_Alert_Notification_View_Alert_Notifications_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15766";
            qTestUniqueId = "34518406";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Alert Notification_Edit ALert Notifications Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15767_PV_Alert_Notification_Edit_ALert_Notifications_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15767";
            qTestUniqueId = "34518407";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Reporting_Coded Notes Report Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15768_PV_Reporting_Coded_Notes_Report_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15768";
            qTestUniqueId = "34518408";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Reporting_Comments Report Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15769_PV_Reporting_Comments_Report_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15769";
            qTestUniqueId = "34518409";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Reporting_Mach 10 Battery Status Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15770_PV_Reporting_Mach_10_Battery_Status_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15770";
            qTestUniqueId = "34518410";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Reporting_Invalid Readings Report Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15771_PV_Reporting_Invalid_Readings_Report_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15771";
            qTestUniqueId = "34518411";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Reporting_Reports Landing Page Access Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15772_PV_Reporting_Reports_Landing_Page_Access_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15772";
            qTestUniqueId = "34518414";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Reporting_AMR: 35 Day No Flow Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15773_PV_Reporting_AMR_35_Day_No_Flow_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15773";
            qTestUniqueId = "34518418";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Reporting_AMR: 35 Day Potential Leak_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15774_PV_Reporting_AMR_35_Day_Potential_Leak_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15774";
            qTestUniqueId = "34518421";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Customer Inquiry_Search and Select Account_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15789_PV_Customer_Inquiry_Search_and_Select_Account_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15789";
            qTestUniqueId = "34541402";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Customer Inquiry_Edit Asset Configuration_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15790_PV_Customer_Inquiry_Edit_Asset_Configuration_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15790";
            qTestUniqueId = "34541403";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Customer Inquiry_Select a Meter_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15791_PV_Customer_Inquiry_Select_a_Meter_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15791";
            qTestUniqueId = "34541405";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Customer Inquiry_Consumption Metrics_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15792_PV_Customer_Inquiry_Consumption_Metrics_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15792";
            qTestUniqueId = "34541405";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Customer Inquiry_Customer Inquiry_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15793_PV_Customer_Inquiry_Customer_Inquiry_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15793";
            qTestUniqueId = "34541412";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Customer Inquiry_Initiate Refresh Reads_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15794_PV_Customer_Inquiry_Initiate_Refresh_Reads_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15794";
            qTestUniqueId = "34541412";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Notification Management_Create Notification_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15795_PV_Notification_Management_Create_Notification_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15795";
            qTestUniqueId = "34541422";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Notification Management_Edit Notification_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15796_PV_Notification_Management_Edit_Notification_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15796";
            qTestUniqueId = "34541423";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Notification Management_View Notification_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15797_PV_Notification_Management_View_Notification_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15797";
            qTestUniqueId = "34541424";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Notification Management Notification_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15798_PV_Notification_Management_Notification_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15798";
            qTestUniqueId = "34541425";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Landing Page_Search Account_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15799_PV_Landing_Page_Search_Account_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15799";
            qTestUniqueId = "34541429";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Landing Page_Dashboard Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15800_PV_Landing_Page_Dashboard_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15800";
            qTestUniqueId = "34541430";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Landing Page_Customer Inquiry Widget Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15801_PV_Landing_Page_Customer_Inquiry_Widget_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15801";
            qTestUniqueId = "34541434";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Landing Page_Billing Service Widget Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15802_PV_Landing_Page_Billing_Service_Widget_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15802";
            qTestUniqueId = "34541440";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Landing Page_Notifications Widget Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15803_PV_Landing_Page_Notifications_Widget_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15803";
            qTestUniqueId = "34541448";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Landing Page_User Management Widget Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15804_PV_Landing_Page_User_Management_Widget_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15804";
            qTestUniqueId = "34541457";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Pemissions Validation Landing Page_Utility Management  Widget Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15805_PV_Landing_Page_Utility_Management_Widget_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15805";
            qTestUniqueId = "34541468";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Landing Page_Route Management  Widget Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15806_PV_Landing_Page_Route_Management_Widget_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15806";
            qTestUniqueId = "34541477";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Pemissions Validation Landing Page_Reports  Widget Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15807_PV_Landing_Page_Reports_Widget_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15807";
            qTestUniqueId = "34541566";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Route Management_View Route Management Dashboard_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15808_PV_Route_Management_View_Route_Management_Dashboard_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15808";
            qTestUniqueId = "34541567";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Route Management_Edit Assignments_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15809_PV_Route_Management_Edit_Assignments_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15809";
            qTestUniqueId = "34541568";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Route Management_Display as Reader_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15810_PV_Route_Management_Display_as_Reader_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15810";
            qTestUniqueId = "34541570";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Route Management_Route Assignment Screen_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15811_PV_Route_Management_Route_Assignment_Screen_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15811";
            qTestUniqueId = "34541572";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Export Management_View Exports_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15812_PV_Export_Management_View_Exports_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15812";
            qTestUniqueId = "34541572";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Export Management_Select One or All File for Export_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15813_PV_Export_Management_Select_One_or_All_File_for_Export_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15813";
            qTestUniqueId = "34541575";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Export Management_Deselect One or All File for Export_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15814_PV_Export_Management_Deselect_One_or_All_File_for_Export_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15814";
            qTestUniqueId = "34541576";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Export Management_ReExport_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15815_PV_Export_Management_ReExport_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15815";
            qTestUniqueId = "34541577";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Export Management_Export Settings_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15816_PV_Export_Management_Export_Settings_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15816";
            qTestUniqueId = "34541578";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Export Management_View Only Exported_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15817_PV_Export_Management_View_Only_Exported_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15817";
            qTestUniqueId = "34541580";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Export Management_Export_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15818_PV_Export_Management_Export_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15818";
            qTestUniqueId = "34541581";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Export Management_Export History_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15819_PV_Export_Management_Export_History_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15819";
            qTestUniqueId = "34541582";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Import Management_Import History_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15820_PV_Import_Management_Import_History_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15820";
            qTestUniqueId = "34541583";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Import Management_View Import Files_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15821_PV_Import_Management_View_Import_Files_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15821";
            qTestUniqueId = "34541585";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Import Management_ Import Files_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15822_PV_Import_Management_Import_Files_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15822";
            qTestUniqueId = "34541586";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation_Import Management_ Import Summary_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15823_PV_Import_Management_Import_Summary_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15823";
            qTestUniqueId = "34541587";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Role Management_Neptune Only Option_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15824_PV_Role_Management_Neptune_Only_Option_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15824";
            qTestUniqueId = "34541588";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Role Management_Create Role_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15825_PV_Role_Management_Create_Role_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15825";
            qTestUniqueId = "34541589";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Device Management_Create Collector_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15826_PV_Device_Management_Create_Collector_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15826";
            qTestUniqueId = "34542776";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Device Management_Create Gateway_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15827_PV_Device_Management_Create_Gateway_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15827";
            qTestUniqueId = "34542779";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Device Management_Edit Collector_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15828_PV_Device_Management_Edit_Collector_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15828";
            qTestUniqueId = "34542781";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Device Management_Edit Collector Description_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15829_PV_Device_Management_Edit_Collector_Description_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15829";
            qTestUniqueId = "34542782";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Device Management_Build USB for Collector Description_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15830_PV_Device_Management_Build_USB_for_Collector_Description_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15830";
            qTestUniqueId = "34542786";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Device Management_Edit Gateway Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15831_PV_Device_Management_Build_Edit_Gateway_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15831";
            qTestUniqueId = "34542813";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Device Management_Edit Gateway Description Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15832_PV_Device_Management_Build_Edit_Gateway_Description_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15832";
            qTestUniqueId = "34542824";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Device Management Build USB for Gateway Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15833_PV_Device_Management_Build_USB_for_Gateway_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15833";
            qTestUniqueId = "34542825";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Device Management Show Devices Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15834_PV_Device_Management_Show_Devices_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15834";
            qTestUniqueId = "34542826";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation_Device Management View Collector Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15835_PV_Device_Management_View_Collector_Neptune_360_Partner_Default_OFF()
        {
            testCaseId = "TC-15835";
            qTestUniqueId = "34542828";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Device Management View Gateway Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15836_PV_Device_Management_View_Gateway_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15836";
            qTestUniqueId = "34542830";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Device Management Clone Collector Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15837_PV_Device_Management_Clone_Collector_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15837";
            qTestUniqueId = "34542832";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Device Management Clone Gateway Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15838_PV_Device_Management_Clone_Gateway_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15838";
            qTestUniqueId = "34542833";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Device Management Device Management Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15840_PV_Device_Management_Device_Management_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15840";
            qTestUniqueId = "34542838";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Role Management_Edit Role Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15841_PV_Role_Management_Edit_Role_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15841";
            qTestUniqueId = "34543767";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Role Management_Toggle Permissions Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15842_PV_Role_Management_Toggle_Permissions_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15842";
            qTestUniqueId = "34543768";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Role Management_Delete Role Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15843_PV_Role_Management_Delete_Role_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15843";
            qTestUniqueId = "34543769";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Role Management_View Role Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15844_PV_Role_Management_View_Role_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15844";
            qTestUniqueId = "34543772";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Role Management_Role Management Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_15845_PV_Role_Management_Role_Management_Neptune_360_Partner_Default_OFF_ON_Permission_On_Off()
        {
            testCaseId = "TC-15845";
            qTestUniqueId = "34543773";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidatePermission(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation Handheld Management Left Navigation - Neptune Field Service PM - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_16078_PV_Handheld_Management_Left_Navigation_Neptune_Field_Service_PM_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-16078";
            qTestUniqueId = "34905498";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneFieldHandheldManagementLftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation GROUPS_Feature Group_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_18152_PV_GROUPS_Feature_Group_Display()
        {
            testCaseId = "TC-18152";
            qTestUniqueId = "39083400";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateSDKAccessFeatureGroup();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation GROUPS_Feature Group_Create/Edit Group container_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_18153_PV_GROUPS_Feature_Group_Create_Edit_Group_container_Display()
        {
            testCaseId = "TC-18153";
            qTestUniqueId = "39083401";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateGroupWidgetPermssion();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation GROUPS_Feature Group_View Groups_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_18154_PV_GROUPS_Feature_Group_View_Groups_Display()
        {
            testCaseId = "TC-18154";
            qTestUniqueId = "39083402";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateGroupWidgetPermssion();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation GROUPS_Feature Group_Manage Group Endpoints_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_18155_PV_GROUPS_Feature_Group_Manage_Group_Endpoints_Display()
        {
            testCaseId = "TC-18155";
            qTestUniqueId = "39083403";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateGroupWidgetPermssion();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation GROUPS_Feature Group_Delete Group Endpoints_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_18156_PV_GROUPS_Feature_Group_Delete_Group_Endpoints_Display()
        {
            testCaseId = "TC-18156";
            qTestUniqueId = "39083431";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateGroupWidgetPermssion();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Permissions_Validation Left Navigation_Groups_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_18157_PV_Left_Navigation_Groups_Display()
        {
            testCaseId = "TC-18157";
            qTestUniqueId = "39083589";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateGroupWidgetPermssion();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Landing Page_Groups Widget_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_18158_PV_Landing_Page_Groups_Widget_Display()
        {
            testCaseId = "TC-18158";
            qTestUniqueId = "39083610";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateGroupWidgetPermssion();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Left Navigation_Groups_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18159_PV_Left_Navigation_Groups_Neptune_System_Admin_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-18159";
            qTestUniqueId = "39083638";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateSystemAdminPermissionOn(roleOption);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Left Navigation_Groups_Neptune CSR_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18160_PV_Left_Navigation_Groups_Neptune_CSR_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-18160";
            qTestUniqueId = "39083640";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRLftNavGroupsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Left Navigation_Groups_Utility Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18161_PV_Left_Navigation_Groups_Utility_Admin_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-18161";
            qTestUniqueId = "39083690";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminLftNavGroupsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Left Navigation_Groups_Utility User_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18170_PV_Left_Navigation_Groups_Utility_User_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-18170";
            qTestUniqueId = "39083714";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserLftNavGroupsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Left Navigation_Groups_Utility Read_Only_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18171_PV_Left_Navigation_Groups_Utility_Read_Only_Default_Off_ON_Permission_On_Off()
        {
            testCaseId = "TC-18171";
            qTestUniqueId = "39083714";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityREadOnlyLftNavGroupsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Left Navigation_Groups_Utility Meter Reader_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18172_PV_Left_Navigation_Groups_Utility_Meter_Reader_Default_Off_ON_Permission_On_Off()
        {
            testCaseId = "TC-18172";
            qTestUniqueId = "39083718";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderLftNavGroupsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Landing Page_Groups Widget_Neptune CSR_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18173_PV_Landing_Page_Groups_Widget_Neptune_CSR_Default_ON_ON_Permission_On_Off()
        {
            testCaseId = "TC-18173";
            qTestUniqueId = "39084365";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminGroupsLandingPageOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Landing Page_Groups Widget_Neptune System Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18174_PV_Landing_Page_Groups_Widget_Neptune_System_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18174";
            qTestUniqueId = "39084409";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminGroupsLandingPageOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Landing Page_Groups Widget_Utility Admin Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18175_PV_Landing_Page_Groups_Widget_Utility_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18175";
            qTestUniqueId = "39084420";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminGroupsLandingPageOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Landing Page_Groups Widget_Utility User Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18176_PV_Landing_Page_Groups_Widget_Utility_User_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18176";
            qTestUniqueId = "39084421";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserGroupsLandingPageOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Landing Page_Groups Widget_Utility Read Only Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18177_PV_Landing_Page_Groups_Widget_Utility_Read_Only_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18177";
            qTestUniqueId = "39084424";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityREadOnlyGroupsLandingPageOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Landing Page_Groups Widget_Utility Read Only Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18178_PV_Landing_Page_Groups_Widget_Utility_Read_Only_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18178";
            qTestUniqueId = "39084424";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityREadOnlyGroupsLandingPageOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Groups_Create/Edit Group container_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18179_PV_Landing_Page_Groups_Create_Edit_Group_container_Neptune_System_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18179";
            qTestUniqueId = "39084807";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateSystemAdminEditGroupContainerOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Groups_Create/Edit Group container_Neptune CSR_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18180_PV_Landing_Page_Groups_Create_Edit_Group_container_Neptune_CSR_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18180";
            qTestUniqueId = "39084831";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSREditGroupContainerOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Groups_Create/Edit Group container_Utility_Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18181_PV_Landing_Page_Groups_Create_Edit_Group_container_Utility_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18181";
            qTestUniqueId = "39084837";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminEditGroupContainerOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Groups_Create/Edit Group container_Utility_User_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18182_PV_Landing_Page_Groups_Create_Edit_Group_container_Utility_User_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18182";
            qTestUniqueId = "39084838";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserEditGroupContainerOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Groups_Create/Edit Group container_Utility_REad ONnly Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18183_PV_Landing_Page_Groups_Create_Edit_Group_container_Utility_REad_Only_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18183";
            qTestUniqueId = "39084844";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyEditGroupContainerOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Groups_Create/Edit Group container_Utility_Meter_Reader Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18184_PV_Landing_Page_Groups_Create_Edit_Group_container_Utility_Meter_Reader_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18184";
            qTestUniqueId = "39084846";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderEditGroupContainerOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Groups_Manage Group Endpoints_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18185_PV_Groups_Manage_Group_Endpoints_Neptune_System_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18185";
            qTestUniqueId = "39088154";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSystemAdminManageGroupEndpointOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Groups_Manage Group Endpoints_Neptune CSR Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18186_PV_Groups_Manage_Group_Endpoints_Neptune_CSR_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18186";
            qTestUniqueId = "39088154";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRManageGroupEndpointOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Reporting Feature Group_Found Meters Report_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_18408_PV_Reporting_Feature_Group_Found_Meters_Report_Display()
        {
            testCaseId = "TC-18408";
            qTestUniqueId = "39717798";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateReportingFoundMeters();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Reporting Feature Group_Found Meters Report_Editable
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_18409_PV_Reporting_Feature_Group_Found_Meters_Report_Editable()
        {
            testCaseId = "TC-18409";
            qTestUniqueId = "39717799";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateFoundMetersEditable();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Feature Group_Found Meters Reports_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_18410_PV_Feature_Group_Found_Meters_Reports_Neptune_System_Admin_Default_ON()
        {
            testCaseId = "TC-18410";
            qTestUniqueId = "39717800";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateReportingFoundMeters();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Feature Group_Found Meters Reports_Neptune  CSR Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18411_PV_Feature_Group_Found_Meters_Reports_Neptune_CSR_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18411";
            qTestUniqueId = "39717801";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRReportingFoundMetersOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Feature Group_Found Meters Reports_Utility Admin Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18412_PV_Feature_Group_Found_Meters_Reports_Utility_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18412";
            qTestUniqueId = "39717802";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneUtilityAdminReportingFoundMetersOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation Feature Group_Found Meters Reports_Utility User Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18413_PV_Feature_Group_Found_Meters_Reports_Utility_User_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18413";
            qTestUniqueId = "39717803";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneUtilityUserReportingFoundMetersOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Feature Group_Found Meters Reports_Utility Meter Reader Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18414_PV_Feature_Group_Found_Meters_Reports_Utility_Meter_Reader_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18414";
            qTestUniqueId = "39717805";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneUtilityMeterReaderReportingFoundMetersOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Feature Group_Found Meters Neptune 360 Partner_Only Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18416_PV_Feature_Group_Found_Meters_Reports_Neptune_360_Partner_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18416";
            qTestUniqueId = "39717811";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerReportingFoundMetersOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Reporting Feature Group_AMI No Flow Report_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_19570_PV_Reporting_Feature_Group_AMI_No_Flow_Report_Display()
        {
            testCaseId = "TC-19570";
            qTestUniqueId = "42329541";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //      home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneSystemAdminAmiNoFlow();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Reporting Feature Group_AMI No Flow Report Editable
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_19571_PV_Reporting_Feature_Group_AMI_No_Flow_Report_Editable()
        {
            testCaseId = "TC-19571";
            qTestUniqueId = "42329542";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneSystemAdminAmiNoFlowEditable();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Reporting Feature Group_AMI No Flow Reports_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19572_PV_Reporting_Feature_Group_AMI_No_Flow_Reports_Neptune_System_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19572";
            qTestUniqueId = "42329542";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminAMINoFlowOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Reporting Feature Group_AMI No Flow Reports_Neptune CSR_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19573_PV_Reporting_Feature_Group_AMI_No_Flow_Reports_Neptune_CSR_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19573";
            qTestUniqueId = "42346672";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRAMINoFlowOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Reporting Feature Group_AMI No Flow Reports_Utility Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19574_PV_Reporting_Feature_Group_AMI_No_Flow_Reports_Utility_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19574";
            qTestUniqueId = "42346673";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminAMINoFlowOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Reporting Feature Group_AMI No Flow Reports_Utility User_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19575_PV_Reporting_Feature_Group_AMI_No_Flow_Reports_Utility_User_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19575";
            qTestUniqueId = "42346675";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserAMINoFlowOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Reporting Feature Group_AMI No Flow Reports_Utility Meter_Reader_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19576_PV_Reporting_Feature_Group_AMI_No_Flow_Reports_Utility_Meter_Reader_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19576";
            qTestUniqueId = "42346676";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderAMINoFlowOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Reporting Feature Group_AMI No Flow Reports_Utility Read Only_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19577_PV_Reporting_Feature_Group_AMI_No_Flow_Reports_Utility_Read_Only_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19577";
            qTestUniqueId = "42346677";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyAMINoFlowOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Reporting Feature Group_AMI No Flow Reports_Neptune 360 Partner_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19578_PV_Reporting_Feature_Group_AMI_No_Flow_Reports_Neptune_360_Partner_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19578";
            qTestUniqueId = "42346678";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerAMINoFlowOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Reporting Feature Group_Inactive Flow Report_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_19602_PV_Reporting_Feature_Group_Inactive_Flow_Report_Display()
        {
            testCaseId = "TC-19602";
            qTestUniqueId = "42377192";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneSysAdminInactiveFlowReport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Reporting Feature Group_Inactive Flow Report_Editable
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_19603_PV_Reporting_Feature_Group_Inactive_Flow_Report_Editable()
        {
            testCaseId = "TC-19603";
            qTestUniqueId = "42377193";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneSysAdminInactiveFlowReportEditable();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Reporting Feature Group_Inactive Flow Report_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19604_PV_Reporting_Feature_Group_Inactive_Flow_Report_Neptune_System_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19604";
            qTestUniqueId = "42377195";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminInactiveFlowReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Reporting Feature Group_Inactive Flow Report_Neptune CSR_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19605_PV_Reporting_Feature_Group_Inactive_Flow_Report_Neptune_CSR_Default_ON_Permission_On_Off_Permission_On_Off()
        {
            testCaseId = "TC-19605";
            qTestUniqueId = "42377195";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRInactiveFlowReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation Reporting Feature Group_Inactive Flow Report_Utility Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19606_PV_Reporting_Feature_Group_Inactive_Flow_Report_Utility_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19606";
            qTestUniqueId = "42377195";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminInactiveFlowReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Permissions_Validation Reporting Feature Group_Inactive Flow Report_Utility User Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19607_PV_Reporting_Feature_Group_Inactive_Flow_Report_Utility_User_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19607";
            qTestUniqueId = "42377198";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserInactiveFlowReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Reporting Feature Group_Inactive Flow Report_Utility Meter Reader Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19608_PV_Reporting_Feature_Group_Inactive_Flow_Report_Utility_Meter_Reader_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19608";
            qTestUniqueId = "42377199";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderInactiveFlowReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Reporting Feature Group_Inactive Flow Report_Utility Read Only Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19609_PV_Reporting_Feature_Group_Inactive_Flow_Report_Utility_Read_Only_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19609";
            qTestUniqueId = "42377200";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyInactiveFlowReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation Reporting Feature Group_Inactive Flow Report_Neptune 360 Partner Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19610_PV_Reporting_Feature_Group_Inactive_Flow_Report_Neptune_360_Partner_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19610";
            qTestUniqueId = "42377201";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerInactiveFlowReportOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Reporting Feature Group_ High Consumption Report_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_19832_PV_Reporting_Feature_Group_High_Consumption_Report_Display()
        {
            testCaseId = "TC-19832";
            qTestUniqueId = "42683914";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateHighConsumptionReport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Reporting Feature Group_ High Consumption Report Editable
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_19833_PV_Reporting_Feature_Group_High_Consumption_Report_Editable()
        {
            testCaseId = "TC-19833";
            qTestUniqueId = "42683915";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateHighConsumptionReportEditable();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Permissions_Validation Feature Group_ High Consumption Report_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19834_PV_Reporting_Feature_Group_High_Consumption_Report_Neptune_System_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19834";
            qTestUniqueId = "42683916";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminHighConsumptionOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation Feature Group_ High Consumption Report_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19835_PV_Reporting_Feature_Group_High_Consumption_Report_Neptune_CSR_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19835";
            qTestUniqueId = "42683917";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRHighConsumptionOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Feature Group_ High Consumption Report_Utility Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19836_PV_Reporting_Feature_Group_High_Consumption_Report_Utility_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19836";
            qTestUniqueId = "42683918";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminHighConsumptionOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation Feature Group_ High Consumption Report_Utility User_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19837_PV_Reporting_Feature_Group_High_Consumption_Report_Utility_User_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19837";
            qTestUniqueId = "42683919";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserHighConsumptionOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Feature Group_ High Consumption Report_Utility Meter Reader_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19838_PV_Reporting_Feature_Group_High_Consumption_Report_Utility_Meter_Reader_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19838";
            qTestUniqueId = "42683920";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderConsumptionOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Feature Group_ High Consumption Report_Utility Read Only_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19839_PV_Reporting_Feature_Group_High_Consumption_Report_Utility_Read_Only_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19839";
            qTestUniqueId = "42683921";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyConsumptionOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Feature Group_ High Consumption Report_Neptune 360 Partner_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19840_PV_Reporting_Feature_Group_High_Consumption_Report_Neptune_360_Partner_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19840";
            qTestUniqueId = "42683922";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerConsumptionOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Edit Soft Disconnect_Display
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19914_PV_Customer_Inquiry_Feature_Group_Edit_Soft_Disconnect_Display_Permission_On_Off()
        {
            testCaseId = "TC-19914";
            qTestUniqueId = "42981200";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminEditSoftDisconnetOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Edit Soft Disconnect_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_19915_PV_Customer_Inquiry_Feature_Group_Edit_Soft_Disconnect_Editable()
        {
            testCaseId = "TC-19915";
            qTestUniqueId = "42981201";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneSysAdminEditSoftDisconnetEditable();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Edit Soft Disconnect_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_19916_PV_Customer_Inquiry_Feature_Group_Edit_Soft_Disconnect_Neptune_System_Admin_Default_ON()
        {
            testCaseId = "TC-19916";
            qTestUniqueId = "42981204";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneSysAdminEditSoftDisconnetEditable();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Edit Soft Disconnect_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19917_PV_Customer_Inquiry_Feature_Group_Edit_Soft_Disconnect_Neptune_CSR_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19917";
            qTestUniqueId = "42981205";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSREditSoftDisconnetOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Edit Soft Disconnect_Utility Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19918_PV_Customer_Inquiry_Feature_Group_Edit_Soft_Disconnect_Utility_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19918";
            qTestUniqueId = "42981206";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminEditSoftDisconnectOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Edit Soft Disconnect_Utility Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19919_PV_Customer_Inquiry_Feature_Group_Edit_Soft_Disconnect_Utility_User_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19919";
            qTestUniqueId = "42981207";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserEditSoftDisconnectOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Edit Soft Disconnect_Utility Meter Reader_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19920_PV_Customer_Inquiry_Feature_Group_Edit_Soft_Disconnect_Utility_Meter_Reader_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19920";
            qTestUniqueId = "42981208";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderEditSoftDisconnectOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Edit Soft Disconnect_Utility Read_Only_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19921_PV_Customer_Inquiry_Feature_Group_Edit_Soft_Disconnect_Utility_Read_Only_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-19921";
            qTestUniqueId = "42981209";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlySoftDisconnectOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Edit Soft Disconnect_Neptune 360 Partner_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_19922_PV_Customer_Inquiry_Feature_Group_Edit_Soft_Disconnect_Neptune_360_Partner_Default_Off_Permission_On_Off()
        {
            testCaseId = "TC-19922";
            qTestUniqueId = "42981210";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerSoftDisconnectOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Create Comments_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_20257_PV_Customer_Inquiry_Feature_Group_Create_Comments_Display()
        {
            testCaseId = "TC-20257";
            qTestUniqueId = "43564637";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneSysAdminCreateComments();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Create Comments_Editable
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_20258_PV_Customer_Inquiry_Feature_Group_Create_Comments_Editable()
        {
            testCaseId = "TC-20258";
            qTestUniqueId = "43564638";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCreateCommentsEditable();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Customer Inquiry Feature Group_Create Comments_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20259_PV_Customer_Inquiry_Feature_Group_Create_Comments_Neptune_System_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20259";
            qTestUniqueId = "43564639";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdmincreateCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Customer Inquiry Feature Group_Create Comments_Neptune CSR_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20260_PV_Customer_Inquiry_Feature_Group_Create_Comments_Neptune_CSR_Default_ON_Permission_On_Off_Permission_On_Off()
        {
            testCaseId = "TC-20260";
            qTestUniqueId = "43564640";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRcreateCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Customer Inquiry Feature Group_Create Comments_Utility Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20261_PV_Customer_Inquiry_Feature_Group_Create_Comments_Utility_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20261";
            qTestUniqueId = "43564641";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdmincreateCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Customer Inquiry Feature Group_Create Comments_Utility Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20262_PV_Customer_Inquiry_Feature_Group_Create_Comments_Utility_User_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20262";
            qTestUniqueId = "43564642";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUsercreateCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Permissions_Validation Customer Customer Inquiry Feature Group_Create Comments_Utility Meter Reader_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20263_PV_Customer_Inquiry_Feature_Group_Create_Comments_Utility_Meter_Reader_Default_Off_Permission_On_Off()
        {
            testCaseId = "TC-20263";
            qTestUniqueId = "43564643";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReadercreateCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Customer Inquiry Feature Group_Create Comments_Utility Read Only_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20264_PV_Customer_Inquiry_Feature_Group_Create_Comments_Utility_Read_Only_Default_Off_Permission_On_Off()
        {
            testCaseId = "TC-20264";
            qTestUniqueId = "43564644";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlycreateCommentsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Customer Inquiry Feature Group_Create Comments_Neptune 360 Partner_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20265_PV_Customer_Inquiry_Feature_Group_Create_Comments_Neptune_360_Partner_Default_Off_Permission_On_Off()
        {
            testCaseId = "TC-20265";
            qTestUniqueId = "43564645";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnercreateCommentsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Permissions_Validation Customer Customer Inquiry Feature Group_Create Comments_Neptune CSR_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20267_PV_Customer_Inquiry_Feature_Group_Create_Comments_Neptune_CSR_Default_Off_Permission_On_Off()
        {
            testCaseId = "TC-20267";
            qTestUniqueId = "43568764";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRcreateCommentsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Edit Comments_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_20268_PV_Customer_Inquiry_Feature_Group_Edit_Comments_Display()
        {
            testCaseId = "TC-20268";
            qTestUniqueId = "43568810";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateEditCommentsDisplay();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Edit Comments_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_20269_PV_Customer_Inquiry_Feature_Group_Edit_Comments_Display()
        {
            testCaseId = "TC-20269";
            qTestUniqueId = "43568811";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateEditCommentsEditable();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Edit Comments_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20270_PV_Customer_Inquiry_Feature_Group_Edit_Comments_Neptune_System_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20270";
            qTestUniqueId = "43568812";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminEditCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Edit Comments_Neptune CSR_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20271_PV_Customer_Inquiry_Feature_Group_Edit_Comments_Neptune_CSR_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20271";
            qTestUniqueId = "43568813";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSREditCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Edit Comments_Utility_Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20272_PV_Customer_Inquiry_Feature_Group_Edit_Comments_Utility_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20272";
            qTestUniqueId = "43568814";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminEditCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Edit Comments_Utility_Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20273_PV_Customer_Inquiry_Feature_Group_Edit_Comments_Utility_User_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20273";
            qTestUniqueId = "43568815";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserEditCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Edit Comments_Utility_Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20274_PV_Customer_Inquiry_Feature_Group_Edit_Comments_Utility_Meter_Reader_Default_Off_Permission_On_Off()
        {
            testCaseId = "TC-20274";
            qTestUniqueId = "43568816";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderEditCommentsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Edit Comments_Utility_Read_Only_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20275_PV_Customer_Inquiry_Feature_Group_Edit_Comments_Utility_Read_Only_Default_Off_Permission_On_Off()
        {
            testCaseId = "TC-20275";
            qTestUniqueId = "43568817";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyEditCommentsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Edit Comments_Neptune 360 Partner_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20276_PV_Customer_Inquiry_Feature_Group_Edit_Comments_Neptune_360_Partner_Default_Off_Permission_On_Off()
        {
            testCaseId = "TC-20276";
            qTestUniqueId = "43568818";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerEditCommentsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Edit Comments_Neptune Customer Support_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20277_PV_Customer_Inquiry_Feature_Group_Edit_Comments_Neptune_Customer_Support_Default_Off_Permission_On_Off()
        {
            testCaseId = "TC-20277";
            qTestUniqueId = "43568819";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCustSupportEditCommentsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_View Comments_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_20278_PV_Customer_Inquiry_Feature_Group_View_Comments_Display()
        {
            testCaseId = "TC-20278";
            qTestUniqueId = "43568932";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneSysAdminViewComments();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_View Comments_Editable
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_20279_PV_Customer_Inquiry_Feature_Group_View_Comments_Editable()
        {
            testCaseId = "TC-20279";
            qTestUniqueId = "43568933";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidatViewCommentsEditable();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_View Comments_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20280_PV_Customer_Inquiry_Feature_Group_View_Comments_Neptune_System_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20280";
            qTestUniqueId = "43568934";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminViewCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_View Comments_Neptune CSR_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20281_PV_Customer_Inquiry_Feature_Group_View_Comments_Neptune_CSR_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20281";
            qTestUniqueId = "43568935";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRViewCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_View Comments_Utility_Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20282_PV_Customer_Inquiry_Feature_Group_View_Comments_Utility_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20282";
            qTestUniqueId = "43568936";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminViewCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_View Comments_Utility_User_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20283_PV_Customer_Inquiry_Feature_Group_View_Comments_Utility_User_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20283";
            qTestUniqueId = "43568937";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserViewCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_View Comments_Utility_Meter_Reader_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20284_PV_Customer_Inquiry_Feature_Group_View_Comments_Utility_Meter_Reader_Default_Off_Permission_On_Off()
        {
            testCaseId = "TC-20284";
            qTestUniqueId = "43568938";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderViewCommentsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_View Comments_Utility_Read Only_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20285_PV_Customer_Inquiry_Feature_Group_View_Comments_Utility_Read_Only_Default_Off_Permission_On_Off()
        {
            testCaseId = "TC-20285";
            qTestUniqueId = "43568939";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyViewCommentsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_View Comments_Neptune 360 Partner_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20286_PV_Customer_Inquiry_Feature_Group_View_Comments_Neptune_360_Partner_Default_Off_Permission_On_Off()
        {
            testCaseId = "TC-20286";
            qTestUniqueId = "43568940";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerViewCommentsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_View Comments_Neptune CSR_Default_On
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20287_PV_Customer_Inquiry_Feature_Group_View_Comments_Neptune_CSR_Default_On_Permission_On_Off()
        {
            testCaseId = "TC-20287";
            qTestUniqueId = "43568941";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRViewCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Delete Own Comments_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_20288_PV_Customer_Inquiry_Feature_Group_Delete_Own_Comments_Display()
        {
            testCaseId = "TC-20288";
            qTestUniqueId = "43579283";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneSystemAdminDeleteOwnComm();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Delete Own Comments_Editable
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_20289_PV_Customer_Inquiry_Feature_Group_Delete_Own_Comments_Editable()
        {
            testCaseId = "TC-20289";
            qTestUniqueId = "43579284";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneSystemAdminDeleteOwnCommEditable();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Delete Own Comments_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20290_PV_Customer_Inquiry_Feature_Group_Delete_Own_Comments_Neptune_System_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20290";
            qTestUniqueId = "43579285";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Delete Own Comments_Neptune CSR_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20291_PV_Customer_Inquiry_Feature_Group_Delete_Own_Comments_Neptune_CSR_Default_OFF_Permission_On_Off()
        {
            testCaseId = "TC-20291";
            qTestUniqueId = "43579286";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRDeleteCommentsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Delete Own Comments_Utility Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20292_PV_Customer_Inquiry_Feature_Group_Delete_Own_Comments_Utility_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20292";
            qTestUniqueId = "43579287";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminDeleteCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Delete Own Comments_Utility User_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20293_PV_Customer_Inquiry_Feature_Group_Delete_Own_Comments_Utility_User_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20293";
            qTestUniqueId = "43579288";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserDeleteCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Delete Own Comments_Utility Meter Reader_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20294_PV_Customer_Inquiry_Feature_Group_Delete_Own_Comments_Utility_Meter_Reader_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20294";
            qTestUniqueId = "43579289";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderDeleteCommentsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Delete Own Comments_Utility Read Only_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20295_PV_Customer_Inquiry_Feature_Group_Delete_Own_Comments_Utility_Read_Only_Default_Off_Permission_On_Off()
        {
            testCaseId = "TC-20295";
            qTestUniqueId = "43579290";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyDeleteCommentsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Delete Own Comments_Neptune 360 Partner_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20296_PV_Customer_Inquiry_Feature_Group_Delete_Own_Comments_Neptune_360_Partner_Default_Off_Permission_On_Off()
        {
            testCaseId = "TC-20296";
            qTestUniqueId = "43579291";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerDeleteCommentsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Delete Own Comments_Neptune Customer Support_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20297_PV_Customer_Inquiry_Feature_Group_Delete_Own_Comments_Neptune_Customer_Support_Default_OFF_Permission_On_Off()
        {
            testCaseId = "TC-20297";
            qTestUniqueId = "43579294";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCustSupportDeleteCommentsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Delete Others Comments_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_20298_PV_Customer_Inquiry_Feature_Group_Delete_Others_Comments_Display()
        {
            testCaseId = "TC-20298";
            qTestUniqueId = "43580425";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDeleteOthersCommentsDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Delete Others Comments_Editable
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_20299_PV_Customer_Inquiry_Feature_Group_Delete_Others_Comments_Editable()
        {
            testCaseId = "TC-20299";
            qTestUniqueId = "43580426";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //     home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDeleteOthersCommentsEditable();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Delete Others Comments_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20300_PV_Customer_Inquiry_Feature_Group_Delete_Others_Comments_Neptune_System_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20300";
            qTestUniqueId = "43580427";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminDeleteOthersCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Delete Others Comments_Neptune CSR_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20301_PV_Customer_Inquiry_Feature_Group_Delete_Others_Comments_Neptune_CSR_Default_OFF_Permission_On_Off()
        {
            testCaseId = "TC-20301";
            qTestUniqueId = "43580428";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRDeleteOthersCommentsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Delete Others Comments_Utility Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20302_PV_Customer_Inquiry_Feature_Group_Delete_Others_Comments_Utility_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20302";
            qTestUniqueId = "43580429";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminDeleteOthersCommentsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Delete Others Comments_Utility User_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20303_PV_Customer_Inquiry_Feature_Group_Delete_Others_Comments_Utility_User_Default_Off_Permission_On_Off()
        {
            testCaseId = "TC-20303";
            qTestUniqueId = "43580430";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserDeleteOthersCommentsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Delete Others Comments_Utility Meter Reader_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20304_PV_Customer_Inquiry_Feature_Group_Delete_Others_Comments_Utility_Meter_Reader_Default_OFF_Permission_On_Off()
        {
            testCaseId = "TC-20304";
            qTestUniqueId = "43580431";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderDeleteOthersCommentsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Delete Others Comments_Utility Read Only_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20305_PV_Customer_Inquiry_Feature_Group_Delete_Others_Comments_Utility_Read_Only_Default_OFF_Permission_On_Off()
        {
            testCaseId = "TC-20305";
            qTestUniqueId = "43580432";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyDeleteOthersCommentsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Delete Others Comments_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20306_PV_Customer_Inquiry_Feature_Group_Delete_Others_Comments_Neptune360_Partner_Default_OFF_Permission_On_Off()
        {
            testCaseId = "TC-20306";
            qTestUniqueId = "43580433";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerDeleteOthersCommentsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation Customer Inquiry Feature Group_Delete Others Comments_Neptune Customer Support_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20307_PV_Customer_Inquiry_Feature_Group_Delete_Others_Comments_Neptune_Customer_Support_Default_OFF_Permission_On_Off()
        {
            testCaseId = "TC-20307";
            qTestUniqueId = "43580434";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCustSupportDeleteOthersCommentsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Reporting Feature Group_Soft Disconnect Report_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_20320_PV_Reporting_Feature_Group_Soft_Disconnect_Report_Display()
        {
            testCaseId = "TC-20320";
            qTestUniqueId = "43611490";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneSysAdminSoftDisconnectReport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Reporting Feature Group_Soft Disconnect Report_Editable
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_20321_PV_Reporting_Feature_Group_Soft_Disconnect_Report_Editable()
        {
            testCaseId = "TC-20321";
            qTestUniqueId = "43611491";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateSoftDisconnectReportEditable();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Reporting Feature Group_Soft Disconnect Report_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20322_PV_Reporting_Feature_Group_Soft_Disconnect_Report_Neptune_System_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20322";
            qTestUniqueId = "43611493";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateSysAdminSoftDisconnectReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Reporting Feature Group_Soft Disconnect Report_Neptune CSR Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20323_PV_Reporting_Feature_Group_Soft_Disconnect_Report_Neptune_CSR_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20323";
            qTestUniqueId = "43611494";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRSoftDisconnectReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Reporting Feature Group_Soft Disconnect Report_Utility Admin Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20324_PV_Reporting_Feature_Group_Soft_Disconnect_Report_Utility_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20324";
            qTestUniqueId = "43611495";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminSoftDisconnectReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Reporting Feature Group_Soft Disconnect Report_Utility User Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20325_PV_Reporting_Feature_Group_Soft_Disconnect_Report_Utility_User_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20325";
            qTestUniqueId = "43611496";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserSoftDisconnectReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Reporting Feature Group_Soft Disconnect Report_Utility Meter Reader_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20326_PV_Reporting_Feature_Group_Soft_Disconnect_Report_Utility_Meter_Reader_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20326";
            qTestUniqueId = "43611497";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderSoftDisconnectReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Reporting Feature Group_Soft Disconnect Report_Utility Read_Only_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20327_PV_Reporting_Feature_Group_Soft_Disconnect_Report_Utility_Read_Only_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20327";
            qTestUniqueId = "43611498";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlySoftDisconnectReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Reporting Feature Group_Soft Disconnect Report_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20339_PV_Reporting_Feature_Group_Soft_Disconnect_Report_Neptune_360_Partner_Default_OFF_Permission_On_Off()
        {
            testCaseId = "TC-20339";
            qTestUniqueId = "43611498";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerSoftDisconnectReportOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Reporting Feature Group_Days of Consecutive Flow (AMI) Report_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_20944_PV_Reporting_Feature_Group_Days_of_Consecutive_Flow_AMI_Report_Display()
        {
            testCaseId = "TC-20944";
            qTestUniqueId = "45813400";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDaysOfConsecutiveFlowAMI();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Reporting Feature Group_Days of Consecutive Flow (AMI) Report_Editable
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_20945_PV_Reporting_Feature_Group_Days_of_Consecutive_Flow_AMI_Report_Editable()
        {
            testCaseId = "TC-20945";
            qTestUniqueId = "45813401";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //     home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneSysAdminDaysOfConsecutiveFlowEditable();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Permissions_Validation_Reporting Feature Group_Days of Consecutive Flow (AMI) Report_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20946_Permissions_Validation_Reporting_Feature_Group_Days_of_Consecutive_Flow_AMI_Report_Neptune_System_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20946";
            qTestUniqueId = "45813402";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminDaysOfConsFlowOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation_Reporting Feature Group_Days of Consecutive Flow (AMI) Report_Neptune CSR_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20947_Permissions_Validation_Reporting_Feature_Group_Days_of_Consecutive_Flow_AMI_Report_Neptune_CSR_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20947";
            qTestUniqueId = "45813403";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRDaysOfConsFlowOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Reporting Feature Group_Days of Consecutive Flow (AMI) Report_Utility_Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20948_Permissions_Validation_Reporting_Feature_Group_Days_of_Consecutive_Flow_AMI_Report_Utility_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20948";
            qTestUniqueId = "45813404";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminDaysOfConsFlowOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Reporting Feature Group_Days of Consecutive Flow (AMI) Report_Utility_User_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20949_Permissions_Validation_Reporting_Feature_Group_Days_of_Consecutive_Flow_AMI_Report_Utility_User_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20949";
            qTestUniqueId = "45813405";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserDaysOfConsFlowOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Reporting Feature Group_Days of Consecutive Flow (AMI) Report_Utility_Meter Reader_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20950_Permissions_Validation_Reporting_Feature_Group_Days_of_Consecutive_Flow_AMI_Report_Utility_Meter_Reader_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20950";
            qTestUniqueId = "45813406";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderDaysOfConsFlowOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Reporting Feature Group_Days of Consecutive Flow (AMI) Report_Utility_Read Only_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20951_Permissions_Validation_Reporting_Feature_Group_Days_of_Consecutive_Flow_AMI_Report_Utility_Read_Only_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-20951";
            qTestUniqueId = "45813407";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyDaysOfConsFlowOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation_Reporting Feature Group_Days of Consecutive Flow (AMI) Report_Neptune360_Partner_Default_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_20952_Permissions_Validation_Reporting_Feature_Group_Days_of_Consecutive_Flow_AMI_Report_Neptune360_Partner_Default_Off_Permission_On_Off()
        {
            testCaseId = "TC-20952";
            qTestUniqueId = "45813408";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerDaysOfConsFlowOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions_Neptune Customer Support_User/Identity Management
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_21117_Roles_and_Permissions_Neptune_Customer_Support_User_Identity_Management()
        {
            testCaseId = "TC-21117";
            qTestUniqueId = "46131588";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //     home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Support");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUserManagementLeftNav();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions_Neptune Customer Support_Create User
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_21118_RP_Neptune_Customer_Support_Create_User()
        {
            testCaseId = "TC-21118";
            qTestUniqueId = "46131589";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                roleOption = testData["RoleOption"];
                //  home.NavigateToLftUserManagement(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Support");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCreateRoleButtonDoesNotExists();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions_Neptune Customer Support_Search User
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_21119_RP_Neptune_Customer_Support_Search_User()
        {
            testCaseId = "TC-21119";
            qTestUniqueId = "46131589";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //    home.NavigateToLftUserManagement(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Support");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateSearchUser(firstName);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions_Neptune Customer Support_edit User
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_21120_RP_Neptune_Customer_Support_Edit_User()
        {
            testCaseId = "TC-21120";
            qTestUniqueId = "46131591";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //   home.NavigateToLftUserManagement(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Support");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateEditUserNotExist();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions_Neptune Customer View User
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_21121_RP_Neptune_Customer_Support_View_User()
        {
            testCaseId = "TC-21121";
            qTestUniqueId = "46131592";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //  home.NavigateToLftUserManagement(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Support");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateViewUser();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Roles and Permissions_Neptune Customer Support_Deactivate User
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_21122_RP_Neptune_Customer_Support_Deactivate_User()
        {
            testCaseId = "TC-21122";
            qTestUniqueId = "46131593";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //     home.NavigateToLftUserManagement(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Support");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateInactiveUserDoesNotExist();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Roles and Permissions_Neptune Customer Support_Send Password Reset
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_21123_RP_Neptune_Customer_Support_Send_Password_Reset()
        {
            testCaseId = "TC-21123";
            qTestUniqueId = "46131594";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //  home.NavigateToLftUserManagement(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune Customer Support");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateSendPwdResetDoesNotExist();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Permissions_Validation_Left Navigation_Billing Services Settings_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_21144_PV_Left_Navigation_Billing_Services_Settings_Display()
        {
            testCaseId = "TC-21144";
            qTestUniqueId = "46191767";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateBillingServicesSettings();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation_Left Navigation_Billing Services Settings_Editable
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_21145_PV_Left_Navigation_Billing_Services_Settings_Editable()
        {
            testCaseId = "TC-21145";
            qTestUniqueId = "46191768";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateBillingServicesSettingsEditable();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_Billing Services Settings_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21146_PV_Left_Navigation_Billing_Services_Settings_Neptune_System_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-21146";
            qTestUniqueId = "46191769";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminBillingServSettingOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_Billing Services Settings_Neptune CSR_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21147_PV_Left_Navigation_Billing_Services_Settings_Neptune_CSR_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-21147";
            qTestUniqueId = "46191770";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRBillingServSettingOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_Billing Services Settings_Utility_Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21148_PV_Left_Navigation_Billing_Services_Settings_Utility_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-21148";
            qTestUniqueId = "46191771";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminBillingServSettingOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_Billing Services Settings_Utility_User_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21149_PV_Left_Navigation_Billing_Services_Settings_Utility_User_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-21149";
            qTestUniqueId = "46191772";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserBillingServSettingOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_Billing Services Settings_Utility_Meter_Reader_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21150_PV_Left_Navigation_Billing_Services_Settings_Utility_Meter_Reader_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-21150";
            qTestUniqueId = "46191773";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderBillingServSettingOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_Billing Services Settings_Utility_Read_Only_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21151_PV_Left_Navigation_Billing_Services_Settings_Utility_Read_Only_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-21151";
            qTestUniqueId = "46191774";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyBillingServSettingOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_Billing Services Settings_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21154_PV_Left_Navigation_Billing_Services_Settings_Neptune360_Partner_Default_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21154";
            qTestUniqueId = "46193806";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnetBillingServSettingOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Reporting Feature Group_Endpoint Maintenance Report_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_21329_PV_Reporting_Feature_Group_Endpoint_Maintenance_Report_Display()
        {
            testCaseId = "TC-21329";
            qTestUniqueId = "46823828";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateEndpointMaintenanceReport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation_Reporting Feature Group_Endpoint Maintenance Report_Editable
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_21330_PV_Reporting_Feature_Group_Endpoint_Maintenance_Report_Editable()
        {
            testCaseId = "TC-21330";
            qTestUniqueId = "46823829";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateEndpointMaintenanceReportEditable();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Reporting Feature Group_Endpoint Maintenance Report_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21331_PV_Reporting_Feature_Group_Endpoint_Maintenance_Report_Neptune_System_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-21331";
            qTestUniqueId = "46823830";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminEndpointMainenanceReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Permissions_Validation_Reporting Feature Group_Endpoint Maintenance Report_Neptune CSR_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21332_PV_Reporting_Feature_Group_Endpoint_Maintenance_Report_Neptune_CSR_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-21332";
            qTestUniqueId = "46823831";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSREndpointMainenanceReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Reporting Feature Group_Endpoint Maintenance Report_Utility_Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21333_PV_Reporting_Feature_Group_Endpoint_Maintenance_Report_Utility_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-21333";
            qTestUniqueId = "46823832";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminEndpointMainenanceReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation_Reporting Feature Group_Endpoint Maintenance Report_Utility_User_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21334_PV_Reporting_Feature_Group_Endpoint_Maintenance_Report_Utility_User_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-21334";
            qTestUniqueId = "46823833";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserEndpointMainenanceReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Reporting Feature Group_Endpoint Maintenance Report_Utility_Meter_Reader_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21335_PV_Reporting_Feature_Group_Endpoint_Maintenance_Report_Utility_Meter_Reader_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-21335";
            qTestUniqueId = "46823839";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderEndpointMainenanceReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Reporting Feature Group_Endpoint Maintenance Report_Utility_Read_Only_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21336_PV_Reporting_Feature_Group_Endpoint_Maintenance_Report_Utility_Read_Only_Default_ON()
        {
            testCaseId = "TC-21336";
            qTestUniqueId = "46823840";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyEndpointMainenanceReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Reporting Feature Group_Endpoint Maintenance Report_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21337_PV_Reporting_Feature_Group_Endpoint_Maintenance_Report_Neptune360_Partner_Default_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21337";
            qTestUniqueId = "46823841";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerEndpointMainenanceReportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Permissions_Validation_Left Navigation_Endpoint Management Left Navigation_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_21364_PV_Left_Navigation_Endpoint_Management_Left_Navigation_Display()
        {
            testCaseId = "TC-21364";
            qTestUniqueId = "47026572";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateEndpointMaintenanceLeftNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_CMIU FOTA Left Navigation_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_21365_PV_Left_Navigation_CMIU_FOTA_Left_Navigation_Display()
        {
            testCaseId = "TC-21365";
            qTestUniqueId = "47026573";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCMIUFOTALeftNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_MIU List Left Navigation_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_21366_PV_Left_Navigation_MIU_List_Left_Navigation_Display()
        {
            testCaseId = "TC-21366";
            qTestUniqueId = "47026574";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateMIUListLeftNavigation();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_CMIU FOTA Feature Block_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_21367_PV_CMIU_FOTA_Feature_Block_Display()
        {
            testCaseId = "TC-21367";
            qTestUniqueId = "47026575";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCMIUFOTAFeatureBlock();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_CMIU FOTA Feature Block_View CMIU FOTA_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_21368_PV_CMIU_FOTA_Feature_Block_View_CMIU_FOTA_Display()
        {
            testCaseId = "TC-21368";
            qTestUniqueId = "47026576";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCMIUFOTAFeatureBlock();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_CMIU FOTA Feature Block_Send Update_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_21369_PV_CMIU_FOTA_Feature_Block_Send_Update_Display()
        {
            testCaseId = "TC-21369";
            qTestUniqueId = "47026577";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateCMIUFOTAFeatureBlock();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_MIU List Feature Block_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_21370_PV_MIU_List_Feature_Block_Display()
        {
            testCaseId = "TC-21370";
            qTestUniqueId = "47026578";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateMIUListFeatureBlock();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_MIU List Feature Block_View MIU List_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_21371_PV_MIU_List_Feature_Block_View_MIU_List_Display()
        {
            testCaseId = "TC-21371";
            qTestUniqueId = "47026579";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateMIUListFeatureBlock();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_Endpoint Management Left Navigation_Neptune System Admin_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21372_PV_Left_Navigation_Endpoint_Management_Left_Navigation_Neptune_System_Admin_ON_Permission_On_off()
        {
            testCaseId = "TC-21372";
            qTestUniqueId = "47026580";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminEndpointManagementLeftNavOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_Endpoint Management Left Navigation_Utility Admin_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21373_PV_Left_Navigation_Endpoint_Management_Left_Navigation_Utility_Admin_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21373";
            qTestUniqueId = "47026651";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminEndpointManagementLeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_Endpoint Management Left Navigation_Neptune_CSR_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21374_PV_Left_Navigation_Endpoint_Management_Left_Navigation_Neptune_CSR_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21374";
            qTestUniqueId = "47026652";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSREndpointManagementLeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_Endpoint Management Left Navigation_Utility User_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21375_PV_Left_Navigation_Endpoint_Management_Left_Navigation_Utility_User_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21375";
            qTestUniqueId = "47026653";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserEndpointManagementLeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_Endpoint Management Left Navigation_Utility Read_Only_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21376_PV_Left_Navigation_Endpoint_Management_Left_Navigation_Utility_Read_Only_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21376";
            qTestUniqueId = "47026654";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyEndpointManagementLeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation_Left Navigation_Endpoint Management Left Navigation_Utility Meter Reader_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21377_PV_Left_Navigation_Endpoint_Management_Left_Navigation_Utility_Meter_Reader_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21377";
            qTestUniqueId = "47026655";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderEndpointManagementLeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_Endpoint Management Left Navigation_Neptune 360 Partner_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21378_PV_Left_Navigation_Endpoint_Management_Left_Navigation_Neptune360_Partner_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21378";
            qTestUniqueId = "47026656";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerEndpointManagementLeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_CMIU FOTA Left Navigation_Neptune 360 Partner_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21379_PV_Left_Navigation_CMIU_FOTA_Left_Navigation_Neptune_360_Partner_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21379";
            qTestUniqueId = "47026668";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerCMIUFOTALeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_CMIU FOTA Left Navigation_Utility Meter Reader_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21380_PV_Left_Navigation_CMIU_FOTA_Left_Navigation_Utility_Meter_Reader_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21380";
            qTestUniqueId = "47026669";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderCMIUFOTALeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_CMIU FOTA Left Navigation_Utility Read Only_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21381_PV_Left_Navigation_CMIU_FOTA_Left_Navigation_Utility_Read_Only_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21381";
            qTestUniqueId = "47026670";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyCMIUFOTALeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation_Left Navigation_CMIU FOTA Left Navigation_Utility User_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21382_PV_Left_Navigation_CMIU_FOTA_Left_Navigation_Utility_User_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21382";
            qTestUniqueId = "47026671";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserCMIUFOTALeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_CMIU FOTA Left Navigation_Neptune CSR_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21383_PV_Left_Navigation_CMIU_FOTA_Left_Navigation_Neptune_CSR_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21383";
            qTestUniqueId = "47026672";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRCMIUFOTALeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_CMIU FOTA Left Navigation_Utility Admin_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21384_PV_Left_Navigation_CMIU_FOTA_Left_Navigation_Utility_Admin_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21384";
            qTestUniqueId = "47026673";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminAdminCMIUFOTALeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_CMIU FOTA Left Navigation_Neptune System Admin_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21385_PV_Left_Navigation_CMIU_FOTA_Left_Navigation_Neptune_System_Admin_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21385";
            qTestUniqueId = "47026674";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminCMIUFOTALeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_MIU List Left Navigation_Neptune System Admin_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21386_PV_MIU_List_Left_Navigation_Neptune_System_Admin_ON_Permission_On_Off()
        {
            testCaseId = "TC-21386";
            qTestUniqueId = "47026691";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminMIUListLeftNavOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_MIU List Left Navigation_Utility_Admin_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21387_PV_MIU_List_Left_Navigation_Utility_Admin_Off_Permission_On_Off()
        {
            testCaseId = "TC-21387";
            qTestUniqueId = "47026692";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminMIUListLeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation_MIU List Left Navigation_Neptune_CSR_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21388_PV_MIU_List_Left_Navigation_Neptune_CSR_Off_Permission_On_Off()
        {
            testCaseId = "TC-21388";
            qTestUniqueId = "47026693";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRMIUListLeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_MIU List Left Navigation_Utility_User_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21389_PV_MIU_List_Left_Navigation_Utility_User_Off_Permission_On_Off()
        {
            testCaseId = "TC-21389";
            qTestUniqueId = "47026694";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserMIUListLeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_MIU List Left Navigation_Utility_Read_Only_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21390_PV_MIU_List_Left_Navigation_Utility_Read_Only_Off()
        {
            testCaseId = "TC-21390";
            qTestUniqueId = "47026695";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyMIUListLeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_MIU List Left Navigation_Utility_Meter Reader_Off
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21391_PV_MIU_List_Left_Navigation_Utility_Meter_Reader_Off_Permission_On_Off()
        {
            testCaseId = "TC-21391";
            qTestUniqueId = "47026696";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderMIUListLeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_MIU List Left Navigation_Neptune 360 Partner_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21392_PV_Left_Navigation_MIU_List_Left_Navigation_Neptune_360_Partner_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21392";
            qTestUniqueId = "47026697";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerMIUListLeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_CMIU FOTA Feature Block_View CMIU FOTA_Utility Admin_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21393_PV_CMIU_FOTA_Feature_Block_View_CMIU_FOTA_Utility_Admin_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21393";
            qTestUniqueId = "47026730";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminCMIUFotaLeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_CMIU FOTA Feature Block_View CMIU FOTA_Neptune CSR_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21394_PV_CMIU_FOTA_Feature_Block_View_CMIU_FOTA_Neptune_CSR_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21394";
            qTestUniqueId = "47026731";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRCMIUFotaLeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation_CMIU FOTA Feature Block_View CMIU FOTA_Utility_User_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21395_PV_CMIU_FOTA_Feature_Block_View_CMIU_FOTA_Utility_User_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21395";
            qTestUniqueId = "47026732";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserCMIUFotaLeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_CMIU FOTA Feature Block_View CMIU FOTA_Utility Read Only_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21396_PV_CMIU_FOTA_Feature_Block_View_CMIU_FOTA_Utility_Read_Only_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21396";
            qTestUniqueId = "47026733";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyCMIUFotaLeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_CMIU FOTA Feature Block_View CMIU FOTA_Utility Meter Reader_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21397_PV_CMIU_FOTA_Feature_Block_View_CMIU_FOTA_Utility_Meter_Reader_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21397";
            qTestUniqueId = "47026734";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderCMIUFotaLeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_CMIU FOTA Feature Block_View CMIU FOTA_Neptune 360 Partner_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21398_PV_CMIU_FOTA_Feature_Block_View_CMIU_FOTA_Neptune_360_Partner_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21398";
            qTestUniqueId = "47026735";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerCMIUFotaLeftNavOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_CMIU FOTA Feature Block_View CMIU FOTA Neptune System Admin_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21399_PV_CMIU_FOTA_Feature_Block_View_CMIU_FOTA_Neptune_System_Admin_ON_Permission_On_Off()
        {
            testCaseId = "TC-21399";
            qTestUniqueId = "47026737";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminCMIUFotaLeftNavOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_CMIU FOTA Feature Block_Send Update_Neptune System Admin_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21400_PV_CMIU_FOTA_Feature_Block_Send_Update_Neptune_System_Admin_ON_Permission_On_Off()
        {
            testCaseId = "TC-21400";
            qTestUniqueId = "47026796";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminSendUpdateOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Permissions_Validation_CMIU FOTA Feature Block_Send Update_Neptune 360 Partner_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21401_PV_CMIU_FOTA_Feature_Block_Send_Update_Neptune_360_Partner_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21401";
            qTestUniqueId = "47026797";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerSendUpdateOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_CMIU FOTA Feature Block_Send Update_Utility Meter Reader_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21402_PV_CMIU_FOTA_Feature_Block_Send_Update_Utility_Meter_Reader_OFF_permission_On_Off()
        {
            testCaseId = "TC-21402";
            qTestUniqueId = "47026798";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderSendUpdateOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_CMIU FOTA Feature Block_Send Update_Utility Read_Only_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21403_PV_CMIU_FOTA_Feature_Block_Send_Update_Utility_Read_Only_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21403";
            qTestUniqueId = "47026799";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlySendUpdateOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_CMIU FOTA Feature Block_Send Update_Utility User_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21404_PV_CMIU_FOTA_Feature_Block_Send_Update_Utility_User_OFF_Permission_On_Off_Permission_On_Off()
        {
            testCaseId = "TC-21404";
            qTestUniqueId = "47026800";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserSendUpdateOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_CMIU FOTA Feature Block_Send Update_Neptune CSR_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21405_PV_CMIU_FOTA_Feature_Block_Send_Update_Neptune_CSR_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21405";
            qTestUniqueId = "47026801";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRSendUpdateOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation CMIU FOTA Feature Block_Send Update_Utility Admin_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21406_PV_CMIU_FOTA_Feature_Block_Send_Update_Utility_Admin_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21406";
            qTestUniqueId = "47026802";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminSendUpdateOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation MIU List Feature Block_View MIU List_Neptune System Admin_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21407_PV_MIU_List_Feature_Block_View_MIU_List_Neptune_System_Admin_ON_Permission_On_Off()
        {
            testCaseId = "TC-21407";
            qTestUniqueId = "47026818";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminViewMIUListOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation MIU List Feature Block_View MIU List_Utility Admin_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21408_PV_MIU_List_Feature_Block_View_MIU_List_Utility_Admin_OFF_permission_On_Off()
        {
            testCaseId = "TC-21408";
            qTestUniqueId = "47026823";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminViewMIUListOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation MIU List Feature Block_View MIU List_Neptune CSR_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21409_PV_MIU_List_Feature_Block_View_MIU_List_Neptune_CSR_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21409";
            qTestUniqueId = "47026824";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRViewMIUListOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation MIU List Feature Block_View MIU List_Utility User_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21410_PV_MIU_List_Feature_Block_View_MIU_List_Utility_User_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21410";
            qTestUniqueId = "47026825";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserViewMIUListOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation MIU List Feature Block_View MIU List_Utility Read_Only_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21411_PV_MIU_List_Feature_Block_View_MIU_List_Utility_Read_Only_OFF_()
        {
            testCaseId = "TC-21411";
            qTestUniqueId = "47026826";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyViewMIUListOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation MIU List Feature Block_View MIU List_Utility Meter Reader_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21412_PV_MIU_List_Feature_Block_View_MIU_List_Utility_Meter_Reader_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21412";
            qTestUniqueId = "47026827";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderViewMIUListOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation MIU List Feature Block_View MIU List_Neptune 360 Partner_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21413_PV_MIU_List_Feature_Block_View_MIU_List_Neptune360_Partner_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21413";
            qTestUniqueId = "47026828";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerViewMIUListOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation Settings Feature Block_Lora Private Network Settings_Neptune System Admin_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21416_PV_Settings_Feature_Block_Lora_Private_Network_Settings_Neptune_System_Admin_ON_Permission_On_Off()
        {
            testCaseId = "TC-21416";
            qTestUniqueId = "47041424";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminLORAPrivateNetworkOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Settings Feature Block_Lora Private Network Settings_Utility Admin_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21417_PV_Settings_Feature_Block_Lora_Private_Network_Settings_Utility_Admin_ON_Permission_On_Off()
        {
            testCaseId = "TC-21417";
            qTestUniqueId = "47041425";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminLORAPrivateNetworkOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation Settings Feature Block_Lora Private Network Settings_Neptune CSR_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21418_PV_Settings_Feature_Block_Lora_Private_Network_Settings_Neptune_CSR_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21418";
            qTestUniqueId = "47041426";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRLORAPrivateNetworkOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Settings Feature Block_Lora Private Network Settings_Utility User_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21419_PV_Settings_Feature_Block_Lora_Private_Network_Settings_Utility_User_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21419";
            qTestUniqueId = "47041427";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserLORAPrivateNetworkOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Settings Feature Block_Lora Private Network Settings_Utility Read Only Access_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21420_PV_Settings_Feature_Block_Lora_Private_Network_Settings_Utility_Read_Only_Access_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21420";
            qTestUniqueId = "47041428";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyLORAPrivateNetworkOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Settings Feature Block_Lora Private Network Settings_Utility Meter Reader_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21421_PV_Settings_Feature_Block_Lora_Private_Network_Settings_Utility_Meter_Reader_OFF_Permission_On_Off()
        {
            testCaseId = "TC-21421";
            qTestUniqueId = "47041429";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderLORAPrivateNetworkOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Settings Feature Block_Lora Private Network Settings_Neptune 360 Partner_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_21422_PV_Settings_Feature_Block_Lora_Private_Network_Settings_Neptune360_Partner_OFF_permission_On_Off()
        {
            testCaseId = "TC-21422";
            qTestUniqueId = "47041430";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerLORAPrivateNetworkOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Settings Feature Block_Lora Private Network Settings _Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_21423_PV_Settings_Feature_Block_Lora_Private_Network_Settings_Display()
        {
            testCaseId = "TC-21423";
            qTestUniqueId = "47041431";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateLORAPrivateNetworkSettingsDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Settings Feature Block_Lora Private Network Settings _Display
        /// </summary>
        [Category("RolesAndPermissions_Obselete")]
        [Test]
        public void TC_22270_PV_Settings_Feature_Block_Lora_Private_Network_Settings_Display()
        {
            testCaseId = "TC-22270";
            qTestUniqueId = "48154698";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateLORAPrivateNetworkSettingsDisplayed();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Usage Plans_Edit Usage Plans_Neptune 360 Partner_Default_OFF
        /// </summary>
       /* [Category("RolesAndPermissions")]
        [Test]
        public void TC_15573_PV_Usage_Plans_Edit_Usage_Plans_Neptune360_Partner_Default_OFF()
        {
            testCaseId = "TC-15573";
            qTestUniqueId = "34517108";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune 360 Partner");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptune360PartnerEditUsagePlanOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }*/

        /// Test Method to Permissions_Validation CMIU FOTA Feature Block_Cancel Update_Neptune CSR_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22946_PV_CMIU_FOTA_Feature_Block_Cancel_Update_Neptune_CSR_OFF_Permission_On_Off()
        {
            testCaseId = "TC-22946";
            qTestUniqueId = "49736645";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRCancelUpdateOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation CMIU FOTA Feature Block_Cancel Update_Utility_admin_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22945_PV_CMIU_FOTA_Feature_Block_Cancel_Update_Utility_admin_OFF_Permission_On_Off()
        {
            testCaseId = "TC-22945";
            qTestUniqueId = "49736644";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminCancelUpdateOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation CMIU FOTA Feature Block_Cancel Update_Utility_User_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22947_PV_CMIU_FOTA_Feature_Block_Cancel_Update_Utility_User_OFF_Permission_On_Off()
        {
            testCaseId = "TC-22947";
            qTestUniqueId = "49736646";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserCancelUpdateOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation CMIU FOTA Feature Block_Cancel Update_Utility_Read_Only_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22948_PV_CMIU_FOTA_Feature_Block_Cancel_Update_Utility_Read_Only_OFF_Permission_On_Off()
        {
            testCaseId = "TC-22948";
            qTestUniqueId = "49736647";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyCancelUpdateOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Billing services Feature Block_View Import Rules_Neptune System Admin_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23024_PV_Billing_services_Feature_Block_View_Import_Rules_Neptune_System_Admin_ON_Permission_On_Off()
        {
            testCaseId = "TC-23024";
            qTestUniqueId = "49897957";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateImportRulesNeptuneSysAdminOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Billing services Feature Block_View Import Rules_Neptune 360 Partner_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23027_PV_Billing_services_Feature_Block_View_Import_Rules_Neptune360_Partner_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23027";
            qTestUniqueId = "49898401";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateImportRulesNeptune360PartnerOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Billing services Feature Block_View Import Rules_Utility Admin_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23028_PV_Billing_services_Feature_Block_View_Import_Rules_Utility_Admin_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23028";
            qTestUniqueId = "49898542";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateImportRulesUtilityAdminOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation Billing services Feature Block_View Import Rules_Utility user_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23029_PV_Billing_services_Feature_Block_View_Import_Rules_Utility_user_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23029";
            qTestUniqueId = "49898559";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateImportRulesUtilityUserOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Billing services Feature Block_View Import Rules_Utility Read only_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23030_PV_Billing_services_Feature_Block_View_Import_Rules_Utility_Read_only_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23030";
            qTestUniqueId = "49898560";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateImportRulesUtilityReadOnlyOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Billing services Feature Block_View Import Rules_Utility meter reader_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23031_PV_Billing_services_Feature_Block_View_Import_Rules_Utility_meter_reader_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23031";
            qTestUniqueId = "49898562";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateImportRulesUtilityMeterReaderOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation Billing services Feature Block_Edit Import Rules_Utility meter reader_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23032_PV_Billing_services_Feature_Block_Edit_Import_Rules_Utility_meter_reader_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23032";
            qTestUniqueId = "49898595";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditImportRulesUtilityMeterReaderOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Billing services Feature Block_Edit Import Rules_Utility Read only_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23033_PV_Billing_services_Feature_Block_Edit_Import_Rules_Utility_Read_only_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23033";
            qTestUniqueId = "49898596";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditImportRulesUtilityReadOnlyOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Billing services Feature Block_Edit Import Rules_Utility user_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23034_PV_Billing_services_Feature_Block_Edit_Import_Rules_Utility_user_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23034";
            qTestUniqueId = "49898597";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditImportRulesUtilityUserOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Billing services Feature Block_Edit Import Rules_Utility Admin_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23035_PV_Billing_services_Feature_Block_Edit_Import_Rules_Utility_Admin_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23035";
            qTestUniqueId = "49898598";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditImportRulesUtilityAdminOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Billing services Feature Block_Edit Import Rules_Neptune 360 Partner_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23036_PV_Billing_services_Feature_Block_Edit_Import_Rules_Neptune360_Partner_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23036";
            qTestUniqueId = "49898599";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditImportRulesNeptune360PartnerOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Billing services Feature Block_Edit Import Rules Neptune System Admin_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23037_PV_Billing_services_Feature_Block_Edit_Import_Rules_Neptune_System_Admin_ON_Permission_On_Off()
        {
            testCaseId = "TC-23037";
            qTestUniqueId = "49898600";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditImportRulesNeptuneSysAdminOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Billing services Feature Block_Edit Import Rules Neptune Customer Support Rep_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23117_PV_Billing_services_Feature_Block_Edit_Import_Rules_Neptune_Customer_Support_Rep_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23117";
            qTestUniqueId = "49957527";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditImportRulesNeptuneCSROff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation Billing services Feature Block_View Import Rules_Neptune Customer Support Rep_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23119_PV_Billing_services_Feature_Block_View_Import_Rules_Neptune_Customer_Support_Rep_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23119";
            qTestUniqueId = "49957529";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateviewImportRulesNeptuneCSROff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Billing services Feature Block_Edit Import Rules Neptune Field Service PM_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23121_PV_Billing_services_Feature_Block_Edit_Import_Rules_Neptune_Field_Service_PM_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23121";
            qTestUniqueId = "49957531";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditImportRulesNeptuneFieldServicePMOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Billing services Feature Block_Edit Import Rules Utility Administrator Beta_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23122_PV_Billing_services_Feature_Block_Edit_Import_Rules_Utility_Administrator_Beta_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23122";
            qTestUniqueId = "49957532";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditImportRulesUtilityAdminBetaOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Billing services Feature Block_Edit Import Rules Neptune 360 Essentials_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23120_PV_Billing_services_Feature_Block_Edit_Import_Rules_Neptune360_Essentials_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23120";
            qTestUniqueId = "49957530";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditImportRulesNeptune360EssentialsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Billing services Feature Block_Edit Import Rules Neptune customer support_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23124_PV_Billing_services_Feature_Block_Edit_Import_Rules_Neptune_customer_support_OFF_Permisssion_On_Off()
        {
            testCaseId = "TC-23124";
            qTestUniqueId = "49957534";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditImportRulesNeptuneCustSupportOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Billing services Feature Block_Edit Import Rules Mobile Application User_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23123_PV_Billing_services_Feature_Block_Edit_Import_Rules_Mobile_Application_User_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23123";
            qTestUniqueId = "49957533";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditImportRulesMobileApplicationUserOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Billing services Feature Block_View Import Rules_Neptune customer support
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23125_PV_Billing_services_Feature_Block_View_Import_Rules_Neptune_customer_support_Permission_On_Off()
        {
            testCaseId = "TC-23125";
            qTestUniqueId = "49957535";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateviewImportRulesNeptuneCustSupportOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Billing services Feature Block_View Import Rules_Mobile Application User_OFF
        /// </summary>
        [Category("RolesAndPermissions")]
        [Category("Rerun17")]
        [Test]
        public void TC_23126_PV_Billing_services_Feature_Block_View_Import_Rules_Mobile_Application_User_OFF()
        {
            testCaseId = "TC-23126";
            qTestUniqueId = "49957536";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateviewImportRulesMobileAppUserOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Billing services Feature Block_View Import Rules_Utility Administrator Beta_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23127_PV_Billing_services_Feature_Block_View_Import_Rules_Utility_Administrator_Beta_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23127";
            qTestUniqueId = "49957537";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateviewImportRulesUtilityAdminBetaOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Billing services Feature Block_View Import Rules_Neptune 360 Essentials_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23118_PV_Billing_services_Feature_Block_View_Import_Rules_Neptune360_Essentials_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23118";
            qTestUniqueId = "49957528";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateviewImportNeptune360EssentialsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation Billing services Feature Block_View Import Rules_Neptune Field Service PM_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23128_PV_Billing_services_Feature_Block_View_Import_Rules_Neptune_Field_Service_PM_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23128";
            qTestUniqueId = "49957538";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateviewImportNeptuneFieldServiceOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Permissions_Validation_CMIU FOTA Feature Block_Cancel Update_Neptune System Admin_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22932_PV_CMIU_FOTA_Feature_Block_Cancel_Update_Neptune_System_Admin_ON_Permission_On_Off()
        {
            testCaseId = "TC-22932";
            qTestUniqueId = "49727118";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateCancelUpdateOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Permissions_Validation_Days of Consecutive Flow (AMI) - Consumption Based Report_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_23228_PV_Days_of_Consecutive_Flow_AMI_Consumption_Based_Report_Display()
        {
            testCaseId = "TC-23228";
            qTestUniqueId = "50159297";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateConsecutiveFlowAMIConsBased();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Days of Consecutive Flow (AMI) - Consumption Based Report_Editable
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_23229_PV_Days_of_Consecutive_Flow_AMI_Consumption_Based_Report_Editable()
        {
            testCaseId = "TC-23229";
            qTestUniqueId = "50159298";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateDaysOfConsFlowAmiEditable();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Permissions_Billing services Feature Block_Edit Data Translations_Neptune System Admin_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23244_PV_Billing_services_Feature_Block_Edit_Data_Translations_Neptune_System_Admin_ON_Permission_On_Off()
        {
            testCaseId = "TC-23244";
            qTestUniqueId = "50191713";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditDataTranslationsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Billing services Feature Block_Edit Data Translations_Neptune Field Service PM_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23242_PV_Billing_services_Feature_Block_Edit_Data_Translations_Neptune_Field_Service_PM_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23242";
            qTestUniqueId = "50191711";
            startDate = DateTime.Now;
            try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditDataTranslationsOffNeptuneFeildService();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Billing services Feature Block_Edit Data Translations_Neptune 360 Partner_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23243_PV_Billing_services_Feature_Block_Edit_Data_Translations_Neptune_360_Partner_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23243";
            qTestUniqueId = "50191712";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditDataTranslationsOffNeptune360Partner();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Billing services Feature Block_Edit Data Translations_Neptune 360 Essentials_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23245_PV_Billing_services_Feature_Block_Edit_Data_Translations_Neptune_360_Essentials_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23245";
            qTestUniqueId = "50191714";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditDataTranslationsOffNeptune360Essentials();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Billing services Feature Block_Edit Data Translations_Utility Administrator Beta_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23246_PV_Billing_services_Feature_Block_Edit_Data_Translations_Utility_Administrator_Beta_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23246";
            qTestUniqueId = "50191715";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditDataTranslationsOffUtilityAdminBeta();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Billing services Feature Block_Edit Data Translations_Mobile Application User_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23247_PV_Billing_services_Feature_Block_Edit_Data_Translations_Mobile_Application_User_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23247";
            qTestUniqueId = "50191716";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditDataTranslationsOffMobileAppUser();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Billing services Feature Block_Edit Data Translations_Neptune customer support_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23248_PV_Billing_services_Feature_Block_Edit_Data_Translations_Neptune_Customer_Support_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23248";
            qTestUniqueId = "50191717";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditDataTranslationsOffNeptuneCustomerSupport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Billing services Feature Block_Edit Data Translations_Neptune customer support Rep_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23249_PV_Billing_services_Feature_Block_Edit_Data_Translations_Neptune_Customer_Support_Rep_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23249";
            qTestUniqueId = "50191718";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditDataTranslationsOffNeptuneCustomerSupport();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Billing services Feature Block_Edit Data Translations_Utility meter reader_OFF
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_23250_PV_Billing_services_Feature_Block_Edit_Data_Translations_Utility_Meter_Reader_OFF()
        {
            testCaseId = "TC-23250";
            qTestUniqueId = "50191719";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateEditDataTranslationsOffUtilityMeterReader();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Billing services Feature Block_Edit Data Translations_Utility Read only_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23251_PV_Billing_services_Feature_Block_Edit_Data_Translations_Utility_Read_only_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23251";
            qTestUniqueId = "50191720";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditDataTranslationsOffUtilityReadOnly();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Billing services Feature Block_Edit Data Translations_Utility User_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23252_PV_Billing_services_Feature_Block_Edit_Data_Translations_Utility_User_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23252";
            qTestUniqueId = "50191721";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditDataTranslationsOffUtilityUser();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Permissions_Billing services Feature Block_Edit Data Translations_Utility Admin_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23253_PV_Billing_services_Feature_Block_Edit_Data_Translations_Utility_Admin_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23253";
            qTestUniqueId = "50191722";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEditDataTranslationsOffUtilityAdmin();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Billing services Feature Block_Edit Data Translations_Displays
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_23255_PV_Billing_services_Feature_Block_Edit_Data_Translations_Displays()
        {
            testCaseId = "TC-23255";
            qTestUniqueId = "50191974";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateEditDataTranslationsDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Days of Consecutive Flow (AMI) - Consumption Based Report_Neptune Field Service PM_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23182_Permissions_Days_of_Consecutive_Flow_AMI_Consumption_Based_Report_Neptune_Field_Service_PM_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-23182";
            qTestUniqueId = "50068848";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateDaysOfConsFlowConsumptionNeptuneFeildServicePmON();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Days of Consecutive Flow (AMI) - Consumption Based Report_Neptune 360 Partner_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23183_Permissions_Days_of_Consecutive_Flow_AMI_Consumption_Based_Report_Neptune_360_Partner_Default_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23183";
            qTestUniqueId = "50068849";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateDaysOfConsFlowConsumptionNeptune360PartnerOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Permissions_Days of Consecutive Flow (AMI) - Consumption Based Report_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23184_Permissions_Days_of_Consecutive_Flow_AMI_Consumption_Based_Report_Neptune_System_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-23184";
            qTestUniqueId = "50068850";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateDaysOfConsFlowConsumptionNeptuneSysAdminOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Days of Consecutive Flow (AMI) - Consumption Based Report_Neptune 360 Essentials_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23185_Permissions_Days_of_Consecutive_Flow_AMI_Consumption_Based_Report_Neptune_360_Essentials_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-23185";
            qTestUniqueId = "50068851";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateDaysOfConsFlowConsumptionNeptune360EssentialsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Days of Consecutive Flow (AMI) - Consumption Based Report_Utility Administrator Beta_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23186_Permissions_Days_of_Consecutive_Flow_AMI_Consumption_Based_Report_Utility_Administrator_Beta_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-23186";
            qTestUniqueId = "50068852";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateDaysOfConsFlowConsumptionUtilityAdminBetaOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Permissions_Days of Consecutive Flow (AMI) - Consumption Based Report_Mobile Application User_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23187_Permissions_Days_of_Consecutive_Flow_AMI_Consumption_Based_Report_Mobile_Application_User_Default_OFF_Permission_On_Off()
        {
            testCaseId = "TC-23187";
            qTestUniqueId = "50068853";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateDaysOfConsFlowConsumptionMobileAppUserOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Days of Consecutive Flow (AMI) - Consumption Based Report_Neptune Customer Support_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23188_Permissions_Days_of_Consecutive_Flow_AMI_Consumption_Based_Report_Neptune_Customer_Support_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-23188";
            qTestUniqueId = "50068854";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateDaysOfConsFlowConsumptionNeptuneCustSupportON();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Days of Consecutive Flow (AMI) - Consumption Based Report_Neptune Customer Service_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23189_Permissions_Days_of_Consecutive_Flow_AMI_Consumption_Based_Report_Neptune_Customer_Service_Default_ON_Permission_On_Off()

        {
            testCaseId = "TC-23189";
            qTestUniqueId = "50068855";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateDaysOfConsFlowConsumptionNeptuneCustServiceON();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Days of Consecutive Flow (AMI) - Consumption Based Report_Utility meter Reader_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23190_Permissions_Days_of_Consecutive_Flow_AMI_Consumption_Based_Report_Utility_Meter_Reader_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-23190";
            qTestUniqueId = "50068856";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateDaysOfConsFlowConsumptionUtilityMeterReaderON();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Days of Consecutive Flow (AMI) - Consumption Based Report_Utility Read Only_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23191_Permissions_Days_of_Consecutive_Flow_AMI_Consumption_Based_Report_Utility_Read_Only_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-23191";
            qTestUniqueId = "50068857";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateDaysOfConsFlowConsumptionUtilityReadOnlyON();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Days of Consecutive Flow (AMI) - Consumption Based Report_Utility User_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23192_Permissions_Days_of_Consecutive_Flow_AMI_Consumption_Based_Report_Utility_User_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-23192";
            qTestUniqueId = "50068858";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateDaysOfConsFlowConsumptionUtilityUserON();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Days of Consecutive Flow (AMI) - Consumption Based Report_Utility User_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_23193_Permissions_Days_of_Consecutive_Flow_AMI_Consumption_Based_Report_Utility_User_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-23193";
            qTestUniqueId = "50068858";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateDaysOfConsFlowConsumptionUtilityUserON();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Reporting - Endpoint Consumption Report - Mobile Application User - Disabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22270_Neptune_360_Role_Management_Reporting_Endpoint_Consumption_Report_Mobile_Application_User_Disabled_Permission_On_Off()
        {
            testCaseId = "TC-22270";
            qTestUniqueId = "48154698";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEndpointConsumptionReportMobileAppUserOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Reporting - Endpoint Consumption Report - Edit - Enable Disable Toggle
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_22271_Neptune_360_Role_Management_Reporting_Endpoint_Consumption_Report_Edit_Enable_Disable_Toggle()
        {
            testCaseId = "TC-22271";
            qTestUniqueId = "48154699";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateEndpointConsumptionReportEditable();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Neptune 360 - Role Management - Reporting - Endpoint Consumption Report - Utility Read Only - Enabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22273_Neptune_360_Role_Management_Reporting_Endpoint_Consumption_Report_Utility_Read_Only_Enabled_Permission_On_Off()
        {
            testCaseId = "TC-22273";
            qTestUniqueId = "48154701";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEndpointConsumptionReportUtilityReadOnlyOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Reporting - Endpoint Consumption Report - Neptune Customer Support - Enabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22274_Neptune_360_Role_Management_Reporting_Endpoint_Consumption_Report_Neptune_Customer_Support_Enabled_Permission_On_Off()
        {
            testCaseId = "TC-22274";
            qTestUniqueId = "48154702";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEndpointConsumptionReportNeptuneCustSupportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Reporting - Endpoint Consumption Report - Utility Admin - Enabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22275_Neptune_360_Role_Management_Reporting_Endpoint_Consumption_Report_Utility_Admin_Enabled_Permission_On_Off()
        {
            testCaseId = "TC-22275";
            qTestUniqueId = "48154703";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEndpointConsumptionReportUtilityAdminOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Neptune 360 - Role Management - Reporting - Endpoint Consumption Report - Neptune Customer Service - Enabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22276_Neptune_360_Role_Management_Reporting_Endpoint_Consumption_Report_Neptune_Customer_Service_Enabled_Permission_On_Off()
        {
            testCaseId = "TC-22276";
            qTestUniqueId = "48154704";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEndpointConsumptionReportNeptuneCustServiceOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Reporting - Endpoint Consumption Report - Utility Admin Beta - Enabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22277_Neptune_360_Role_Management_Reporting_Endpoint_Consumption_Report_Utility_Admin_Beta_Enabled_Permission_On_Off()
        {
            testCaseId = "TC-22277";
            qTestUniqueId = "48154705";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEndpointConsumptionReportUtilityAdminBetaOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Reporting - Endpoint Consumption Report - Neptune 360 Essentials - Enabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22278_Neptune_360_Role_Management_Reporting_Endpoint_Consumption_Report_Neptune_360_Essentials_Enabled_Permission_On_Off()
        {
            testCaseId = "TC-22278";
            qTestUniqueId = "48154706";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEndpointConsumptionReportNeptune360EssentialsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Neptune 360 - Role Management - Reporting - Endpoint Consumption Report - Utility User  - Enabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22279_Neptune_360_Role_Management_Reporting_Endpoint_Consumption_Report_Utility_User_Enabled_Permission_On_Off()
        {
            testCaseId = "TC-22279";
            qTestUniqueId = "48154707";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEndpointConsumptionReportUtilityUserOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Reporting - Endpoint Consumption Report - Utility Meter Reader  - Enabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22280_Neptune_360_Role_Management_Reporting_Endpoint_Consumption_Report_Utility_Meter_Reader_Enabled_Permission_On_Off()
        {
            testCaseId = "TC-22280";
            qTestUniqueId = "48154708";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEndpointConsumptionReportUtilityMeterReaderOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Reporting - Endpoint Consumption Report - Neptune 360 Partner  - Disabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22281_Neptune_360_Role_Management_Reporting_Endpoint_Consumption_Report_Neptune_360_Partner_Disabled_Permission_On_Off()
        {
            testCaseId = "TC-22281";
            qTestUniqueId = "48154709";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEndpointConsumptionReportNeptune360PartnerOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Neptune 360 - Role Management - Reporting - Endpoint Consumption Report - Neptune Field Service PM - Enabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22282_Neptune_360_Role_Management_Reporting_Endpoint_Consumption_Report_Neptune_Field_Service_PM_Enabled_Permission_On_Off()
        {
            testCaseId = "TC-22282";
            qTestUniqueId = "48154710";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEndpointConsumptionReportNeptuneFieldServicePMOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Neptune 360 - Role Management - Reporting - Endpoint Consumption Report - Neptune Sys Admin- Enabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22283_Neptune_360_Role_Management_Reporting_Endpoint_Consumption_Report_Neptune_Sys_Admin_Enabled_Permission_On_Off()
        {
            testCaseId = "TC-22283";
            qTestUniqueId = "48154711";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateEndpointConsumptionReportNeptuneSysAdminOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Mobile Application User - Reporting Permission Block - Reverse Flow Report - Disabled
        /// </summary>
        [Category("RolesAndPermissions_Obsolete")]
        [Test]
        public void TC_22882_Neptune_360_Role_Management_Mobile_Application_User_Reporting_Permission_Block_Reverse_Flow_Report_Disabled()
        {
            testCaseId = "TC-22882";
            qTestUniqueId = "49571353";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateBlockReverseFlowReportMobileAppUserOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Neptune Field Customer PM - Reporting Permission Block - Reverse Flow Report - Enabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22883_Neptune_360_Role_Management_Neptune_Field_Customer_PM_Reporting_Permission_Block_Reverse_Flow_Report_Enabled_Permission_On_Off()
        {
            testCaseId = "TC-22883";
            qTestUniqueId = "49571354";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateBlockReverseFlowReportNeptuneFieldServicePMOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Neptune Field Service PM - Reporting Permission Block - Reverse Flow Report - Enabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22884_Neptune_360_Role_Management_Neptune_Field_Service_PM_Reporting_Permission_Block_Reverse_Flow_Report_Enabled_Permisssion_On_Off()
        {
            testCaseId = "TC-22884";
            qTestUniqueId = "49571355";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateBlockReverseFlowReportNeptuneCustServiceOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Neptune 360 - Role Management - Neptune Customer Support- Reporting Permission Block - Reverse Flow Report - Enabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22885_Neptune_360_Role_Management_Neptune_Customer_Support_Reporting_Permission_Block_Reverse_Flow_Report_Enabled_Permission_On_Off()
        {
            testCaseId = "TC-22885";
            qTestUniqueId = "49571356";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateBlockReverseFlowReportNeptuneCustSupportOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Reporting Permission Block - Reverse Flow Report - Edit
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_22886_Neptune_360_Role_Management_Reporting_Permission_Block_Reverse_Flow_Report_Edit()
        {
            testCaseId = "TC-22886";
            qTestUniqueId = "49571357";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateReverseFlowReportEditable();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Utility Meter Reader - Reporting Permission Block - Reverse Flow Report - Enabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22887_Neptune_360_Role_Management_Utility_Meter_Reader_Reporting_Permission_Block_Reverse_Flow_Report_Enabled_Permission_On_Off()
        {
            testCaseId = "TC-22887";
            qTestUniqueId = "49571358";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateBlockReverseFlowReportUtilityMeterReaderOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Neptune 360 Essentials - Reporting Permission Block - Reverse Flow Report - Enabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22888_Neptune_360_Role_Management_Neptune_360_Essentials_Reporting_Permission_Block_Reverse_Flow_Report_Enabled_Permission_On_Off()
        {
            testCaseId = "TC-22888";
            qTestUniqueId = "49571359";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateBlockReverseFlowReportNeptune360EssentialsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management -Utility Admin- Reporting Permission Block - Reverse Flow Report - Enabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22889_Neptune_360_Role_Management_Utility_Admin_Reporting_Permission_Block_Reverse_Flow_Report_Enabled_Permission_On_Off()
        {
            testCaseId = "TC-22889";
            qTestUniqueId = "49571360";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateBlockReverseFlowReportUtilityAdminOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management -Neptune Sys Admin- Reporting Permission Block - Reverse Flow Report - Enabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22890_Neptune_360_Role_Management_Neptune_Sys_Admin_Reporting_Permission_Block_Reverse_Flow_Report_Enabled_Permission_On_off()
        {
            testCaseId = "TC-22890";
            qTestUniqueId = "49571361";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateBlockReverseFlowReportNeptuneSysAdminOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management Utility Read Only- Reporting Permission Block - Reverse Flow Report - Enabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22891_Neptune_360_Role_Management_Utility_Read_Only_Reporting_Permission_Block_Reverse_Flow_Report_Enabled_Permission_On_Off()
        {
            testCaseId = "TC-22891";
            qTestUniqueId = "49571362";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateBlockReverseFlowReportUtilityReadOnlyOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management Utility Admin Beta- Reporting Permission Block - Reverse Flow Report - Enabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22892_Neptune_360_Role_Management_Utility_Admin_Beta_Reporting_Permission_Block_Reverse_Flow_Report_Enabled()
        {
            testCaseId = "TC-22892";
            qTestUniqueId = "49571363";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateBlockReverseFlowReportUtilityAdminBetaOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management Utility User- Reporting Permission Block - Reverse Flow Report - Enabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22893_Neptune_360_Role_Management_Utility_User_Reporting_Permission_Block_Reverse_Flow_Report_Enabled_Permission_On_Off()
        {
            testCaseId = "TC-22893";
            qTestUniqueId = "49571364";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateBlockReverseFlowReportUtilityUserOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Neptune 360 - Role Management Neptune 360 Partner - Reporting Permission Block - Reverse Flow Report - Enabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_22894_Neptune_360_Role_Management_Neptune_360_Partner_Reporting_Permission_Block_Reverse_Flow_Report_Enabled_Permission_On_Off()
        {
            testCaseId = "TC-22894";
            qTestUniqueId = "49571365";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateBlockReverseFlowReportNeptune360PartnerOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Neptune 360 - Role Management - Reporting Permission Block - Reverse Flow Report 
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_22895_Neptune_360_Role_Management_Reporting_Permission_Block_Reverse_Flow_Report()
        {
            testCaseId = "TC-22895";
            qTestUniqueId = "49571366";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateReverseFlowReportDisplays();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Groups_Manage Group Endpoints_Utility Admin_Default_ON 
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18187_Permissions_Validation_Groups_Manage_Group_Endpoints_Utility_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18187";
            qTestUniqueId = "39088156";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminManageGroupEndpointOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Groups_Manage Group Endpoints_Utility User_Default_OFF 
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18188_Permissions_Validation_Groups_Manage_Group_Endpoints_Utility_User_Default_OFF_Permission_On_Off()
        {
            testCaseId = "TC-18188";
            qTestUniqueId = "39088157";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserManageGroupEndpointOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Groups_Manage Group Endpoints_Utility Meter Reader_Default_OFF 
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18190_Permissions_Validation_Groups_Manage_Group_Endpoints_Utility_Meter_Reader_Default_OFF_Permission_On_Off()
        {
            testCaseId = "TC-18190";
            qTestUniqueId = "39088159";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderManageGroupEndpointOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Groups_Delete Groups_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18191_Permissions_Validation_Groups_Delete_Groups_Neptune_System_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18191";
            qTestUniqueId = "39088269";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminDeleteGroupsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Permissions_Validation_Groups_Delete Groups_Neptune CSR_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18192_Permissions_Validation_Groups_Delete_Groups_Neptune_CSR_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18192";
            qTestUniqueId = "39088270";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRDeleteGroupsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Permissions_Validation_Groups_Delete Groups_Utility Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18193_Permissions_Validation_Groups_Delete_Groups_Utility_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18193";
            qTestUniqueId = "39088271";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminDeleteGroupsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Groups_Delete Groups_Utility User_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18194_Permissions_Validation_Groups_Delete_Groups_Utility_User_Default_OFF_Permission_On_Off()
        {
            testCaseId = "TC-18194";
            qTestUniqueId = "39088272";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserDeleteGroupsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Groups_Delete Groups_Utility Read Only_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18195_Permissions_Validation_Groups_Delete_Groups_Utility_Read_Only_Default_OFF_Permission_On_Off()
        {
            testCaseId = "TC-18195";
            qTestUniqueId = "39088273";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyDeleteGroupsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Permissions_Validation_Groups_Delete Groups_Utility Meter Reader_Default_OFF
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18196_Permissions_Validation_Groups_Delete_Groups_Utility_Meter_Reader_Default_OFF_Permission_On_Off()
        {
            testCaseId = "TC-18196";
            qTestUniqueId = "39088274";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderDeleteGroupsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Groups_View Groups_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18197_Permissions_Validation_Groups_View_Groups_Neptune_System_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18197";
            qTestUniqueId = "39088393";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminViewGroupsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Permissions_Validation_Groups_View Groups_Neptune CSR_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18198_Permissions_Validation_Groups_View_Groups_Neptune_CSR_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18198";
            qTestUniqueId = "39088394";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneCSRViewGroupsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Groups_View Groups Utility Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18199_Permissions_Validation_Groups_View_Groups_Utility_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18199";
            qTestUniqueId = "39088395";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityAdminViewGroupsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Groups_View Groups Utility User_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18200_Permissions_Validation_Groups_View_Groups_Utility_User_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18200";
            qTestUniqueId = "39088396";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserViewGroupsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Groups_View Groups Utility Read Only Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18201_Permissions_Validation_Groups_View_Groups_Utility_Read_Only_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18201";
            qTestUniqueId = "39088397";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityReadOnlyViewGroupsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Groups_View Groups Utility Read Only_Default ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18202_Permissions_Validation_Groups_View_Groups_Utility_Meter_Reader_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18202";
            qTestUniqueId = "39088398";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityMeterReaderViewGroupsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_Left Navigation_NSP DB Conversion_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_18210_Permissions_Validation_Left_Navigation_NSP_DB_Conversion_Display()
        {
            testCaseId = "TC-18210";
            qTestUniqueId = "39336822";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNSPDBConversionDisplay();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_NSP DB Conversion_Feature Group_Display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_18211_Permissions_Validation_NSP_DB_Conversion_Feature_Group_Display()
        {
            testCaseId = "TC-18211";
            qTestUniqueId = "39336823";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNSPDBConversionDisplay();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }
        /// Test Method to Permissions_Validation_Left Navigation_NSP DB Conversion_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18212_Permissions_Validation_Left_Navigation_NSP_DB_Conversion_Neptune_System_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18212";
            qTestUniqueId = "39336827";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNSPDBConversionDisplay();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Validation_NSP DB Conversion _View NSP DB Conversion_Neptune System Admin_Default_ON
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18213_Permissions_Validation_NSP_DB_Conversion_View_NSP_DB_Conversion_Neptune_System_Admin_Default_ON_Permission_On_Off()
        {
            testCaseId = "TC-18213";
            qTestUniqueId = "39336830";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptuneSysAdminViewNSPDBConversionOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Permissions - Neptune 360 Partner - Settings - Edit Settings - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18301_Neptune360_Role_Management_Permissions_Neptune360_Partner_Settings_Edit_Settings_Default_Permission_On_Off()
        {
            testCaseId = "TC-18301";
            qTestUniqueId = "39463239";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerEditSettingsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Permissions - Neptune 360 Partner - Settings - Edit Settings - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18302_Neptune360_Role_Management_Permissions_Neptune360_Partner_Settings_View_Settings_Default_Permission_On_Off()
        {
            testCaseId = "TC-18302";
            qTestUniqueId = "39463255";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateNeptune360PartnerViewSettingsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Permissions - Neptune Field Service PM  - Settings - Edit Settings - Default
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_18303_Neptune360_Role_Management_Permissions_Neptune_Field_Service_PM_Settings_Edit_Settings_Default()
        {
            testCaseId = "TC-18303";
            qTestUniqueId = "39463272";
            startDate = DateTime.Now;
            try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneFeildServicePMEditSettingsDefault();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Permissions - Neptune Field Service PM  - Settings - View Settings - Default
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_18304_Neptune360_Role_Management_Permissions_Neptune_Field_Service_PM_Settings_View_Settings_Default()
        {
            testCaseId = "TC-18304";
            qTestUniqueId = "39463309";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneFeildServicePMViewSettingsDefault();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Permissions - Neptune Sys Admin- Settings - View Settings - Default
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_18305_Neptune360_Role_Management_Permissions_Neptune_Sys_Admin_Settings_Edit_Settings_Default()
        {
            testCaseId = "TC-18305";
            qTestUniqueId = "39463335";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneSysAdminEditSettingsDefault();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Permissions - Neptune Sys Admin- Settings - View Settings - Default
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_18306_Neptune360_Role_Management_Permissions_Neptune_Sys_Admin_Settings_View_Settings_Default()
        {
            testCaseId = "TC-18306";
            qTestUniqueId = "39463380";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneSysAdminViewSettingsDefault();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Permissions - Settings - Edit Settings
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_18307_Neptune360_Role_Management_Permissions_Settings_Edit_Settings()
        {
            testCaseId = "TC-18307";
            qTestUniqueId = "39463402";
            startDate = DateTime.Now;
            try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneSysAdminViewSettingsDefault();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Permissions - Settings - Edit Settings
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_18308_Neptune360_Role_Management_Permissions_Settings_Edit_Settings()
        {
            testCaseId = "TC-18308";
            qTestUniqueId = "39463411";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneSysAdminViewSettingsDefault();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Neptune 360 - Role Management - Permissions - Utility Admin - Settings - Edit Settings - Default
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_18309_Neptune360_Role_Management_Permissions_Utility_Admin_Settings_Edit_Settings_Default()
        {
            testCaseId = "TC-18309";
            qTestUniqueId = "39463416";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUtilityAdminAdminEditSettingsDefault();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Permissions - Utility Admin - Settings - View Settings - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18310_Neptune360_Role_Management_Permissions_Utility_Admin_Settings_View_Settings_Default()
        {
            testCaseId = "TC-18310";
            qTestUniqueId = "39463421";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUtilityAdminAdminViewSettingsDefault();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Permissions - Utility Admin Beta- Settings - Edit Settings - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18311_Neptune360_Role_Management_Permissions_Utility_Admin_Beta_Settings_Edit_Settings_Default()
        {
            testCaseId = "TC-18311";
            qTestUniqueId = "39463425";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUtilityAdminBetaAdminEditSettingsDefault();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Permissions - Utility Admin Beta- Settings - View Settings - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18312_Neptune360_Role_Management_Permissions_Utility_Admin_Beta_Settings_View_Settings_Default()
        {
            testCaseId = "TC-18312";
            qTestUniqueId = "39463432";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();                                                                                                                                                                                                                                  
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                rolesPermissons.ValidateUtilityAdminBetaAdminViewSettingsDefault();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Permissions - Utility Meter Reader- Settings - Edit Settings - Default
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_18313_Neptune360_Role_Management_Permissions_Utility_Meter_Reader_Settings_Edit_Settings_Default()
        {
            testCaseId = "TC-18313";
            qTestUniqueId = "39463439";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUtilityMeterReaderAdminEditSettingsDefault();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Permissions - Utility Meter Reader- Settings - View Settings - Default
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_18314_Neptune360_Role_Management_Permissions_Utility_Meter_Reader_Settings_View_Settings_Default()
        {
            testCaseId = "TC-18314";
            qTestUniqueId = "39463443";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                firstName = testData["FirstName"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUtilityMeterReaderAdminViewSettingsDefault();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Permissions - Utility Read Only- Settings - edit Settings - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18315_Neptune360_Role_Management_Permissions_Utility_Read_Only_Settings_Edit_Settings_Default()
        {
            testCaseId = "TC-18315";
            qTestUniqueId = "39463459";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUtilityReadOnlyAdminEditSettingsDefault();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Permissions - Utility Read Only- Settings - view Settings - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18316_Neptune360_Role_Management_Permissions_Utility_Read_Only_Settings_View_Settings_Default()
        {
            testCaseId = "TC-18316";
            qTestUniqueId = "39463462";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //  home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Read Only Access");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUtilityReadOnlyAdminViewSettingsDefault();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


        /// Test Method to Neptune 360 - Role Management - Permissions - Utility User Settings - edit Settings - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18317_Neptune360_Role_Management_Permissions_Utility_User_Settings_Edit_Settings_Default()
        {
            testCaseId = "TC-18317";
            qTestUniqueId = "39463471";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUtilityUserEditSettingsDefault();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Neptune 360 - Role Management - Permissions - Utility User Settings - edit Settings - Default
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_18318_Neptune360_Role_Management_Permissions_Utility_User_Settings_Edit_Settings_Default()
        {
            testCaseId = "TC-18318";
            qTestUniqueId = "39463471";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                // home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility User");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUtilityUserEditSettingsDefault();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions Validation_Customer Inquiry_Initiate Refresh Reads_Utility Meter Reader_On
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_13484_Permissions_Validation_Customer_Inquiry_Initiate_Refresh_Reads_Utility_Meter_Reader_On()
        {
            testCaseId = "TC-13484";
            qTestUniqueId = "29276675";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                miuId = testData["MiuID"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Utility Meter Reader");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                customerInquiry.ValidateRefreshReadsDisplayed(miuId);
               
                home.UserLogOut();
              QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Role & Permissions: UI - Customer Inquiry Block - Soft Disconnect
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_3831_Role_Permissions_UI_Customer_Inquiry_Block_Soft_Disconnect()
        {
            testCaseId = "TC-3831";
            qTestUniqueId = "19317426";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                miuId = testData["MiuID"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                customerInquiry.ValidateSoftDisconnect(miuId);
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Billing services Feature Block_View FTP Credentials_Utility user_Enabled
        /// </summary>
        [Category("RolesAndPermissions_NonRegression")]
        [Test]
        public void TC_24359_Permissions_Billing_services_Feature_Block_View_FTP_Credentials_Utility_user_Enabled_Permission_On_Off()
        {
            testCaseId = "TC-24359";
            qTestUniqueId = "52288436";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                home.NavigateToHome(url, userName, password);
                rolesPermissons.ValidateUtilityUserViewFTPCredentialsOff();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Permissions_Billing services Feature Block_View FTP Credentials_Neptune Admin_Enabled
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_24360_Permissions_Billing_services_Feature_Block_View_FTP_Credentials_Neptune_Admin_Enabled_Permission_On_Off()
        {
            testCaseId = "TC-24360";
            qTestUniqueId = "52288458";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateNeptuneAdminViewFTPCredentialsOn();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Role & Permissions: UI - Edit Role, Role Management screen display
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_3842_RnPermissions_UI_Edit_Role_Role_Management_screen_display()
        {
            testCaseId = "TC-3842";
            qTestUniqueId = "19317437";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateRoleManagementScreenDisplay();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Role & Permissions: UI - Edit Role
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_3843_RnPermissions_UI_Edit_Role()
        {
            testCaseId = "TC-3843";
            qTestUniqueId = "19317438";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //     home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateRoleManagementScreenEdit();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Role & Permissions: UI - Edit Role Update Neptune Only field
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_3844_RnPermissions_UI_Edit_Role_Update_Neptune_Only_field()
        {
            testCaseId = "TC-3844";
            qTestUniqueId = "19317439";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //   home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUpdateNeptuneOnlyFeild();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }

        /// Test Method to Role & Permissions: UI - Edit Role Update Features
        /// </summary>
        [Category("RolesAndPermissions")]
        [Test]
        public void TC_3845_RnPermissions_UI_Edit_Role_Update_Features()
        {
            testCaseId = "TC-3845";
            qTestUniqueId = "19317440";
            startDate = DateTime.Now; try
            {
                Dictionary<string, string> testData = TestDataFromExcel(testCaseId);
                url = testData["URL"];
                userName = testData["UserName"];
                password = testData["Password"];
                //    home.NavigateToHome(url, userName, password);
                home.NavigateToLftUserManagement(url, userName, password);
                userManagement.SelectUserRole("testneptuneauto1@gmail.com", "Neptune System Administrator");
                home.UserLogOut();
                home.NavigateToHome(url, "testneptuneauto1@gmail.com", "Automation#123", false);
                rolesPermissons.ValidateUpdateFeatures();
                home.UserLogOut();
                QTest.PublishQtestResults(qTestUniqueId, ReporterFactory.TestReport.Status.ToString(), startDate, DateTime.Now);
            }
            catch (Exception ex)
            {
                ReporterFactory.LogFailure("Test Failed - " + ex.Message+ex.StackTrace, EngineSetup.GetScreenShotPath(), false);
                QTest.PublishQtestResults(qTestUniqueId, "Fail", startDate, DateTime.Now);
                Assert.Fail(ex.Message);
            }
        }


    }
}


