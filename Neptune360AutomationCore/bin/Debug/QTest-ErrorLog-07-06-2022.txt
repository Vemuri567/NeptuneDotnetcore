==============Error in http POST request=======07-06-2022 10:33:22=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 17365167-7713-4375-9402-bb9bcd7c7ef0
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-06-2022 10:34:55=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer fce76d11-982e-4f82-b0c8-f71f8fae0752
Json Content:{"name":"Permissions_Validation_Reporting Feature Group_Inactive Flow Report_Utility Read Only_Default_ON","test_case":{"id":42377200}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-06-2022 10:34:55=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-06-2022 11:16:18=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295350736/test-logs
Auth Header:bearer f3abc81e-b79d-4f14-a1be-2f634e4f0373
Json Content:{"exe_start_date": "2022-07-06T11:14:56+05:30", "exe_end_date": "2022-07-06T11:15:54+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-06-2022 11:16:19=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer f3abc81e-b79d-4f14-a1be-2f634e4f0373
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-06-2022 11:22:31=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295357169/test-logs
Auth Header:bearer 307e4881-df82-40e9-95fd-f66c9bfa4f1e
Json Content:{"exe_start_date": "2022-07-06T11:20:25+05:30", "exe_end_date": "2022-07-06T11:22:14+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":"PCFET0NUWVBFIGh0bWw+PGh0bWw+ICAgIDxoZWFkPiAgICA8bWV0YSBjaGFyc2V0PSdVVEYtOCcgLz4gICAgPG1ldGEgbmFtZT0nZGVzY3JpcHRpb24nIGNvbnRlbnQ9JycgLz4gICAgPG1ldGEgbmFtZT0ncm9ib3RzJyBjb250ZW50PSdub29kcCwgbm95ZGlyJyAvPiAgICA8bWV0YSBuYW1lPSd2aWV3cG9ydCcgY29udGVudD0nd2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEnIC8+ICAgIDxsaW5rIGhyZWY9J2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Tb3VyY2UrU2FucytQcm86NDAwLDYwMCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+ICAgIDxsaW5rIGhyZWY9Imh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vaWNvbj9mYW1pbHk9TWF0ZXJpYWwrSWNvbnMiIHJlbD0ic3R5bGVzaGVldCI+ICAgIDxsaW5rIGhyZWY9J2h0dHBzOi8vY2RuLnJhd2dpdC5jb20vYW5zaG9vYXJvcmEvZXh0ZW50cmVwb3J0cy1jc2hhcnAvM2I2Y2MwNGZkMjQxYjk3ODI2MDZlNTdmYzVlODRmMGU0MjE3MmMwOC9kaXN0L2Nzcy9leHRlbnQuY3NzJyB0eXBlPSd0ZXh0L2NzcycgcmVsPSdzdHlsZXNoZWV0JyAvPiAgICA8dGl0bGU+RXh0ZW50PC90aXRsZT48L2hlYWQ+ICAgIAk8Ym9keSBjbGFzcz0nZXh0ZW50IGRhcmsgZGVmYXVsdCBoaWRlLW92ZXJmbG93ICc+CQk8ZGl2IGlkPSd0aGVtZS1zZWxlY3RvcicgYWx0PSdDbGljayB0byB0b2dnbGUgdGhlbWUuIFRvIGVuYWJsZSBieSBkZWZhdWx0LCB1c2UgdGhlbWUgY29uZmlndXJhdGlvbi4nIHRpdGxlPSdDbGljayB0byB0b2dnbGUgdGhlbWUuIFRvIGVuYWJsZSBieSBkZWZhdWx0LCB1c2UgdGhlbWUgY29uZmlndXJhdGlvbi4nPgkJCTxzcGFuPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+ZGVza3RvcF93aW5kb3dzPC9pPjwvc3Bhbj4JCTwvZGl2PgkJPG5hdj4gICAgPGRpdiBjbGFzcz0ibmF2LXdyYXBwZXIiPiAgICAgICAgPGEgaHJlZj0iaHR0cDovL2V4dGVudHJlcG9ydHMucmVsZXZhbnRjb2Rlcy5jb20iIGNsYXNzPSJicmFuZC1sb2dvIGJsdWUgZGFya2VuLTMiPkV4dGVudDwvYT4gICAgICAgIDwhLS0gc2xpZGVvdXQgbWVudSAtLT4gICAgICAgIDx1bCBpZD0nc2xpZGUtb3V0JyBjbGFzcz0nc2lkZS1uYXYgZml4ZWQgaGlkZS1vbi1tZWQtYW5kLWRvd24nPiAgICAgICAgICAgIDxsaSBjbGFzcz0nd2F2ZXMtZWZmZWN0IGFjdGl2ZSc+PGEgaHJlZj0nIyEnIHZpZXc9J3Rlc3Qtdmlldycgb25jbGljaz0iY29uZmlndXJlVmlldygwKTtjaGFydHNWaWV3KCd0ZXN0Jyk7Ij48aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMnPmRhc2hib2FyZDwvaT48L2E+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9J3dhdmVzLWVmZmVjdCc+PGEgaHJlZj0nIyEnIG9uY2xpY2s9ImNvbmZpZ3VyZVZpZXcoLTEpO2NoYXJ0c1ZpZXcoJ2Rhc2hib2FyZCcpOyIgdmlldz0nZGFzaGJvYXJkLXZpZXcnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+dHJhY2tfY2hhbmdlczwvaT48L2k+PC9hPjwvbGk+ICAgICAgICA8L3VsPiAgICAgICAgPCEtLSByZXBvcnQgbmFtZSAtLT4gICAgICAgIDxzcGFuIGNsYXNzPSdyZXBvcnQtbmFtZSc+QXV0b21hdGlvbiBSZXBvcnQ8L3NwYW4+ICAgICAgICA8IS0tIHJlcG9ydCBoZWFkbGluZSAtLT4gICAgICAgIDxzcGFuIGNsYXNzPSdyZXBvcnQtaGVhZGxpbmUnPjwvc3Bhbj4gICAgICAgIDwhLS0gbmF2LXJpZ2h0IC0tPiAgICAgICAgPHVsIGlkPSduYXYtbW9iaWxlJyBjbGFzcz0ncmlnaHQgaGlkZS1vbi1tZWQtYW5kLWRvd24gbmF2LXJpZ2h0Jz4gICAgICAgICAgICA8YT4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J3N1aXRlLXN0YXJ0LXRpbWUgbGFiZWwgYmx1ZSBkYXJrZW4tMyc+MDYtMDctMjAyMiAxMToyMDoyMyBJbmRpYSBTdGFuZGFyZCBUaW1lPC9zcGFuPiAgICAgICAgICAgIDwvYT4gICAgICAgICAgICA8YT4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxhYmVsIGJsdWUgZGFya2VuLTMiPjMuMS4wPC9zcGFuPiAgICAgICAgICAgIDwvYT4gICAgICAgIDwvdWw+ICAgIDwvZGl2PjwvbmF2PgkJPCEtLSBjb250YWluZXIgLS0+CQk8ZGl2IGNsYXNzPSdjb250YWluZXInPiAgICAgICAgICAgIDxkaXYgaWQ9J3Rlc3QtdmlldycgY2xhc3M9J3ZpZXcnPiAgICA8c2VjdGlvbiBpZD0nY29udHJvbHMnPiAgICAgICAgPGRpdiBjbGFzcz0nY29udHJvbHMgZ3JleSBsaWdodGVuLTQnPiAgICAgICAgICAgIDwhLS0gdGVzdCB0b2dnbGUgLS0+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hpcCB0cmFuc3BhcmVudCc+ICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdkcm9wZG93bi1idXR0b24gdGVzdHMtdG9nZ2xlJyBkYXRhLWFjdGl2YXRlcz0ndGVzdHMtdG9nZ2xlJyBkYXRhLWNvbnN0cmFpbndpZHRoPSd0cnVlJyBkYXRhLWJlbG93b3JpZ2luPSd0cnVlJyBkYXRhLWhvdmVyPSd0cnVlJyBocmVmPScjJz4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+d2FybmluZzwvaT4gU3RhdHVzICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgPHVsIGlkPSd0ZXN0cy10b2dnbGUnIGNsYXNzPSdkcm9wZG93bi1jb250ZW50Jz4gICAgICAgICAgICAgICAgICAgIDxsaSBzdGF0dXM9J3Bhc3MnPjxhIGhyZWY9JyMhJz5QYXNzIDxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyBncmVlbi10ZXh0Jz5jaGVja19jaXJjbGU8L2k+PC9hPjwvbGk+ICAgICAgICAgICAgICAgICAgICA8bGkgc3RhdHVzPSdmYWlsJz48YSBocmVmPScjISc+RmFpbCA8aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMgcmVkLXRleHQnPmNhbmNlbDwvaT48L2E+PC9saT4gICAgICAgICAgICAgICAgICAgIDxsaSBzdGF0dXM9J2Vycm9yJz48YSBocmVmPScjISc+RXJyb3IgPGkgY2xhc3M9J21hdGVyaWFsLWljb25zIHJlZC10ZXh0IGxpZ2h0ZW4tMic+ZXJyb3I8L2k+PC9hPjwvbGk+ICAgICAgICAgICAgICAgICAgICA8bGkgc3RhdHVzPSd3YXJuaW5nJz48YSBocmVmPScjISc+V2FybmluZyA8aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMgb3JhbmdlLXRleHQnPndhcm5pbmc8L2k+PC9hPjwvbGk+ICAgICAgICAgICAgICAgICAgICA8bGkgc3RhdHVzPSdza2lwJz48YSBocmVmPScjISc+U2tpcCA8aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMgY3lhbi10ZXh0Jz5yZWRvPC9pPjwvYT48L2xpPiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSdkaXZpZGVyJz48L2xpPiAgICAgICAgICAgICAgICAgICAgPGxpIHN0YXR1cz0nY2xlYXInIGNsZWFyPSd0cnVlJz48YSBocmVmPScjISc+Q2xlYXIgRmlsdGVycyA8aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMnPmNsZWFyPC9pPjwvYT48L2xpPiAgICAgICAgICAgICAgICA8L3VsPiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwhLS0gdGVzdCB0b2dnbGUgLS0+ICAgICAgICAgICAgPCEtLSBjYXRlZ29yeSB0b2dnbGUgLS0+ICAgICAgICAgICAgPCEtLSBjYXRlZ29yeSB0b2dnbGUgLS0+ICAgICAgICAgICAgPCEtLSBjbGVhciBmaWx0ZXJzIC0tPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NoaXAgdHJhbnNwYXJlbnQgaGlkZSc+ICAgICAgICAgICAgICAgIDxhIGNsYXNzPScnIGlkPSdjbGVhci1maWx0ZXJzJyBhbHQ9J0NsZWFyIEZpbHRlcnMnIHRpdGxlPSdDbGVhciBGaWx0ZXJzJz4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2xvc2U8L2k+IENsZWFyICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8IS0tIGNsZWFyIGZpbHRlcnMgLS0+ICAgICAgICAgICAgPCEtLSBlbmFibGUgZGFzaGJvYXJkIC0tPiAgICAgICAgICAgIDxkaXYgaWQ9J3RvZ2dsZS10ZXN0LXZpZXctY2hhcnRzJyBjbGFzcz0nY2hpcCB0cmFuc3BhcmVudCc+ICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ncGluay10ZXh0JyBpZD0nZW5hYmxlLWRhc2hib2FyZCcgYWx0PSdFbmFibGUgRGFzaGJvYXJkJyB0aXRsZT0nRW5hYmxlIERhc2hib2FyZCc+ICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9J21hdGVyaWFsLWljb25zJz50cmFja19jaGFuZ2VzPC9pPiBEYXNoYm9hcmQgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8IS0tIGVuYWJsZSBkYXNoYm9hcmQgLS0+ICAgICAgICAgICAgPCEtLSBzZWFyY2ggLS0+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hpcCB0cmFuc3BhcmVudCcgYWx0PSdTZWFyY2ggVGVzdHMnIHRpdGxlPSdTZWFyY2ggVGVzdHMnPiAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0nc2VhcmNoLWRpdic+ICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMnPnNlYXJjaDwvaT4gU2VhcmNoICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0naW5wdXQtZmllbGQgbGVmdCBoaWRlJz4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nc2VhcmNoLXRlc3RzJyB0eXBlPSd0ZXh0JyBjbGFzcz0ndmFsaWRhdGUgYnJvd3Nlci1kZWZhdWx0JyBwbGFjZWhvbGRlcj0nU2VhcmNoIFRlc3RzLi4uJz4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPCEtLSBzZWFyY2ggLS0+ICAgICAgICA8L2Rpdj4gICAgPC9zZWN0aW9uPjxkaXYgaWQ9J3Rlc3Qtdmlldy1jaGFydHMnIGNsYXNzPSdzdWJ2aWV3LWZ1bGwnPiAgICA8ZGl2IGlkPSdjaGFydHMtcm93JyBjbGFzcz0ncm93IG5tLXYgbm0taCc+ICAgICAgICA8ZGl2IGNsYXNzPSdjb2wgczEyIG02IGw2IG5wLWgnPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NhcmQtcGFuZWwgbm0tdic+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2xlZnQgcGFuZWwtbmFtZSc+VGVzdHM8L2Rpdj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hhcnQtYm94Jz4gICAgICAgICAgICAgICAgICAgIDxjYW52YXMgaWQ9J3BhcmVudC1hbmFseXNpcycgd2lkdGg9JzEwMCcgaGVpZ2h0PSc4MCc+PC9jYW52YXM+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdibG9jayB0ZXh0LXNtYWxsJz4gICAgICAgICAgICAgICAgICAgIDxzcGFuPjxzcGFuIGNsYXNzPSdzdHJvbmcnPjA8L3NwYW4+IHRlc3QocykgcGFzc2VkPC9zcGFuPiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYmxvY2sgdGV4dC1zbWFsbCc+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nc3Ryb25nJz4xPC9zcGFuPiB0ZXN0KHMpIGZhaWxlZCwgPHNwYW4gY2xhc3M9J3N0cm9uZyc+MDwvc3Bhbj4gb3RoZXJzICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY29sIHMxMiBtNiBsNiBucC1oJz4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2FyZC1wYW5lbCBubS12Jz4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2xlZnQgcGFuZWwtbmFtZSc+U3RlcHM8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NoYXJ0LWJveCc+ICAgICAgICAgICAgICAgICAgICAgICAgPGNhbnZhcyBpZD0nY2hpbGQtYW5hbHlzaXMnIHdpZHRoPScxMDAnIGhlaWdodD0nODAnPjwvY2FudmFzPiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdibG9jayB0ZXh0LXNtYWxsJz4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48c3BhbiBjbGFzcz0nc3Ryb25nJz40PC9zcGFuPiBzdGVwKHMpIHBhc3NlZDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYmxvY2sgdGV4dC1zbWFsbCc+ICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J3N0cm9uZyc+NDwvc3Bhbj4gc3RlcChzKSBmYWlsZWQsIDxzcGFuIGNsYXNzPSdzdHJvbmcnPjA8L3NwYW4+IG90aGVycyAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBjbGFzcz0nc3Vidmlldy1sZWZ0IGxlZnQnPiAgICAgICAgPGRpdiBjbGFzcz0ndmlldy1zdW1tYXJ5Jz4gICAgICAgICAgICA8aDU+VGVzdHM8L2g1PiAgICAgICAgICAgIDx1bCBpZD0ndGVzdC1jb2xsZWN0aW9uJyBjbGFzcz0ndGVzdC1jb2xsZWN0aW9uJz4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ndGVzdCBkaXNwbGF5ZWQgYWN0aXZlICBmYWlsJyBzdGF0dXM9J2ZhaWwnIHRlc3QtaWQ9JzYnPiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3Rlc3QtaGVhZGluZyc+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSd0ZXN0LW5hbWUnPlRDXzE1NDY1X1BWX0FQSV9EZXBsb3ltZW50X0NyZWF0ZV9CdW5kbGVzX05lcHR1bmVfQ1NSX0RlZmF1bHRfT0ZGPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ndGVzdC10aW1lJz4wNi0wNy0yMDIyIDExOjIwOjIzPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ndGVzdC1zdGF0dXMgcmlnaHQgZmFpbCc+RmFpbDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSd0ZXN0LWNvbnRlbnQgaGlkZSc+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSd0ZXN0LXRpbWUtaW5mbyc+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J2xhYmVsIHN0YXJ0LXRpbWUnPjA2LTA3LTIwMjIgMTE6MjA6MjM8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J2xhYmVsIGVuZC10aW1lJz4wNi0wNy0yMDIyIDExOjIyOjE0PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdsYWJlbCB0aW1lLXRha2VuIGdyZXkgbGlnaHRlbi0xIHdoaXRlLXRleHQnPjAwOjAxOjUwLjcwOTYwMDM8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSd0ZXN0LXN0ZXBzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdib3JkZXJlZCB0YWJsZS1yZXN1bHRzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5TdGF0dXM8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+VGltZXN0YW1wPC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkRldGFpbHM8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9J2xvZycgc3RhdHVzPSdwYXNzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RhdHVzIHBhc3MnIHRpdGxlPSdwYXNzJyBhbHQ9J3Bhc3MnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2hlY2tfY2lyY2xlPC9pPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3RpbWVzdGFtcCc+MDYtMDctMjAyMiAxMToyMDo0MjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0ZXAtZGV0YWlscyc+TmF2aWdhdGVkIHRvIHVybDogPG1hcms+aHR0cHM6Ly93d3cucHJlLXByb2QubmVwdHVuZTM2MC5jb20vPC9tYXJrPiBzdWNjZXNzZnVsbHk8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9J2xvZycgc3RhdHVzPSdwYXNzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RhdHVzIHBhc3MnIHRpdGxlPSdwYXNzJyBhbHQ9J3Bhc3MnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2hlY2tfY2lyY2xlPC9pPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3RpbWVzdGFtcCc+MDYtMDctMjAyMiAxMToyMDo0MzwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0ZXAtZGV0YWlscyc+U2VuZEtleXNUb0VsZW1lbnQtVXNlck5hbWVQZXJmb3JtZWQgYWN0aW9uICdTRU5EIEtFWVMnIG9uIGVsZW1lbnQgLSBDb250cm9sTmFtZTogPG1hcms+VXNlck5hbWU8L21hcms+LCBMb2N0b3IgOiA8bWFyaz5CeS5JZDogVXNlcm5hbWU8L21hcms+LCBUZXh0OiA8bWFyaz5jaGVubmFsYW5pa2hpbDY3QGdtYWlsLmNvbTwvbWFyaz48L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9J2xvZycgc3RhdHVzPSdwYXNzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RhdHVzIHBhc3MnIHRpdGxlPSdwYXNzJyBhbHQ9J3Bhc3MnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2hlY2tfY2lyY2xlPC9pPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3RpbWVzdGFtcCc+MDYtMDctMjAyMiAxMToyMDo0MzwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0ZXAtZGV0YWlscyc+U2VuZEtleXNUb0VsZW1lbnQtUGFzc3dvcmRQZXJmb3JtZWQgYWN0aW9uICdTRU5EIEtFWVMnIG9uIGVsZW1lbnQgLSBDb250cm9sTmFtZTogPG1hcms+UGFzc3dvcmQ8L21hcms+LCBMb2N0b3IgOiA8bWFyaz5CeS5JZDogcGFzc3dvcmQ8L21hcms+LCBUZXh0OiA8bWFyaz5OZXB0dW5lQDEyMzwvbWFyaz48L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9J2xvZycgc3RhdHVzPSdwYXNzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RhdHVzIHBhc3MnIHRpdGxlPSdwYXNzJyBhbHQ9J3Bhc3MnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2hlY2tfY2lyY2xlPC9pPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3RpbWVzdGFtcCc+MDYtMDctMjAyMiAxMToyMTowMjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0ZXAtZGV0YWlscyc+Q2xpY2tFbGVtZW50LUxvZ2luUGVyZm9ybWVkIGFjdGlvbiAnQ0xJQ0snIG9uIGVsZW1lbnQgLSBDb250cm9sTmFtZTogPG1hcms+TG9naW48L21hcms+LCBsb2NhdG9yIC0gPG1hcms+QnkuWFBhdGg6IC8vYnV0dG9uW3RleHQoKT0nTG9naW4nXTwvbWFyaz48L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9J2xvZycgc3RhdHVzPSdmYWlsJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RhdHVzIGZhaWwnIHRpdGxlPSdmYWlsJyBhbHQ9J2ZhaWwnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2FuY2VsPC9pPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3RpbWVzdGFtcCc+MDYtMDctMjAyMiAxMToyMjowNzwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0ZXAtZGV0YWlscyc+Q2xpY2tFbGVtZW50LSBQbGF0Zm9ybSBNYW5hZ2VtZW50IFVuYWJsZSB0byBwZXJmb3JtICdDTElDSycgb24gZWxlbWVudCAtIGNvbnRyb2xOYW1lIDogPG1hcms+UGxhdGZvcm0gTWFuYWdlbWVudDwvbWFyaz4sIHdpdGggQnkgLSA8bWFyaz5CeS5YUGF0aDogLy9zcGFuW3RleHQoKT0nUExBVEZPUk0gTUFOQUdFTUVOVCddPC9tYXJrPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0nbG9nJyBzdGF0dXM9J2ZhaWwnPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSdzdGF0dXMgZmFpbCcgdGl0bGU9J2ZhaWwnIGFsdD0nZmFpbCc+PGkgY2xhc3M9J21hdGVyaWFsLWljb25zJz5jYW5jZWw8L2k+PC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ndGltZXN0YW1wJz4wNi0wNy0yMDIyIDExOjIyOjA4PC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RlcC1kZXRhaWxzJz5TbmFwc2hvdCBCZWxvdyA6PGltZyBkYXRhLWZlYXRoZXJsaWdodD0nU2NyZWVuU2hvdHNcU2NyZWVuU2hvdDA2LTA3LTIwMjIxMTIyMDcuanBlZycgY2xhc3M9J3N0ZXAtaW1nJyBzcmM9J1NjcmVlblNob3RzXFNjcmVlblNob3QwNi0wNy0yMDIyMTEyMjA3LmpwZWcnIGRhdGEtc3JjPSdTY3JlZW5TaG90c1xTY3JlZW5TaG90MDYtMDctMjAyMjExMjIwNy5qcGVnJz48L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9J2xvZycgc3RhdHVzPSdmYWlsJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RhdHVzIGZhaWwnIHRpdGxlPSdmYWlsJyBhbHQ9J2ZhaWwnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2FuY2VsPC9pPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3RpbWVzdGFtcCc+MDYtMDctMjAyMiAxMToyMjoxMzwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0ZXAtZGV0YWlscyc+VGVzdCBGYWlsZWQgLSBDbGlja0VsZW1lbnQtIFBsYXRmb3JtIE1hbmFnZW1lbnQgVW5hYmxlIHRvIHBlcmZvcm0gJ0NMSUNLJyBvbiBlbGVtZW50IC0gY29udHJvbE5hbWUgOiA8bWFyaz5QbGF0Zm9ybSBNYW5hZ2VtZW50PC9tYXJrPiwgd2l0aCBCeSAtIDxtYXJrPkJ5LlhQYXRoOiAvL3NwYW5bdGV4dCgpPSdQTEFURk9STSBNQU5BR0VNRU5UJ108L21hcms+PC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSdsb2cnIHN0YXR1cz0nZmFpbCc+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0YXR1cyBmYWlsJyB0aXRsZT0nZmFpbCcgYWx0PSdmYWlsJz48aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMnPmNhbmNlbDwvaT48L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSd0aW1lc3RhbXAnPjA2LTA3LTIwMjIgMTE6MjI6MTQ8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSdzdGVwLWRldGFpbHMnPlNuYXBzaG90IEJlbG93IDo8aW1nIGRhdGEtZmVhdGhlcmxpZ2h0PSdTY3JlZW5TaG90c1xTY3JlZW5TaG90MDYtMDctMjAyMjExMjIxMy5qcGVnJyBjbGFzcz0nc3RlcC1pbWcnIHNyYz0nU2NyZWVuU2hvdHNcU2NyZWVuU2hvdDA2LTA3LTIwMjIxMTIyMTMuanBlZycgZGF0YS1zcmM9J1NjcmVlblNob3RzXFNjcmVlblNob3QwNi0wNy0yMDIyMTEyMjEzLmpwZWcnPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPC9saT4gICAgICAgICAgICA8L3VsPiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8IS0tIHN1YnZpZXcgbGVmdCAtLT4gICAgPGRpdiBjbGFzcz0nc3Vidmlldy1yaWdodCBsZWZ0Jz4gICAgICAgIDxkaXYgY2xhc3M9J3ZpZXctc3VtbWFyeSc+ICAgICAgICAgICAgPGg1IGNsYXNzPSd0ZXN0LW5hbWUnPjwvaDU+ICAgICAgICAgICAgPGRpdiBpZD0nc3RlcC1maWx0ZXJzJyBjbGFzcz0icmlnaHQiPiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYmx1ZS10ZXh0IiBzdGF0dXM9ImluZm8iIGFsdD0iaW5mbyIgdGl0bGU9ImluZm8iPjxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+aW5mb19vdXRsaW5lPC9pPjwvc3Bhbj4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdyZWVuLXRleHQiIHN0YXR1cz0icGFzcyIgYWx0PSJwYXNzIiB0aXRsZT0icGFzcyI+PGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5jaGVja19jaXJjbGU8L2k+PC9zcGFuPiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVkLXRleHQiIHN0YXR1cz0iZmFpbCIgYWx0PSJmYWlsIiB0aXRsZT0iZmFpbCI+PGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5jYW5jZWw8L2k+PC9zcGFuPiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVkLXRleHQgdGV4dC1kYXJrZW4tNCIgc3RhdHVzPSJmYXRhbCIgYWx0PSJmYXRhbCIgdGl0bGU9ImZhdGFsIj48aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmNhbmNlbDwvaT48L3NwYW4+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwaW5rLXRleHQgdGV4dC1saWdodGVuLTEiIHN0YXR1cz0iZXJyb3IiIGFsdD0iZXJyb3IiIHRpdGxlPSJlcnJvciI+PGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5lcnJvcjwvaT48L3NwYW4+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvcmFuZ2UtdGV4dCIgYWx0PSJ3YXJuaW5nIiBzdGF0dXM9Indhcm5pbmciIHRpdGxlPSJ3YXJuaW5nIj48aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPndhcm5pbmc8L2k+PC9zcGFuPiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGVhbC10ZXh0IiBzdGF0dXM9InNraXAiIGFsdD0ic2tpcCIgdGl0bGU9InNraXAiPjxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+cmVkbzwvaT48L3NwYW4+ICAgICAgICAgICAgICAgIDxzcGFuIHN0YXR1cz0iY2xlYXIiIGFsdD0iQ2xlYXIgZmlsdGVycyIgdGl0bGU9IkNsZWFyIGZpbHRlcnMiPjxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+Y2xlYXI8L2k+PC9zcGFuPiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PiAgICA8IS0tIHN1YnZpZXcgcmlnaHQgLS0+PC9kaXY+PCEtLSB0ZXN0IHZpZXcgLS0+ICAgICAgICAgICAgPCEtLSBjYXRlZ29yeSB2aWV3IC0tPiAgICAgICAgICAgICAgICA8ZGl2IGlkPSdleGNlcHRpb24tdmlldycgY2xhc3M9J3ZpZXcgaGlkZSc+ICAgICAgICA8c2VjdGlvbiBpZD0nY29udHJvbHMnPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NvbnRyb2xzIGdyZXkgbGlnaHRlbi00Jz4gICAgICAgICAgICAgICAgPCEtLSBzZWFyY2ggLS0+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NoaXAgdHJhbnNwYXJlbnQnIGFsdD0nU2VhcmNoIFRlc3RzJyB0aXRsZT0nU2VhcmNoIFRlc3RzJz4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSdzZWFyY2gtZGl2Jz4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMnPnNlYXJjaDwvaT4gU2VhcmNoICAgICAgICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdpbnB1dC1maWVsZCBsZWZ0IGhpZGUnPiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nc2VhcmNoLXRlc3RzJyB0eXBlPSd0ZXh0JyBjbGFzcz0ndmFsaWRhdGUgYnJvd3Nlci1kZWZhdWx0JyBwbGFjZWhvbGRlcj0nU2VhcmNoIFRlc3RzLi4uJz4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPCEtLSBzZWFyY2ggLS0+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L3NlY3Rpb24+ICAgICAgICA8ZGl2IGNsYXNzPSdzdWJ2aWV3LWxlZnQgbGVmdCc+ICAgICAgICAgICAgPGRpdiBjbGFzcz0ndmlldy1zdW1tYXJ5Jz4gICAgICAgICAgICAgICAgPGg1PkV4Y2VwdGlvbnM8L2g1PiAgICAgICAgICAgICAgICA8dWwgaWQ9J2V4Y2VwdGlvbi1jb2xsZWN0aW9uJyBjbGFzcz0nZXhjZXB0aW9uLWNvbGxlY3Rpb24nPiAgICAgICAgICAgICAgICA8L3VsPiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgICAgICA8ZGl2IGNsYXNzPSdzdWJ2aWV3LXJpZ2h0IGxlZnQnPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J3ZpZXctc3VtbWFyeSc+ICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0nZXhjZXB0aW9uLW5hbWUnPjwvaDU+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PCEtLSBleGNlcHRpb24gdmlldyAtLT4gICAgICAgICAgICA8ZGl2IGlkPSdkYXNoYm9hcmQtdmlldycgY2xhc3M9J3ZpZXcgaGlkZSc+ICAgIDxkaXYgY2xhc3M9J2NhcmQtcGFuZWwgdHJhbnNwYXJlbnQgbnAtdic+ICAgICAgICA8aDU+RGFzaGJvYXJkPC9oNT4gICAgICAgIDxkaXYgY2xhc3M9J3Jvdyc+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY29sIHMyJz4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2FyZC1wYW5lbCByJz4gPHNwYW4+VGVzdHM8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncGFuZWwtbGVhZCc+MTwvZGl2PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdjb2wgczInPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdjYXJkLXBhbmVsIHInPiA8c3Bhbj5TdGVwczwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwYW5lbC1sZWFkJz44PC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NvbCBzMic+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NhcmQtcGFuZWwgcic+ICAgICAgICAgICAgICAgICAgICBTdGFydCAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncGFuZWwtbGVhZCc+MDYtMDctMjAyMiAxMToyMDoyMzwvZGl2PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdjb2wgczInPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdjYXJkLXBhbmVsIHInPiAgICAgICAgICAgICAgICAgICAgRW5kICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwYW5lbC1sZWFkJz4wNi0wNy0yMDIyIDExOjIyOjE0PC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NvbCBzMic+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NhcmQtcGFuZWwgcic+ICAgICAgICAgICAgICAgICAgICBUaW1lIFRha2VuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwYW5lbC1sZWFkJz4wMDowMTo1MC43MTA4MjIzPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdjb2wgczQnPiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2FyZC1wYW5lbCc+ICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J3JpZ2h0IGxhYmVsIGN5YW4gd2hpdGUtdGV4dCc+RW52aXJvbm1lbnQ8L3NwYW4+PHA+Jm5ic3A7PC9wPiAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPk5hbWU8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlZhbHVlPC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+SG9zdCBOYW1lPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+UVpMVDEyOTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Vc2VyIE5hbWU8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5ua3VtYXJAbmVwdHVuZXRnLmNvbTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Qcm9qZWN0PC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+TmVwdHVuZSAzNjA8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+UmVsZWFzZTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlJlbGVhc2UgMS40LjkuMjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5UZXN0IEN5Y2xlPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+UmVncmVzc2lvbiBUZXN0aW5nIC0gQXV0b21hdGlvbjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5UZXN0IFN1aXRlPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+VUktMzwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PC9kaXY+PCEtLSBkYXNoYm9hcmQgdmlldyAtLT4gICAgICAgICAgICA8IS0tIGV4Y2VwdGlvbiB2aWV3IC0tPgkJPC9kaXY+CQk8IS0tIGNvbnRhaW5lciAtLT4JCTxzY3JpcHQ+CQkJdmFyIHN0YXR1c0dyb3VwID0gewkJCSAgICBwYXNzUGFyZW50OiAwLAkJCSAgICBmYWlsUGFyZW50OiAxLAkJCSAgICBmYXRhbFBhcmVudDogMCwJCQkgICAgZXJyb3JQYXJlbnQ6IDAsCQkJICAgIHdhcm5pbmdQYXJlbnQ6IDAsCQkJICAgIHNraXBQYXJlbnQ6IDAsCQkJCQkJCSAgICBwYXNzQ2hpbGQ6IDQsCQkJICAgIGZhaWxDaGlsZDogNCwJCQkgICAgZmF0YWxDaGlsZDogMCwJCQkgICAgZXJyb3JDaGlsZDogMCwJCQkgICAgd2FybmluZ0NoaWxkOiAwLAkJCSAgICBza2lwQ2hpbGQ6IDAsCQkJICAgIGluZm9DaGlsZDogMCwJCQkJCQkJICAgIHBhc3NHcmFuZENoaWxkOiAwLAkJCSAgICBmYWlsR3JhbmRDaGlsZDogMCwJCQkgICAgZmF0YWxHcmFuZENoaWxkOiAwLAkJCSAgICBlcnJvckdyYW5kQ2hpbGQ6IDAsCQkJICAgIHdhcm5pbmdHcmFuZENoaWxkOiAwLAkJCSAgICBza2lwR3JhbmRDaGlsZDogMCwJCQkgICAgaW5mb0dyYW5kQ2hpbGQ6IDAJCQl9OwkJPC9zY3JpcHQ+CQk8c2NyaXB0IHNyYz0naHR0cHM6Ly9jZG4ucmF3Z2l0LmNvbS9hbnNob29hcm9yYS9leHRlbnRyZXBvcnRzLWNzaGFycC9lNDY4MDU0ZDY3ZDkzYzJmZDljOGYwZjYwZTMxYTdlYTA5ZmEzYmY2L2Rpc3QvanMvZXh0ZW50LmpzJyB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPjwvc2NyaXB0PgkJCQkJCSAgICAgICAgICAgIDxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz4JCQkgICAgICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0Pgk8L2JvZHk+CTwvaHRtbD4="}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-06-2022 11:22:31=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 307e4881-df82-40e9-95fd-f66c9bfa4f1e
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http GET request=======07-06-2022 11:24:05========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite&pageSize=999
Auth Header:bearer 2ef95562-2f6f-42b5-b853-153ae481a06c
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-06-2022 11:30:03=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295544620/test-logs
Auth Header:bearer c7d6249f-f36f-4be5-9ef9-cb1c383545d8
Json Content:{"exe_start_date": "2022-07-06T11:28:55+05:30", "exe_end_date": "2022-07-06T11:29:51+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-06-2022 11:30:03=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer c7d6249f-f36f-4be5-9ef9-cb1c383545d8
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-06-2022 02:06:39=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295359241/test-logs
Auth Header:bearer 351609b7-cd10-4a5d-8e2b-dd7bd53cb339
Json Content:{"exe_start_date": "2022-07-06T14:05:16+05:30", "exe_end_date": "2022-07-06T14:06:21+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-06-2022 02:06:39=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 351609b7-cd10-4a5d-8e2b-dd7bd53cb339
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
