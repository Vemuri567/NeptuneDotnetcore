==============Error in http POST request=======07-02-2022 12:09:04=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 69456b90-10e3-4702-a327-ad2b8917ae3b
Json Content:{"name":"Permissions_Validation_Identity Management_Deactivate Users_Neptune 360 Partner_Default_OFF","test_case":{"id":34515832}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 12:09:04=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 12:10:05=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 9b61a5b9-9596-40a9-990a-5b7932605447
Json Content:{"name":"Permissions_Validation_Identity Management_Send Password Reset_Neptune 360 Partner_Default_OFF","test_case":{"id":34515834}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 12:10:05=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 12:33:57=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 66792478-d5dd-4b29-bc6b-7b327f4b732c
Json Content:{"name":"Permissions_Validation_Handhelds_View Handhelds_Neptune 360 Partner_Default_OFF","test_case":{"id":34517100}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 12:33:57=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http GET request=======07-02-2022 12:35:56========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite&pageSize=999
Auth Header:bearer 74780441-8cfb-4c2a-b44a-61f32bd75a1a
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 12:35:56=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 74780441-8cfb-4c2a-b44a-61f32bd75a1a
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 12:38:14=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 938c7f8e-db44-47cb-b6d6-413bf5160685
Json Content:{"name":"Permissions_Validation_Usage Plans_View Usage Plans_Neptune 360 Partner_Default_OFF","test_case":{"id":34517104}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 12:38:14=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 12:41:30=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 1f77f6f0-829a-47b2-8788-a7b9d5919cb5
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http GET request=======07-02-2022 12:50:38========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-cycles?parentId=1044576&parentType=release
Auth Header:bearer a422bc6e-27b9-4042-ae9d-6d185ad474fe
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 12:50:38=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer a422bc6e-27b9-4042-ae9d-6d185ad474fe
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 01:04:08=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 75c2d4b2-87c2-4622-a85e-b65f7b2152bd
Json Content:{"name":"Permissions_Validation_Left Navigation_Handheld Management Left Navigation_Neptune 360 Partner_Default_OFF","test_case":{"id":34517442}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 01:04:08=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 01:05:30=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 1ff70215-907f-4964-ba80-5012cd5cc8fd
Json Content:{"name":"Permissions_Validation_Left Navigation_Handhelds Left Navigation_Neptune 360 Partner_Default_OFF","test_case":{"id":34517443}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 01:05:30=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 01:23:01=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 9d7aa219-e4c9-4e52-8c4d-74067ca5ecdc
Json Content:{"name":"Permissions_Validation_Alert Notification_Edit Alert Notifications_Neptune 360 Partner_Default_OFF","test_case":{"id":34518407}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 01:23:01=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 01:25:24=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 715a304d-54e3-4bbe-b90b-cfd7105d02f3
Json Content:{"name":"Permissions_Validation_Reporting_Comments Report_Neptune 360 Partner_Default_OFF","test_case":{"id":34518409}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 01:25:24=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http GET request=======07-02-2022 01:30:36========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-cycles?parentId=1044576&parentType=release
Auth Header:bearer 15016724-2f88-4ab0-8804-0abf029ac099
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 01:30:37=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 15016724-2f88-4ab0-8804-0abf029ac099
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http GET request=======07-02-2022 01:44:01========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-cases/34541422
Auth Header:bearer c6bb98e2-5ffa-48df-9ee4-999562519136
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 01:44:01=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer c6bb98e2-5ffa-48df-9ee4-999562519136
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 01:45:15=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 9bd62c13-bfb2-4fb6-8c7e-ca83fc179d0a
Json Content:{"name":"Permissions_Validation_Notification Management_Edit Notification_Neptune 360 Partner_Default_OFF","test_case":{"id":34541423}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 01:45:15=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http GET request=======07-02-2022 01:46:29========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/releases
Auth Header:bearer b4e6f0f8-c771-46b3-9b01-ddeb17dc9c45
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 01:46:30=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer b4e6f0f8-c771-46b3-9b01-ddeb17dc9c45
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 01:47:45=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 46e5ee0b-f7ec-4ffc-a358-dc5e9bac8520
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 02:11:47=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer f438a803-3548-435c-9e58-76efec86923f
Json Content:{"name":"Permissions_Validation_Import Management_Import_Neptune 360 Partner_Default_OFF","test_case":{"id":34541583}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 02:11:47=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 02:12:53=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 5e72aed6-07e7-43ac-a249-a357a542c2bd
Json Content:{"name":"Permissions_Validation_Import Management_View Import Files_Neptune 360 Partner_Default_OFF","test_case":{"id":34541585}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 02:12:53=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 02:14:57=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 15b22a49-9b88-4ada-aa7b-457eb273a41d
Json Content:{"name":"Permissions_Validation_Import Management_Import Summary_Neptune 360 Partner_Default_OFF","test_case":{"id":34541587}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 02:14:57=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 02:17:01=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer ea49ab7d-9ecb-4420-8266-2dc5be8cfb05
Json Content:{"name":"Permissions_Validation_Role Management_Create Role_Neptune 360 Partner_Default_OFF","test_case":{"id":34541589}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 02:17:01=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http GET request=======07-02-2022 02:23:04========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-cases/34542813
Auth Header:bearer 8dca3a78-07c9-46f1-81e4-70ed74b95513
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 02:23:05=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 8dca3a78-07c9-46f1-81e4-70ed74b95513
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 02:26:45=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 54558e33-2399-4740-b7cf-c8bb26e92664
Json Content:{"name":"Permissions_Validation_Device Management_Show Devices_Neptune 360 Partner_Default_OFF","test_case":{"id":34542826}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 02:26:45=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 02:28:55=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer af5668a7-b363-4041-87d8-fc334149257a
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 02:32:06=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer d59ac703-6133-4ac9-85ce-3ee41445031f
Json Content:{"name":"Roles and Permissions_Left Navigation_File Mapper _Display","test_case":{"id":34020535}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 02:32:06=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http GET request=======07-02-2022 02:38:09========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-suites?parentId=16040639&parentType=test-cycle
Auth Header:bearer d6f7336f-de48-4998-8650-236b4f0aea66
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 02:38:10=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer d6f7336f-de48-4998-8650-236b4f0aea66
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 08:10:49=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 2db7f8d8-9fe9-4fe2-81cd-896d4edc427b
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 08:13:06=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer a87f3be1-409c-4d86-a07e-dd76d50568e5
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 08:15:15=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295537636/test-logs
Auth Header:bearer e91a52db-ea97-4064-aef0-ad06f00129cf
Json Content:{"exe_start_date": "2022-07-02T08:14:07+05:30", "exe_end_date": "2022-07-02T08:14:48+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 08:15:16=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer e91a52db-ea97-4064-aef0-ad06f00129cf
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 08:34:23=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 2def0b8f-4589-48d4-8486-f6086fbf736e
Json Content:{"name":"Permissions - Role Management - Left Navigation - Handheld Management Left Navigation - Neptune 360 Partner - Default","test_case":{"id":34905488}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 08:34:23=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http GET request=======07-02-2022 08:46:04========
URL:https://ntg.qtestnet.com/api/v3/projects
Auth Header:bearer fa83f178-7309-4ab3-9434-41c94e692988
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 08:46:04=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer fa83f178-7309-4ab3-9434-41c94e692988
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http GET request=======07-02-2022 08:47:12========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-suites?parentId=16040639&parentType=test-cycle
Auth Header:bearer 040b8815-7592-491c-a7ff-07beaa54afa7
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 08:47:12=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 040b8815-7592-491c-a7ff-07beaa54afa7
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 08:48:27=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 76cb8f6b-22ac-44dd-b13a-a081e1df4954
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 08:54:24=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 20569844-e7f8-4c28-b39c-739412df86e2
Json Content:{"name":"Permissions - Role Management - Left Navigation - Handheld Settings Left Navigation - Neptune Customer Support - Default","test_case":{"id":34905500}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 08:54:24=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 08:59:58=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer e280640c-1c16-41f2-b733-7350d9aa664f
Json Content:{"name":"Permissions - Role Management - Left Navigation - Handheld Settings Left Navigation - Utility Read Only - Default","test_case":{"id":34905504}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 08:59:58=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 09:03:03=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer a5682872-0e4c-4f58-8aa2-961f6157d4b1
Json Content:{"name":"Permissions - Role Management - Left Navigation - Handheld Management Left Navigation - Utility User - Default","test_case":{"id":34905507}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 09:03:03=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 09:04:01=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 69220407-e01b-47ca-92c2-add3d36c79dd
Json Content:{"name":"Permissions - Role Management - Left Navigation - Handhelds Left Navigation - Neptune Customer Service - Default","test_case":{"id":34905508}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 09:04:01=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 09:20:30=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer c4825499-bdaa-4a18-b4b3-e2ac5cdcdb9b
Json Content:{"name":"Permissions - Role Management - Left Navigation - Handhelds Left Navigation - Neptune Sys Admin - Default","test_case":{"id":34905524}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 09:20:30=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 09:25:45=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 34f75da8-939f-40db-933f-d802e8c3c74f
Json Content:{"name":"Roles and Permissions - Neptune 360 Sync Permission Block","test_case":{"id":36719278}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 09:25:45=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 09:31:21=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 67100029-22db-4eab-8551-7261f17986c9
Json Content:{"name":"Permissions Validation_Report_Days of Consumption  (AMR)_ON","test_case":{"id":37404849}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 09:31:21=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 09:32:20=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 263e7bda-c818-4e85-8883-dbeaa4b67e91
Json Content:{"name":"Permissions Validation_Report_Days of Consumption  (AMR)_ON","test_case":{"id":37404849}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 09:32:20=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http GET request=======07-02-2022 09:33:11========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/releases
Auth Header:bearer b31aadc8-0f3c-4310-ad6a-78c3c19ed28c
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 09:33:11=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer b31aadc8-0f3c-4310-ad6a-78c3c19ed28c
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 09:33:26=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 20711386-a5e9-4dbd-b610-bf1d43b977f2
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 09:34:32=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer eb45d54a-8305-45b3-9f75-35f17d5a01d4
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 09:35:39=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 2097285e-200a-45c7-9c1f-25986dd59654
Json Content:{"name":"Permissions_Validation_GROUPS_Feature Group_View Groups_Display","test_case":{"id":39083402}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 09:35:39=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 09:38:56=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer ba5da393-4d43-43f3-aabb-0e74ef53fcd9
Json Content:{"name":"Permissions_Validation_Left Navigation_Groups_Display","test_case":{"id":39083589}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 09:38:56=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 09:39:59=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 35e48093-8bdc-44b9-96b6-912aaa2d2e15
Json Content:{"name":"Permissions_Validation_Landing Page_Groups Widget_Display","test_case":{"id":39083610}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 09:39:59=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 09:41:08=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 7a4b0a0c-bd47-49cc-b818-a601c030df0c
Json Content:{"name":"Permissions_Validation_Left Navigation_Groups_Neptune System Admin_Default_ON","test_case":{"id":39083638}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 09:41:08=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 09:43:01=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 518a83ed-775d-4b04-a559-3de307081f23
Json Content:{"name":"Permissions_Validation_Left Navigation_Groups_Neptune CSR_Default_ON","test_case":{"id":39083640}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 09:43:01=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 09:47:08=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer c0ffa49f-405f-4e71-a0a4-86632beef553
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http GET request=======07-02-2022 09:50:53========
URL:https://ntg.qtestnet.com/api/v3/projects
Auth Header:bearer 77bfb430-d533-4fb4-a6e5-30e4b7626443
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 09:50:53=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 77bfb430-d533-4fb4-a6e5-30e4b7626443
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 10:00:52=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 61a761ec-17bb-4a41-8ffc-dc27619beb43
Json Content:{"name":"Permissions_Validation_Groups_Create/Edit Group container_Neptune System Admin_Default_ON","test_case":{"id":39084807}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 10:00:52=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 10:04:40=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 52afa89b-3103-4c4c-ab95-9b784d942c1e
Json Content:{"name":"Permissions_Validation_Groups_Create/Edit Group container_Utility User_Default_OFF","test_case":{"id":39084838}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 10:04:40=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http GET request=======07-02-2022 10:05:37========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-cycles?parentId=1044576&parentType=release
Auth Header:bearer b084c322-5d38-432d-a0dd-bbc3ca3a0bd7
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 10:05:37=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer b084c322-5d38-432d-a0dd-bbc3ca3a0bd7
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 10:06:41=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer d570f6cb-224e-479b-a40f-5a6096d52f8f
Json Content:{"name":"Permissions_Validation_Groups_Create/Edit Group container_Utility Meter Reader_Default_OFF","test_case":{"id":39084846}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 10:06:41=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 10:18:48=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 359718e7-5ac5-4d7c-93ba-75e120f22ac2
Json Content:{"name":"Permissions_Validation_Groups_Delete Groups_Utility Admin_Default_ON","test_case":{"id":39088271}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 10:18:48=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http GET request=======07-02-2022 10:20:03========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite&pageSize=999
Auth Header:bearer 9f3b0d03-346f-444b-bf1a-910c76c9f366
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 10:20:04=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 9f3b0d03-346f-444b-bf1a-910c76c9f366
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 10:28:06=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 10b304f5-911c-4ea9-9abe-7044ead9c9b3
Json Content:{"name":"Permissions_Validation_Groups_View Groups_Utility Admin_Default_ON","test_case":{"id":39088395}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 10:28:06=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 10:32:56=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer de29b7eb-bc71-4c0a-bd7f-04e60e190b5f
Json Content:{"name":"Permissions_Validation_Groups_View Groups_Utility Meter Reader_Default_ON","test_case":{"id":39088398}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 10:32:56=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 10:35:40=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer a787610a-8a9a-46d0-89e1-a6988b7a1e3f
Json Content:{"name":"Permissions_Validation_Left Navigation_NSP DB Conversion_Display","test_case":{"id":39336822}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 10:35:40=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 10:39:08=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 95c082da-3cbf-49ec-bc2b-a94c9d8aa644
Json Content:{"name":"Permissions_Validation_Left Navigation_NSP DB Conversion_Neptune System Admin_Default_ON","test_case":{"id":39336827}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 10:39:08=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 10:41:12=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer eb864086-44cf-4d6d-8622-f39be1b7ceaa
Json Content:{"name":"Permissions_Validation_NSP DB Conversion _View NSP DB Conversion_Neptune System Admin_Default_ON","test_case":{"id":39336830}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 10:41:12=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 10:42:48=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer f8e122b7-15a1-4fb3-b660-71da3711c404
Json Content:{"name":"Neptune 360 - Role Management - Permissions - Neptune 360 Partner - Settings - Edit Settings - Default","test_case":{"id":39463239}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 10:42:48=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 10:44:20=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer c2ab9aef-8dd3-4879-8e3d-18ab3acc938b
Json Content:{"name":"Neptune 360 - Role Management - Permissions - Neptune 360 Partner - Settings - View Settings - Default","test_case":{"id":39463255}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 10:44:20=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 10:45:59=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer d9c3c90e-127d-4bee-b06d-5db33aebe901
Json Content:{"name":"Neptune 360 - Role Management - Permissions - Neptune Field Service PM - Settings - Edit Settings - Default","test_case":{"id":39463272}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 10:45:59=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http GET request=======07-02-2022 10:47:18========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite&pageSize=999
Auth Header:bearer b4587fed-0db1-43b3-8014-37ad759aa87d
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 10:47:19=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer b4587fed-0db1-43b3-8014-37ad759aa87d
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http GET request=======07-02-2022 10:49:13========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite&pageSize=999
Auth Header:bearer 2541aedb-d64c-491c-8552-a4479c2f17f8
Exception Message:Unable to read data from the transport connection: An established connection was aborted by the software in your host machine.
=========================================================================
==============Error in http POST request=======07-02-2022 10:49:13=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 2541aedb-d64c-491c-8552-a4479c2f17f8
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote name could not be resolved: 'ntg.qtestnet.com'
=========================================================================
==============Error in http POST request=======07-02-2022 10:49:13=======
URL:https://ntg.qtestnet.com/oauth/token?grant_type=password&username=nkumar@neptunetg.com&password=Neptune123
Auth Header:Basic bGluaC1sb2dpbjo=
Json Content:{"Cache-Control":"no-cache"}
Content Type:application/x-www-form-urlencoded
Exception Message:The remote name could not be resolved: 'ntg.qtestnet.com'
=========================================================================
==============Error in http POST request=======07-02-2022 10:52:59=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295541828/test-logs
Auth Header:bearer 6eeeeb73-d5c3-4ec7-8f78-6c0f1be095a2
Json Content:{"exe_start_date": "2022-07-02T10:49:16+05:30", "exe_end_date": "2022-07-02T10:52:38+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 10:53:00=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 6eeeeb73-d5c3-4ec7-8f78-6c0f1be095a2
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http GET request=======07-02-2022 10:56:06========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-cycles?parentId=1044576&parentType=release
Auth Header:bearer 50bb489a-77b8-471a-bce7-55c0e5450638
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 10:56:07=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 50bb489a-77b8-471a-bce7-55c0e5450638
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http GET request=======07-02-2022 10:57:56========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite&pageSize=999
Auth Header:bearer 7e947455-0c89-444a-8773-7f895d8e6092
Exception Message:The remote name could not be resolved: 'ntg.qtestnet.com'
=========================================================================
==============Error in http POST request=======07-02-2022 10:57:56=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 7e947455-0c89-444a-8773-7f895d8e6092
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote name could not be resolved: 'ntg.qtestnet.com'
=========================================================================
==============Error in http POST request=======07-02-2022 10:57:56=======
URL:https://ntg.qtestnet.com/oauth/token?grant_type=password&username=nkumar@neptunetg.com&password=Neptune123
Auth Header:Basic bGluaC1sb2dpbjo=
Json Content:{"Cache-Control":"no-cache"}
Content Type:application/x-www-form-urlencoded
Exception Message:The remote name could not be resolved: 'ntg.qtestnet.com'
=========================================================================
==============Error in http POST request=======07-02-2022 11:08:49=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 3a2e1d8b-84c9-4810-9294-b9d01c064f42
Json Content:{"name":"Neptune 360 - Role Management - Permissions - Utility Meter Reader - Settings - View Settings - Default","test_case":{"id":39463443}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 11:08:49=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 11:18:54=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 4246e79e-7aa0-49ce-b251-4a89621bfbdf
Json Content:{"name":"Permissions_Validation_Reporting Feature Group_Found Meters Report_Editable","test_case":{"id":39717799}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 11:18:54=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 11:23:58=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer abbb9c7e-dd81-405a-936a-dddd51872a1b
Json Content:{"name":"Permissions_Validation_Reporting Feature Group_Found Meters Reports_Utility Admin_Default_ON","test_case":{"id":39717802}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 11:23:58=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 11:32:51=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295542327/test-logs
Auth Header:bearer 7ffd0ae4-47ba-4c29-99d7-758322101074
Json Content:{"exe_start_date": "2022-07-02T11:30:40+05:30", "exe_end_date": "2022-07-02T11:32:30+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 11:32:51=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 7ffd0ae4-47ba-4c29-99d7-758322101074
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 11:34:39=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295542327/test-logs
Auth Header:bearer 9561772e-a48e-4215-80a0-0008a76b4b0e
Json Content:{"exe_start_date": "2022-07-02T11:32:53+05:30", "exe_end_date": "2022-07-02T11:34:10+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 11:34:40=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 9561772e-a48e-4215-80a0-0008a76b4b0e
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 11:46:33=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 32840309-4c62-4dd3-bd18-e752650f5aa3
Json Content:{"name":"Permissions_Validation_Reporting Feature Group_Inactive Flow Report_Display","test_case":{"id":42377192}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 11:46:33=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 12:25:12=======
URL:https://ntg.qtestnet.com/oauth/token?grant_type=password&username=nkumar@neptunetg.com&password=Neptune123
Auth Header:Basic bGluaC1sb2dpbjo=
Json Content:{"Cache-Control":"no-cache"}
Content Type:application/x-www-form-urlencoded
Exception Message:The remote name could not be resolved: 'ntg.qtestnet.com'
=========================================================================
==============Error in http GET request=======07-02-2022 12:42:36========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite&pageSize=999
Auth Header:bearer 58df10ce-9e0f-48c2-ab0d-6f85106df8bb
Exception Message:Unable to connect to the remote server
=========================================================================
==============Error in http GET request=======07-02-2022 12:43:38========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/releases
Auth Header:bearer a2098e3f-9b75-4608-b5c5-9976968f5762
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http GET request=======07-02-2022 12:45:03========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite&pageSize=999
Auth Header:bearer 3fd5bf58-f413-430e-9ca8-fc6d643627ef
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 12:46:58=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295537686/test-logs
Auth Header:bearer b6e73ac4-88cf-492f-bab9-d24a35fff548
Json Content:{"exe_start_date": "2022-07-02T12:41:49+05:30", "exe_end_date": "2022-07-02T12:42:25+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The underlying connection was closed: A connection that was expected to be kept alive was closed by the server.
=========================================================================
==============Error in http POST request=======07-02-2022 12:47:03=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer b6e73ac4-88cf-492f-bab9-d24a35fff548
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 12:54:22=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295537693/test-logs
Auth Header:bearer d7f5b48e-a332-4b64-8a9b-49e2858040c5
Json Content:{"exe_start_date": "2022-07-02T12:50:33+05:30", "exe_end_date": "2022-07-02T12:51:10+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 12:54:22=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer d7f5b48e-a332-4b64-8a9b-49e2858040c5
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 01:16:23=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295537944/test-logs
Auth Header:bearer e4e1b039-5ef9-44d9-92a7-b79f6b763aeb
Json Content:{"exe_start_date": "2022-07-02T13:15:23+05:30", "exe_end_date": "2022-07-02T13:16:01+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 01:16:24=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer e4e1b039-5ef9-44d9-92a7-b79f6b763aeb
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http GET request=======07-02-2022 01:19:15========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-cases/34905501
Auth Header:bearer 23c2229d-cc7f-4509-aecf-30732e5ed2ec
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http GET request=======07-02-2022 01:25:19========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/releases
Auth Header:bearer 6f1affa8-df35-4050-a1bf-37c30f7f5387
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 01:42:57=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295541128/test-logs
Auth Header:bearer 7e779226-f4a5-42e0-882f-d244b8647b51
Json Content:{"exe_start_date": "2022-07-02T13:40:57+05:30", "exe_end_date": "2022-07-02T13:42:23+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 01:42:57=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 7e779226-f4a5-42e0-882f-d244b8647b51
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 01:45:32=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer e919db86-7abe-4b20-89c7-44d9df67c50d
Json Content:{"name":"Permissions_Validation_Groups_Create/Edit Group container_Utility Read Only_Default_OFF","test_case":{"id":39084844}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 01:45:32=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 01:48:52=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295541622/test-logs
Auth Header:bearer e2566f47-a4d2-49cd-a28c-2ff2702e0fcd
Json Content:{"exe_start_date": "2022-07-02T13:47:11+05:30", "exe_end_date": "2022-07-02T13:48:38+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 01:48:53=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer e2566f47-a4d2-49cd-a28c-2ff2702e0fcd
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 01:58:22=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295541852/test-logs
Auth Header:bearer 7047b243-0fc5-465b-ae2b-581d7e093d5d
Json Content:{"exe_start_date": "2022-07-02T13:57:13+05:30", "exe_end_date": "2022-07-02T13:58:10+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 01:58:23=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 7047b243-0fc5-465b-ae2b-581d7e093d5d
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 02:00:18=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 3a3e0ead-4732-4eae-a02c-11156683e74c
Json Content:{"name":"Permissions_Validation_Reporting Feature Group_Found Meters Report_Editable","test_case":{"id":39717799}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 02:00:18=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 02:06:04=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295542808/test-logs
Auth Header:bearer 269b7287-4b6c-4290-ad5d-6e70e40a63ab
Json Content:{"exe_start_date": "2022-07-02T14:05:18+05:30", "exe_end_date": "2022-07-02T14:05:52+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 02:06:05=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 269b7287-4b6c-4290-ad5d-6e70e40a63ab
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 02:29:19=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295537686/test-logs
Auth Header:bearer 3f4beee8-2a63-4a3c-9a76-8bd649fb703b
Json Content:{"exe_start_date": "2022-07-02T14:27:37+05:30", "exe_end_date": "2022-07-02T14:29:00+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 02:29:19=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 3f4beee8-2a63-4a3c-9a76-8bd649fb703b
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 03:45:58=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295542808/test-logs
Auth Header:bearer c38b9c68-f193-49d8-b5f5-48abcecefc8d
Json Content:{"exe_start_date": "2022-07-02T15:44:24+05:30", "exe_end_date": "2022-07-02T15:45:41+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 03:45:58=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer c38b9c68-f193-49d8-b5f5-48abcecefc8d
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 03:47:05=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer c03e4c0e-333c-42ba-a869-1055f93d366f
Json Content:{"name":"Permissions_Validation_Reporting Feature Group_Inactive Flow Report_Neptune 360 Partner_Default_OFF","test_case":{"id":42377201}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 03:47:05=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 04:06:25=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer e7c9ef79-f8bc-44a2-9d44-2ad1a9ec410e
Json Content:{"name":"Permissions_Validation_CMIU FOTA Feature Block_Send Update_Neptune 360 Partner_OFF","test_case":{"id":47026797}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 04:06:25=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 04:19:32=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 2dfd11f9-85d5-44e6-a9c3-9e6d6341e21d
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 05:04:48=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295347901/test-logs
Auth Header:bearer bb2e0d62-8bec-404a-bdbf-219f2d2be368
Json Content:{"exe_start_date": "2022-07-02T17:03:43+05:30", "exe_end_date": "2022-07-02T17:04:29+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 05:04:49=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer bb2e0d62-8bec-404a-bdbf-219f2d2be368
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 05:07:20=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295350736/test-logs
Auth Header:bearer e5d7d629-160b-4603-95a9-0265370c2a73
Json Content:{"exe_start_date": "2022-07-02T17:06:24+05:30", "exe_end_date": "2022-07-02T17:06:50+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 05:07:20=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer e5d7d629-160b-4603-95a9-0265370c2a73
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 05:08:35=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295354757/test-logs
Auth Header:bearer 38681863-4e0d-4b71-b95a-7be4bec1fd01
Json Content:{"exe_start_date": "2022-07-02T17:07:22+05:30", "exe_end_date": "2022-07-02T17:08:07+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 05:08:36=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 38681863-4e0d-4b71-b95a-7be4bec1fd01
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 05:09:49=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295355655/test-logs
Auth Header:bearer c0e8ac5f-df9a-49f7-9347-51468b0d295c
Json Content:{"exe_start_date": "2022-07-02T17:08:37+05:30", "exe_end_date": "2022-07-02T17:09:12+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 05:09:49=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer c0e8ac5f-df9a-49f7-9347-51468b0d295c
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 05:11:04=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295356623/test-logs
Auth Header:bearer 093e18ff-cd32-4e51-bc35-13ad0e435f64
Json Content:{"exe_start_date": "2022-07-02T17:09:51+05:30", "exe_end_date": "2022-07-02T17:10:36+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 05:11:04=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 093e18ff-cd32-4e51-bc35-13ad0e435f64
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http GET request=======07-02-2022 05:11:57========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-cases/34051468
Auth Header:bearer 394bb239-7e64-4c62-abfa-cdef454d2382
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 05:13:19=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295357169/test-logs
Auth Header:bearer fb90afab-3218-414e-968d-d80d6c5f6f59
Json Content:{"exe_start_date": "2022-07-02T17:12:19+05:30", "exe_end_date": "2022-07-02T17:13:04+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 05:13:20=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer fb90afab-3218-414e-968d-d80d6c5f6f59
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 05:14:25=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295359011/test-logs
Auth Header:bearer 4020b28f-2c78-4887-bc79-5e3bdc00f85b
Json Content:{"exe_start_date": "2022-07-02T17:13:22+05:30", "exe_end_date": "2022-07-02T17:14:06+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 05:14:26=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 4020b28f-2c78-4887-bc79-5e3bdc00f85b
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 05:15:41=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer cf5d6d95-b206-4db0-97fc-d36315130e4c
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 05:20:33=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295541128/test-logs
Auth Header:bearer 797d6a3a-d9be-4dbe-b6e1-6608e4a90687
Json Content:{"exe_start_date": "2022-07-02T17:19:43+05:30", "exe_end_date": "2022-07-02T17:20:22+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 05:20:34=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 797d6a3a-d9be-4dbe-b6e1-6608e4a90687
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 05:21:45=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295541622/test-logs
Auth Header:bearer c0489d2c-092c-4fe4-adde-434623a996cf
Json Content:{"exe_start_date": "2022-07-02T17:20:56+05:30", "exe_end_date": "2022-07-02T17:21:34+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 05:21:45=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer c0489d2c-092c-4fe4-adde-434623a996cf
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http GET request=======07-02-2022 05:37:59========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite&pageSize=999
Auth Header:bearer 316bc4ea-5395-44d3-9802-404b9d09e1c4
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 05:46:56=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer af9ccfb1-08ab-4250-9726-ea211cb0d36f
Json Content:{"name":"Permissions_Validation_CMIU FOTA Feature Block_View CMIU FOTA_Neptune CSR_OFF","test_case":{"id":47026731}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 05:46:56=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http GET request=======07-02-2022 06:51:19========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/releases
Auth Header:bearer e10c6c02-1d99-4cec-b385-a8eee4f292af
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 06:59:01=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295551461/test-logs
Auth Header:bearer 00e541ed-dd66-4d3f-be3b-3e4b3296ddc2
Json Content:{"exe_start_date": "2022-07-02T18:57:06+05:30", "exe_end_date": "2022-07-02T18:58:46+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 06:59:02=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 00e541ed-dd66-4d3f-be3b-3e4b3296ddc2
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http GET request=======07-02-2022 07:00:16========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-cycles?parentId=1044576&parentType=release
Auth Header:bearer b6b38f7a-4270-41b5-931f-5d3aec5f4d31
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http GET request=======07-02-2022 07:04:23========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-cases/43579290
Auth Header:bearer 99e87e12-057f-4bc3-8e52-768fd6f35e15
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 07:35:54=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295551941/test-logs
Auth Header:bearer 8c269df4-6564-4ec5-90cb-1708cb965cf7
Json Content:{"exe_start_date": "2022-07-02T19:34:46+05:30", "exe_end_date": "2022-07-02T19:35:43+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 07:35:54=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 8c269df4-6564-4ec5-90cb-1708cb965cf7
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 07:42:15=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295552894/test-logs
Auth Header:bearer 7606c36e-8d40-46bd-9435-8c34da01fc17
Json Content:{"exe_start_date": "2022-07-02T19:40:52+05:30", "exe_end_date": "2022-07-02T19:42:09+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":"PCFET0NUWVBFIGh0bWw+PGh0bWw+ICAgIDxoZWFkPiAgICA8bWV0YSBjaGFyc2V0PSdVVEYtOCcgLz4gICAgPG1ldGEgbmFtZT0nZGVzY3JpcHRpb24nIGNvbnRlbnQ9JycgLz4gICAgPG1ldGEgbmFtZT0ncm9ib3RzJyBjb250ZW50PSdub29kcCwgbm95ZGlyJyAvPiAgICA8bWV0YSBuYW1lPSd2aWV3cG9ydCcgY29udGVudD0nd2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEnIC8+ICAgIDxsaW5rIGhyZWY9J2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Tb3VyY2UrU2FucytQcm86NDAwLDYwMCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+ICAgIDxsaW5rIGhyZWY9Imh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vaWNvbj9mYW1pbHk9TWF0ZXJpYWwrSWNvbnMiIHJlbD0ic3R5bGVzaGVldCI+ICAgIDxsaW5rIGhyZWY9J2h0dHBzOi8vY2RuLnJhd2dpdC5jb20vYW5zaG9vYXJvcmEvZXh0ZW50cmVwb3J0cy1jc2hhcnAvM2I2Y2MwNGZkMjQxYjk3ODI2MDZlNTdmYzVlODRmMGU0MjE3MmMwOC9kaXN0L2Nzcy9leHRlbnQuY3NzJyB0eXBlPSd0ZXh0L2NzcycgcmVsPSdzdHlsZXNoZWV0JyAvPiAgICA8dGl0bGU+RXh0ZW50PC90aXRsZT48L2hlYWQ+ICAgIAk8Ym9keSBjbGFzcz0nZXh0ZW50IGRhcmsgZGVmYXVsdCBoaWRlLW92ZXJmbG93ICc+CQk8ZGl2IGlkPSd0aGVtZS1zZWxlY3RvcicgYWx0PSdDbGljayB0byB0b2dnbGUgdGhlbWUuIFRvIGVuYWJsZSBieSBkZWZhdWx0LCB1c2UgdGhlbWUgY29uZmlndXJhdGlvbi4nIHRpdGxlPSdDbGljayB0byB0b2dnbGUgdGhlbWUuIFRvIGVuYWJsZSBieSBkZWZhdWx0LCB1c2UgdGhlbWUgY29uZmlndXJhdGlvbi4nPgkJCTxzcGFuPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+ZGVza3RvcF93aW5kb3dzPC9pPjwvc3Bhbj4JCTwvZGl2PgkJPG5hdj4gICAgPGRpdiBjbGFzcz0ibmF2LXdyYXBwZXIiPiAgICAgICAgPGEgaHJlZj0iaHR0cDovL2V4dGVudHJlcG9ydHMucmVsZXZhbnRjb2Rlcy5jb20iIGNsYXNzPSJicmFuZC1sb2dvIGJsdWUgZGFya2VuLTMiPkV4dGVudDwvYT4gICAgICAgIDwhLS0gc2xpZGVvdXQgbWVudSAtLT4gICAgICAgIDx1bCBpZD0nc2xpZGUtb3V0JyBjbGFzcz0nc2lkZS1uYXYgZml4ZWQgaGlkZS1vbi1tZWQtYW5kLWRvd24nPiAgICAgICAgICAgIDxsaSBjbGFzcz0nd2F2ZXMtZWZmZWN0IGFjdGl2ZSc+PGEgaHJlZj0nIyEnIHZpZXc9J3Rlc3Qtdmlldycgb25jbGljaz0iY29uZmlndXJlVmlldygwKTtjaGFydHNWaWV3KCd0ZXN0Jyk7Ij48aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMnPmRhc2hib2FyZDwvaT48L2E+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9J3dhdmVzLWVmZmVjdCc+PGEgaHJlZj0nIyEnIG9uY2xpY2s9ImNvbmZpZ3VyZVZpZXcoLTEpO2NoYXJ0c1ZpZXcoJ2Rhc2hib2FyZCcpOyIgdmlldz0nZGFzaGJvYXJkLXZpZXcnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+dHJhY2tfY2hhbmdlczwvaT48L2k+PC9hPjwvbGk+ICAgICAgICA8L3VsPiAgICAgICAgPCEtLSByZXBvcnQgbmFtZSAtLT4gICAgICAgIDxzcGFuIGNsYXNzPSdyZXBvcnQtbmFtZSc+QXV0b21hdGlvbiBSZXBvcnQ8L3NwYW4+ICAgICAgICA8IS0tIHJlcG9ydCBoZWFkbGluZSAtLT4gICAgICAgIDxzcGFuIGNsYXNzPSdyZXBvcnQtaGVhZGxpbmUnPjwvc3Bhbj4gICAgICAgIDwhLS0gbmF2LXJpZ2h0IC0tPiAgICAgICAgPHVsIGlkPSduYXYtbW9iaWxlJyBjbGFzcz0ncmlnaHQgaGlkZS1vbi1tZWQtYW5kLWRvd24gbmF2LXJpZ2h0Jz4gICAgICAgICAgICA8YT4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J3N1aXRlLXN0YXJ0LXRpbWUgbGFiZWwgYmx1ZSBkYXJrZW4tMyc+MDItMDctMjAyMiAxOTo0MDo1MSBJbmRpYSBTdGFuZGFyZCBUaW1lPC9zcGFuPiAgICAgICAgICAgIDwvYT4gICAgICAgICAgICA8YT4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxhYmVsIGJsdWUgZGFya2VuLTMiPjMuMS4wPC9zcGFuPiAgICAgICAgICAgIDwvYT4gICAgICAgIDwvdWw+ICAgIDwvZGl2PjwvbmF2PgkJPCEtLSBjb250YWluZXIgLS0+CQk8ZGl2IGNsYXNzPSdjb250YWluZXInPiAgICAgICAgICAgIDxkaXYgaWQ9J3Rlc3QtdmlldycgY2xhc3M9J3ZpZXcnPiAgICA8c2VjdGlvbiBpZD0nY29udHJvbHMnPiAgICAgICAgPGRpdiBjbGFzcz0nY29udHJvbHMgZ3JleSBsaWdodGVuLTQnPiAgICAgICAgICAgIDwhLS0gdGVzdCB0b2dnbGUgLS0+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hpcCB0cmFuc3BhcmVudCc+ICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdkcm9wZG93bi1idXR0b24gdGVzdHMtdG9nZ2xlJyBkYXRhLWFjdGl2YXRlcz0ndGVzdHMtdG9nZ2xlJyBkYXRhLWNvbnN0cmFpbndpZHRoPSd0cnVlJyBkYXRhLWJlbG93b3JpZ2luPSd0cnVlJyBkYXRhLWhvdmVyPSd0cnVlJyBocmVmPScjJz4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+d2FybmluZzwvaT4gU3RhdHVzICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgPHVsIGlkPSd0ZXN0cy10b2dnbGUnIGNsYXNzPSdkcm9wZG93bi1jb250ZW50Jz4gICAgICAgICAgICAgICAgICAgIDxsaSBzdGF0dXM9J3Bhc3MnPjxhIGhyZWY9JyMhJz5QYXNzIDxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyBncmVlbi10ZXh0Jz5jaGVja19jaXJjbGU8L2k+PC9hPjwvbGk+ICAgICAgICAgICAgICAgICAgICA8bGkgc3RhdHVzPSdmYWlsJz48YSBocmVmPScjISc+RmFpbCA8aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMgcmVkLXRleHQnPmNhbmNlbDwvaT48L2E+PC9saT4gICAgICAgICAgICAgICAgICAgIDxsaSBzdGF0dXM9J2Vycm9yJz48YSBocmVmPScjISc+RXJyb3IgPGkgY2xhc3M9J21hdGVyaWFsLWljb25zIHJlZC10ZXh0IGxpZ2h0ZW4tMic+ZXJyb3I8L2k+PC9hPjwvbGk+ICAgICAgICAgICAgICAgICAgICA8bGkgc3RhdHVzPSd3YXJuaW5nJz48YSBocmVmPScjISc+V2FybmluZyA8aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMgb3JhbmdlLXRleHQnPndhcm5pbmc8L2k+PC9hPjwvbGk+ICAgICAgICAgICAgICAgICAgICA8bGkgc3RhdHVzPSdza2lwJz48YSBocmVmPScjISc+U2tpcCA8aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMgY3lhbi10ZXh0Jz5yZWRvPC9pPjwvYT48L2xpPiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSdkaXZpZGVyJz48L2xpPiAgICAgICAgICAgICAgICAgICAgPGxpIHN0YXR1cz0nY2xlYXInIGNsZWFyPSd0cnVlJz48YSBocmVmPScjISc+Q2xlYXIgRmlsdGVycyA8aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMnPmNsZWFyPC9pPjwvYT48L2xpPiAgICAgICAgICAgICAgICA8L3VsPiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwhLS0gdGVzdCB0b2dnbGUgLS0+ICAgICAgICAgICAgPCEtLSBjYXRlZ29yeSB0b2dnbGUgLS0+ICAgICAgICAgICAgPCEtLSBjYXRlZ29yeSB0b2dnbGUgLS0+ICAgICAgICAgICAgPCEtLSBjbGVhciBmaWx0ZXJzIC0tPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NoaXAgdHJhbnNwYXJlbnQgaGlkZSc+ICAgICAgICAgICAgICAgIDxhIGNsYXNzPScnIGlkPSdjbGVhci1maWx0ZXJzJyBhbHQ9J0NsZWFyIEZpbHRlcnMnIHRpdGxlPSdDbGVhciBGaWx0ZXJzJz4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2xvc2U8L2k+IENsZWFyICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8IS0tIGNsZWFyIGZpbHRlcnMgLS0+ICAgICAgICAgICAgPCEtLSBlbmFibGUgZGFzaGJvYXJkIC0tPiAgICAgICAgICAgIDxkaXYgaWQ9J3RvZ2dsZS10ZXN0LXZpZXctY2hhcnRzJyBjbGFzcz0nY2hpcCB0cmFuc3BhcmVudCc+ICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ncGluay10ZXh0JyBpZD0nZW5hYmxlLWRhc2hib2FyZCcgYWx0PSdFbmFibGUgRGFzaGJvYXJkJyB0aXRsZT0nRW5hYmxlIERhc2hib2FyZCc+ICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9J21hdGVyaWFsLWljb25zJz50cmFja19jaGFuZ2VzPC9pPiBEYXNoYm9hcmQgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8IS0tIGVuYWJsZSBkYXNoYm9hcmQgLS0+ICAgICAgICAgICAgPCEtLSBzZWFyY2ggLS0+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hpcCB0cmFuc3BhcmVudCcgYWx0PSdTZWFyY2ggVGVzdHMnIHRpdGxlPSdTZWFyY2ggVGVzdHMnPiAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0nc2VhcmNoLWRpdic+ICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMnPnNlYXJjaDwvaT4gU2VhcmNoICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0naW5wdXQtZmllbGQgbGVmdCBoaWRlJz4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nc2VhcmNoLXRlc3RzJyB0eXBlPSd0ZXh0JyBjbGFzcz0ndmFsaWRhdGUgYnJvd3Nlci1kZWZhdWx0JyBwbGFjZWhvbGRlcj0nU2VhcmNoIFRlc3RzLi4uJz4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPCEtLSBzZWFyY2ggLS0+ICAgICAgICA8L2Rpdj4gICAgPC9zZWN0aW9uPjxkaXYgaWQ9J3Rlc3Qtdmlldy1jaGFydHMnIGNsYXNzPSdzdWJ2aWV3LWZ1bGwnPiAgICA8ZGl2IGlkPSdjaGFydHMtcm93JyBjbGFzcz0ncm93IG5tLXYgbm0taCc+ICAgICAgICA8ZGl2IGNsYXNzPSdjb2wgczEyIG02IGw2IG5wLWgnPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NhcmQtcGFuZWwgbm0tdic+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2xlZnQgcGFuZWwtbmFtZSc+VGVzdHM8L2Rpdj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hhcnQtYm94Jz4gICAgICAgICAgICAgICAgICAgIDxjYW52YXMgaWQ9J3BhcmVudC1hbmFseXNpcycgd2lkdGg9JzEwMCcgaGVpZ2h0PSc4MCc+PC9jYW52YXM+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdibG9jayB0ZXh0LXNtYWxsJz4gICAgICAgICAgICAgICAgICAgIDxzcGFuPjxzcGFuIGNsYXNzPSdzdHJvbmcnPjA8L3NwYW4+IHRlc3QocykgcGFzc2VkPC9zcGFuPiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYmxvY2sgdGV4dC1zbWFsbCc+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nc3Ryb25nJz4xPC9zcGFuPiB0ZXN0KHMpIGZhaWxlZCwgPHNwYW4gY2xhc3M9J3N0cm9uZyc+MDwvc3Bhbj4gb3RoZXJzICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY29sIHMxMiBtNiBsNiBucC1oJz4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2FyZC1wYW5lbCBubS12Jz4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2xlZnQgcGFuZWwtbmFtZSc+U3RlcHM8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NoYXJ0LWJveCc+ICAgICAgICAgICAgICAgICAgICAgICAgPGNhbnZhcyBpZD0nY2hpbGQtYW5hbHlzaXMnIHdpZHRoPScxMDAnIGhlaWdodD0nODAnPjwvY2FudmFzPiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdibG9jayB0ZXh0LXNtYWxsJz4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48c3BhbiBjbGFzcz0nc3Ryb25nJz42PC9zcGFuPiBzdGVwKHMpIHBhc3NlZDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYmxvY2sgdGV4dC1zbWFsbCc+ICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J3N0cm9uZyc+Mjwvc3Bhbj4gc3RlcChzKSBmYWlsZWQsIDxzcGFuIGNsYXNzPSdzdHJvbmcnPjA8L3NwYW4+IG90aGVycyAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBjbGFzcz0nc3Vidmlldy1sZWZ0IGxlZnQnPiAgICAgICAgPGRpdiBjbGFzcz0ndmlldy1zdW1tYXJ5Jz4gICAgICAgICAgICA8aDU+VGVzdHM8L2g1PiAgICAgICAgICAgIDx1bCBpZD0ndGVzdC1jb2xsZWN0aW9uJyBjbGFzcz0ndGVzdC1jb2xsZWN0aW9uJz4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ndGVzdCBkaXNwbGF5ZWQgYWN0aXZlICBmYWlsJyBzdGF0dXM9J2ZhaWwnIHRlc3QtaWQ9Jzc5Jz4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSd0ZXN0LWhlYWRpbmcnPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ndGVzdC1uYW1lJz5UQ18yMTEyMV9SUF9OZXB0dW5lX0N1c3RvbWVyX1N1cHBvcnRfVmlld19Vc2VyPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ndGVzdC10aW1lJz4wMi0wNy0yMDIyIDE5OjQwOjUxPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ndGVzdC1zdGF0dXMgcmlnaHQgZmFpbCc+RmFpbDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSd0ZXN0LWNvbnRlbnQgaGlkZSc+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSd0ZXN0LXRpbWUtaW5mbyc+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J2xhYmVsIHN0YXJ0LXRpbWUnPjAyLTA3LTIwMjIgMTk6NDA6NTE8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J2xhYmVsIGVuZC10aW1lJz4wMi0wNy0yMDIyIDE5OjQyOjA0PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdsYWJlbCB0aW1lLXRha2VuIGdyZXkgbGlnaHRlbi0xIHdoaXRlLXRleHQnPjAwOjAxOjEzLjkzNjEzMTA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSd0ZXN0LXN0ZXBzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdib3JkZXJlZCB0YWJsZS1yZXN1bHRzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5TdGF0dXM8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+VGltZXN0YW1wPC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkRldGFpbHM8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9J2xvZycgc3RhdHVzPSdwYXNzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RhdHVzIHBhc3MnIHRpdGxlPSdwYXNzJyBhbHQ9J3Bhc3MnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2hlY2tfY2lyY2xlPC9pPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3RpbWVzdGFtcCc+MDItMDctMjAyMiAxOTo0MTowODwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0ZXAtZGV0YWlscyc+TmF2aWdhdGVkIHRvIHVybDogPG1hcms+aHR0cHM6Ly93d3cucHJlLXByb2QubmVwdHVuZTM2MC5jb20vPC9tYXJrPiBzdWNjZXNzZnVsbHk8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9J2xvZycgc3RhdHVzPSdwYXNzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RhdHVzIHBhc3MnIHRpdGxlPSdwYXNzJyBhbHQ9J3Bhc3MnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2hlY2tfY2lyY2xlPC9pPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3RpbWVzdGFtcCc+MDItMDctMjAyMiAxOTo0MTowOTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0ZXAtZGV0YWlscyc+U2VuZEtleXNUb0VsZW1lbnQtVXNlck5hbWVQZXJmb3JtZWQgYWN0aW9uICdTRU5EIEtFWVMnIG9uIGVsZW1lbnQgLSBDb250cm9sTmFtZTogPG1hcms+VXNlck5hbWU8L21hcms+LCBMb2N0b3IgOiA8bWFyaz5CeS5JZDogVXNlcm5hbWU8L21hcms+LCBUZXh0OiA8bWFyaz5ua3VtYXJAbmVwdHVuZXRnLmNvbTwvbWFyaz48L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9J2xvZycgc3RhdHVzPSdwYXNzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RhdHVzIHBhc3MnIHRpdGxlPSdwYXNzJyBhbHQ9J3Bhc3MnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2hlY2tfY2lyY2xlPC9pPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3RpbWVzdGFtcCc+MDItMDctMjAyMiAxOTo0MToxMDwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0ZXAtZGV0YWlscyc+U2VuZEtleXNUb0VsZW1lbnQtUGFzc3dvcmRQZXJmb3JtZWQgYWN0aW9uICdTRU5EIEtFWVMnIG9uIGVsZW1lbnQgLSBDb250cm9sTmFtZTogPG1hcms+UGFzc3dvcmQ8L21hcms+LCBMb2N0b3IgOiA8bWFyaz5CeS5JZDogcGFzc3dvcmQ8L21hcms+LCBUZXh0OiA8bWFyaz5OZXB0dW5lQDEyMzwvbWFyaz48L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9J2xvZycgc3RhdHVzPSdwYXNzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RhdHVzIHBhc3MnIHRpdGxlPSdwYXNzJyBhbHQ9J3Bhc3MnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2hlY2tfY2lyY2xlPC9pPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3RpbWVzdGFtcCc+MDItMDctMjAyMiAxOTo0MToyNzwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0ZXAtZGV0YWlscyc+Q2xpY2tFbGVtZW50LUxvZ2luUGVyZm9ybWVkIGFjdGlvbiAnQ0xJQ0snIG9uIGVsZW1lbnQgLSBDb250cm9sTmFtZTogPG1hcms+TG9naW48L21hcms+LCBsb2NhdG9yIC0gPG1hcms+QnkuWFBhdGg6IC8vYnV0dG9uW3RleHQoKT0nTG9naW4nXTwvbWFyaz48L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9J2xvZycgc3RhdHVzPSdwYXNzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RhdHVzIHBhc3MnIHRpdGxlPSdwYXNzJyBhbHQ9J3Bhc3MnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2hlY2tfY2lyY2xlPC9pPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3RpbWVzdGFtcCc+MDItMDctMjAyMiAxOTo0MTozMDwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0ZXAtZGV0YWlscyc+Q2xpY2tFbGVtZW50LVBsYXRmb3JtIE1hbmFnZW1lbnRQZXJmb3JtZWQgYWN0aW9uICdDTElDSycgb24gZWxlbWVudCAtIENvbnRyb2xOYW1lOiA8bWFyaz5QbGF0Zm9ybSBNYW5hZ2VtZW50PC9tYXJrPiwgbG9jYXRvciAtIDxtYXJrPkJ5LlhQYXRoOiAvL3NwYW5bdGV4dCgpPSdQTEFURk9STSBNQU5BR0VNRU5UJ108L21hcms+PC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSdsb2cnIHN0YXR1cz0ncGFzcyc+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0YXR1cyBwYXNzJyB0aXRsZT0ncGFzcycgYWx0PSdwYXNzJz48aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMnPmNoZWNrX2NpcmNsZTwvaT48L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSd0aW1lc3RhbXAnPjAyLTA3LTIwMjIgMTk6NDE6MzM8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSdzdGVwLWRldGFpbHMnPkNsaWNrRWxlbWVudC1Vc2VyIE1hbmFnZW1lbnRQZXJmb3JtZWQgYWN0aW9uICdDTElDSycgb24gZWxlbWVudCAtIENvbnRyb2xOYW1lOiA8bWFyaz5Vc2VyIE1hbmFnZW1lbnQ8L21hcms+LCBsb2NhdG9yIC0gPG1hcms+QnkuWFBhdGg6IC8vc3Bhblt0ZXh0KCkgPSAnVVNFUiBNQU5BR0VNRU5UJ108L21hcms+PC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSdsb2cnIHN0YXR1cz0nZmFpbCc+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0YXR1cyBmYWlsJyB0aXRsZT0nZmFpbCcgYWx0PSdmYWlsJz48aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMnPmNhbmNlbDwvaT48L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSd0aW1lc3RhbXAnPjAyLTA3LTIwMjIgMTk6NDI6MDQ8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSdzdGVwLWRldGFpbHMnPkNoZWNrRWxlbWVudERpc3BsYXllZCAtIFZpZXcgVXNlciBFbGVtZW50IDxtYXJrPlZpZXcgVXNlcjwvbWFyaz4gaXMgbm90IGRpc3BsYXllZCAtIExvY2F0b3I6IDxtYXJrPkJ5LklkOiBpdGVtbGluazwvbWFyaz48L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9J2xvZycgc3RhdHVzPSdmYWlsJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RhdHVzIGZhaWwnIHRpdGxlPSdmYWlsJyBhbHQ9J2ZhaWwnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2FuY2VsPC9pPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3RpbWVzdGFtcCc+MDItMDctMjAyMiAxOTo0MjowNDwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0ZXAtZGV0YWlscyc+U25hcHNob3QgQmVsb3cgOjxpbWcgZGF0YS1mZWF0aGVybGlnaHQ9J1NjcmVlblNob3RzXFNjcmVlblNob3QwMi0wNy0yMDIyMTk0MjA0LmpwZWcnIGNsYXNzPSdzdGVwLWltZycgc3JjPSdTY3JlZW5TaG90c1xTY3JlZW5TaG90MDItMDctMjAyMjE5NDIwNC5qcGVnJyBkYXRhLXNyYz0nU2NyZWVuU2hvdHNcU2NyZWVuU2hvdDAyLTA3LTIwMjIxOTQyMDQuanBlZyc+PC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2xpPiAgICAgICAgICAgIDwvdWw+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDwhLS0gc3VidmlldyBsZWZ0IC0tPiAgICA8ZGl2IGNsYXNzPSdzdWJ2aWV3LXJpZ2h0IGxlZnQnPiAgICAgICAgPGRpdiBjbGFzcz0ndmlldy1zdW1tYXJ5Jz4gICAgICAgICAgICA8aDUgY2xhc3M9J3Rlc3QtbmFtZSc+PC9oNT4gICAgICAgICAgICA8ZGl2IGlkPSdzdGVwLWZpbHRlcnMnIGNsYXNzPSJyaWdodCI+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJibHVlLXRleHQiIHN0YXR1cz0iaW5mbyIgYWx0PSJpbmZvIiB0aXRsZT0iaW5mbyI+PGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5pbmZvX291dGxpbmU8L2k+PC9zcGFuPiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ3JlZW4tdGV4dCIgc3RhdHVzPSJwYXNzIiBhbHQ9InBhc3MiIHRpdGxlPSJwYXNzIj48aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmNoZWNrX2NpcmNsZTwvaT48L3NwYW4+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZWQtdGV4dCIgc3RhdHVzPSJmYWlsIiBhbHQ9ImZhaWwiIHRpdGxlPSJmYWlsIj48aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmNhbmNlbDwvaT48L3NwYW4+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZWQtdGV4dCB0ZXh0LWRhcmtlbi00IiBzdGF0dXM9ImZhdGFsIiBhbHQ9ImZhdGFsIiB0aXRsZT0iZmF0YWwiPjxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+Y2FuY2VsPC9pPjwvc3Bhbj4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpbmstdGV4dCB0ZXh0LWxpZ2h0ZW4tMSIgc3RhdHVzPSJlcnJvciIgYWx0PSJlcnJvciIgdGl0bGU9ImVycm9yIj48aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmVycm9yPC9pPjwvc3Bhbj4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9yYW5nZS10ZXh0IiBhbHQ9Indhcm5pbmciIHN0YXR1cz0id2FybmluZyIgdGl0bGU9Indhcm5pbmciPjxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+d2FybmluZzwvaT48L3NwYW4+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZWFsLXRleHQiIHN0YXR1cz0ic2tpcCIgYWx0PSJza2lwIiB0aXRsZT0ic2tpcCI+PGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5yZWRvPC9pPjwvc3Bhbj4gICAgICAgICAgICAgICAgPHNwYW4gc3RhdHVzPSJjbGVhciIgYWx0PSJDbGVhciBmaWx0ZXJzIiB0aXRsZT0iQ2xlYXIgZmlsdGVycyI+PGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5jbGVhcjwvaT48L3NwYW4+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDwhLS0gc3VidmlldyByaWdodCAtLT48L2Rpdj48IS0tIHRlc3QgdmlldyAtLT4gICAgICAgICAgICA8IS0tIGNhdGVnb3J5IHZpZXcgLS0+ICAgICAgICAgICAgICAgIDxkaXYgaWQ9J2V4Y2VwdGlvbi12aWV3JyBjbGFzcz0ndmlldyBoaWRlJz4gICAgICAgIDxzZWN0aW9uIGlkPSdjb250cm9scyc+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY29udHJvbHMgZ3JleSBsaWdodGVuLTQnPiAgICAgICAgICAgICAgICA8IS0tIHNlYXJjaCAtLT4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hpcCB0cmFuc3BhcmVudCcgYWx0PSdTZWFyY2ggVGVzdHMnIHRpdGxlPSdTZWFyY2ggVGVzdHMnPiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9J3NlYXJjaC1kaXYnPiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+c2VhcmNoPC9pPiBTZWFyY2ggICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2lucHV0LWZpZWxkIGxlZnQgaGlkZSc+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSdzZWFyY2gtdGVzdHMnIHR5cGU9J3RleHQnIGNsYXNzPSd2YWxpZGF0ZSBicm93c2VyLWRlZmF1bHQnIHBsYWNlaG9sZGVyPSdTZWFyY2ggVGVzdHMuLi4nPiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8IS0tIHNlYXJjaCAtLT4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvc2VjdGlvbj4gICAgICAgIDxkaXYgY2xhc3M9J3N1YnZpZXctbGVmdCBsZWZ0Jz4gICAgICAgICAgICA8ZGl2IGNsYXNzPSd2aWV3LXN1bW1hcnknPiAgICAgICAgICAgICAgICA8aDU+RXhjZXB0aW9uczwvaDU+ICAgICAgICAgICAgICAgIDx1bCBpZD0nZXhjZXB0aW9uLWNvbGxlY3Rpb24nIGNsYXNzPSdleGNlcHRpb24tY29sbGVjdGlvbic+ICAgICAgICAgICAgICAgIDwvdWw+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgY2xhc3M9J3N1YnZpZXctcmlnaHQgbGVmdCc+ICAgICAgICAgICAgPGRpdiBjbGFzcz0ndmlldy1zdW1tYXJ5Jz4gICAgICAgICAgICAgICAgPGg1IGNsYXNzPSdleGNlcHRpb24tbmFtZSc+PC9oNT4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48IS0tIGV4Y2VwdGlvbiB2aWV3IC0tPiAgICAgICAgICAgIDxkaXYgaWQ9J2Rhc2hib2FyZC12aWV3JyBjbGFzcz0ndmlldyBoaWRlJz4gICAgPGRpdiBjbGFzcz0nY2FyZC1wYW5lbCB0cmFuc3BhcmVudCBucC12Jz4gICAgICAgIDxoNT5EYXNoYm9hcmQ8L2g1PiAgICAgICAgPGRpdiBjbGFzcz0ncm93Jz4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdjb2wgczInPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdjYXJkLXBhbmVsIHInPiA8c3Bhbj5UZXN0czwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwYW5lbC1sZWFkJz4xPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NvbCBzMic+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NhcmQtcGFuZWwgcic+IDxzcGFuPlN0ZXBzPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3BhbmVsLWxlYWQnPjg8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY29sIHMyJz4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2FyZC1wYW5lbCByJz4gICAgICAgICAgICAgICAgICAgIFN0YXJ0ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwYW5lbC1sZWFkJz4wMi0wNy0yMDIyIDE5OjQwOjUxPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NvbCBzMic+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NhcmQtcGFuZWwgcic+ICAgICAgICAgICAgICAgICAgICBFbmQgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3BhbmVsLWxlYWQnPjAyLTA3LTIwMjIgMTk6NDI6MDk8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY29sIHMyJz4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2FyZC1wYW5lbCByJz4gICAgICAgICAgICAgICAgICAgIFRpbWUgVGFrZW4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3BhbmVsLWxlYWQnPjAwOjAxOjE3Ljk4Nzc3NzE8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NvbCBzNCc+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdjYXJkLXBhbmVsJz4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ncmlnaHQgbGFiZWwgY3lhbiB3aGl0ZS10ZXh0Jz5FbnZpcm9ubWVudDwvc3Bhbj48cD4mbmJzcDs8L3A+ICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+TmFtZTwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+VmFsdWU8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Ib3N0IE5hbWU8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5RWkxUMTI5PC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlVzZXIgTmFtZTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPm5rdW1hckBuZXB0dW5ldGcuY29tPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlByb2plY3Q8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5OZXB0dW5lIDM2MDwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5SZWxlYXNlPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+UmVsZWFzZSAxLjQuOS4yPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlRlc3QgQ3ljbGU8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5SZWdyZXNzaW9uIFRlc3RpbmcgLSBBdXRvbWF0aW9uPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlRlc3QgU3VpdGU8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5VSS00PC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj48IS0tIGRhc2hib2FyZCB2aWV3IC0tPiAgICAgICAgICAgIDwhLS0gZXhjZXB0aW9uIHZpZXcgLS0+CQk8L2Rpdj4JCTwhLS0gY29udGFpbmVyIC0tPgkJPHNjcmlwdD4JCQl2YXIgc3RhdHVzR3JvdXAgPSB7CQkJICAgIHBhc3NQYXJlbnQ6IDAsCQkJICAgIGZhaWxQYXJlbnQ6IDEsCQkJICAgIGZhdGFsUGFyZW50OiAwLAkJCSAgICBlcnJvclBhcmVudDogMCwJCQkgICAgd2FybmluZ1BhcmVudDogMCwJCQkgICAgc2tpcFBhcmVudDogMCwJCQkJCQkJICAgIHBhc3NDaGlsZDogNiwJCQkgICAgZmFpbENoaWxkOiAyLAkJCSAgICBmYXRhbENoaWxkOiAwLAkJCSAgICBlcnJvckNoaWxkOiAwLAkJCSAgICB3YXJuaW5nQ2hpbGQ6IDAsCQkJICAgIHNraXBDaGlsZDogMCwJCQkgICAgaW5mb0NoaWxkOiAwLAkJCQkJCQkgICAgcGFzc0dyYW5kQ2hpbGQ6IDAsCQkJICAgIGZhaWxHcmFuZENoaWxkOiAwLAkJCSAgICBmYXRhbEdyYW5kQ2hpbGQ6IDAsCQkJICAgIGVycm9yR3JhbmRDaGlsZDogMCwJCQkgICAgd2FybmluZ0dyYW5kQ2hpbGQ6IDAsCQkJICAgIHNraXBHcmFuZENoaWxkOiAwLAkJCSAgICBpbmZvR3JhbmRDaGlsZDogMAkJCX07CQk8L3NjcmlwdD4JCTxzY3JpcHQgc3JjPSdodHRwczovL2Nkbi5yYXdnaXQuY29tL2Fuc2hvb2Fyb3JhL2V4dGVudHJlcG9ydHMtY3NoYXJwL2U0NjgwNTRkNjdkOTNjMmZkOWM4ZjBmNjBlMzFhN2VhMDlmYTNiZjYvZGlzdC9qcy9leHRlbnQuanMnIHR5cGU9J3RleHQvamF2YXNjcmlwdCc+PC9zY3JpcHQ+CQkJCQkJICAgICAgICAgICAgPHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPgkJCSAgICAgICAgICAgICAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CTwvYm9keT4JPC9odG1sPg=="}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 07:42:16=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 7606c36e-8d40-46bd-9435-8c34da01fc17
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http GET request=======07-02-2022 07:55:03========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-cases/46191773
Auth Header:bearer 1fd1ac8b-7618-49fd-b898-dd12b06c7a73
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http GET request=======07-02-2022 08:10:21========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-cases/47026573
Auth Header:bearer f1aca5bf-66ad-42ed-bd39-0bf69b86790c
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 08:21:17=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9094634&parentType=test-suite
Auth Header:bearer c9829bc6-afbf-4c51-927d-4933b6b810ea
Json Content:{"name":"Permissions_Validation_Left Navigation_Endpoint Management Left Navigation_Utility User_OFF","test_case":{"id":47026653}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 08:21:17=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 08:25:08=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295553610/test-logs
Auth Header:bearer b742eb7b-ae3d-4ecb-bdf2-55cca65b1d5a
Json Content:{"exe_start_date": "2022-07-02T20:23:52+05:30", "exe_end_date": "2022-07-02T20:24:53+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 08:25:08=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer b742eb7b-ae3d-4ecb-bdf2-55cca65b1d5a
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http GET request=======07-02-2022 08:38:33========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-cases/47026692
Auth Header:bearer bcaf9e3a-6543-413c-aba9-8297dc5b1507
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http GET request=======07-02-2022 09:21:59========
URL:https://ntg.qtestnet.com/api/v3/projects
Auth Header:bearer 5e95123b-557f-4ca7-8c83-7b75dc9d5b65
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 09:29:03=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9094634&parentType=test-suite
Auth Header:bearer 6003619d-f673-4fb3-a9ef-4e6b90fd00af
Json Content:{"name":"Permissions_Validation_Settings Feature Block_Lora Private Network Settings_Neptune System Admin_ON","test_case":{"id":47041424}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 09:29:03=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 09:41:05=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9094634&parentType=test-suite
Auth Header:bearer 42d80a44-079a-4916-8cf5-9eceec0ff2dd
Json Content:{"name":"Neptune 360 - Role Management - Reporting - Endpoint Consumption Report - Utility Read Only - Enabled","test_case":{"id":48154701}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 09:41:05=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 09:47:48=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9094634&parentType=test-suite
Auth Header:bearer b3679c0a-40cd-40d4-a342-899db842bde5
Json Content:{"name":"Neptune 360 - Role Management - Reporting - Endpoint Consumption Report - Utility Meter Reader - Enabled","test_case":{"id":48154708}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 09:47:48=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http GET request=======07-02-2022 09:54:35========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/releases
Auth Header:bearer 8604ad85-0712-4a0a-a236-7b49185dd854
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 09:59:28=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9094634&parentType=test-suite
Auth Header:bearer 81e45b71-1fbb-4f99-9d30-4e26dd4f0a3e
Json Content:{"name":"Neptune 360 - Role Management - Utility Admin - Reporting Permission Block - Reverse Flow Report - Enabled","test_case":{"id":49571360}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 09:59:28=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http GET request=======07-02-2022 10:19:31========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/releases
Auth Header:bearer ff3e2cb6-1d2c-46c4-95e6-d090be73a5c3
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-02-2022 11:03:03=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9094634&parentType=test-suite
Auth Header:bearer 01461a02-4470-4c17-b00b-08ba025d09c1
Json Content:{"name":"Permissions_Billing services Feature Block_Edit Data Translations_Displays","test_case":{"id":50191974}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 11:03:03=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-02-2022 11:06:10=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9094634&parentType=test-suite
Auth Header:bearer f0dd5634-8e86-4c0f-bf88-25da97af09bc
Json Content:{"name":"Neptune Only - Ability to create New Role","test_case":{"id":19238436}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-02-2022 11:06:10=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http GET request=======07-02-2022 11:26:18========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-cycles?parentId=1044576&parentType=release
Auth Header:bearer b64f01f4-767f-4e53-b2db-61657e36fbb1
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
