==============Error in http POST request=======07-01-2022 12:16:02=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 529cc001-9bb8-4861-a62b-83051d576884
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 12:27:23=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 35e27709-50fc-406d-a83d-8324e7c503c7
Json Content:{"name":"Roles and Permissions_Utility Meter Reader_Device Management Menu Item ","test_case":{"id":27481409}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 12:27:23=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-01-2022 12:32:16=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295279847/test-logs
Auth Header:bearer de54285e-ab75-494f-8d58-c240b6a27511
Json Content:{"exe_start_date": "2022-07-01T00:31:33+05:30", "exe_end_date": "2022-07-01T00:32:06+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 12:32:17=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer de54285e-ab75-494f-8d58-c240b6a27511
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 12:42:29=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 88372250-b6dd-4d59-90f0-5d0ebc183767
Json Content:{"name":"Roles and Permissions_Utility Meter Reader_Enable/Disable Feature Groups","test_case":{"id":27481427}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 12:42:29=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-01-2022 01:15:44=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer dfc3d31e-277a-48c4-9b84-a64199739366
Json Content:{"name":"Roles and Permissions_Display as Reader_Utility User_Disabled","test_case":{"id":27597890}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 01:15:44=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-01-2022 01:25:48=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295287138/test-logs
Auth Header:bearer b89ef8c4-02ef-49ce-9c82-7b165d31e581
Json Content:{"exe_start_date": "2022-07-01T01:24:03+05:30", "exe_end_date": "2022-07-01T01:25:34+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 01:25:48=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer b89ef8c4-02ef-49ce-9c82-7b165d31e581
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 01:43:35=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 75d6bf1f-06f2-4bc8-89b2-bd6748bc8c5a
Json Content:{"name":"Roles and Permissions - Neptune System Administrator -  Alert Notifications - Default Yes - Edit Alert Notifications","test_case":{"id":28873623}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 01:43:35=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-01-2022 01:49:17=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer c676ce36-2e74-4d81-b814-1c2e85c63860
Json Content:{"name":"Roles and Permissions - Neptune System Administrator -  Left Navigation - Alert Configuration - Default Yes - Edit Alert Configurations","test_case":{"id":28873626}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 01:49:17=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-01-2022 01:55:20=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer c73ba6b0-0b51-46fe-96d1-8e75d6f3b654
Json Content:{"name":"Roles and Permissions - Neptune System Administrator -  Left Navigation - Alert Configuration - No - View Alert Configurations","test_case":{"id":28873631}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 01:55:20=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http GET request=======07-01-2022 01:56:01========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/releases
Auth Header:bearer ff48c12b-92c3-44aa-8ca8-e5becc2d8e61
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 01:56:02=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer ff48c12b-92c3-44aa-8ca8-e5becc2d8e61
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 01:57:09=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 05bb256c-536a-41c1-807a-d470588e2368
Json Content:{"name":"Roles and Permissions - Utility Administrator -  Alert Notifications - No - Profile Menu - Displayed ","test_case":{"id":28873639}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 01:57:09=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http GET request=======07-01-2022 01:59:07========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-cases/28873641
Auth Header:bearer 7d92c47a-55dd-4d68-b624-104cda5c6fe5
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 01:59:08=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 7d92c47a-55dd-4d68-b624-104cda5c6fe5
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 02:09:13=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer cd62514f-6c1c-44d0-8b57-eccd55667b3c
Json Content:{"name":"Roles and Permissions - Utility Meter Reader -  Alert Notifications - Yes - Edit Alert Notifications","test_case":{"id":28873653}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 02:09:13=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-01-2022 02:48:10=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 3694dbf8-3653-4af1-9a25-73bad709324d
Json Content:{"name":"Role Management Screen - Utility User - Dashboard Network Health - Permission Available","test_case":{"id":28910368}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 02:48:10=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-01-2022 03:03:17=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 9e42a9b8-27fd-49f2-800e-b4b8eec09278
Json Content:{"name":"Role Management Screen - Utility User - View All Network Health Dashboard Widgets - Permission Available","test_case":{"id":28910386}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 03:03:17=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-01-2022 03:08:51=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer f20ce9d0-4d53-4db3-adc3-6e7bb7574feb
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 03:16:34=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 29c87ca7-da15-4713-9495-0c78fe124782
Json Content:{"name":"Permissions Validation_Customer Inquiry_Initiate Refresh Reads_Neptune CSR _Off","test_case":{"id":29276661}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 03:16:34=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http GET request=======07-01-2022 03:25:44========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-cycles?parentId=1044576&parentType=release
Auth Header:bearer 90d2c57b-5b72-4268-8813-3f1f19ddb3b2
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 03:25:45=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 90d2c57b-5b72-4268-8813-3f1f19ddb3b2
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 03:37:04=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 5bc862eb-7631-4af0-9a8c-19d1bdf23211
Json Content:{"name":"Permissions Validation_Reports_Coded Notes Report_Utility Meter Reader_Default ON","test_case":{"id":30430075}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 03:37:04=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-01-2022 03:37:52=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295345065/test-logs
Auth Header:bearer 7e5f2895-9329-489b-bd08-09d20198cbaa
Json Content:{"exe_start_date": "2022-07-01T03:37:06+05:30", "exe_end_date": "2022-07-01T03:37:40+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 03:37:53=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 7e5f2895-9329-489b-bd08-09d20198cbaa
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 03:50:21=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 37cc3da0-c6ef-40a9-a02d-d48d2f5505a7
Json Content:{"name":"Permissions Validation_Reports_Comments Report_Utility Admin_OFF","test_case":{"id":30430461}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 03:50:21=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http GET request=======07-01-2022 04:00:33========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-suites?parentId=16040639&parentType=test-cycle
Auth Header:bearer 65d6da6a-ef2b-44a6-ae8a-1348c7ae212f
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 04:00:34=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 65d6da6a-ef2b-44a6-ae8a-1348c7ae212f
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http GET request=======07-01-2022 04:53:29========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/releases
Auth Header:bearer 168d9d84-ea13-4f3d-9d78-1b7507d4798d
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 04:53:30=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 168d9d84-ea13-4f3d-9d78-1b7507d4798d
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 04:57:41=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer f1583be7-505b-4811-86c9-83e47be96f1f
Json Content:{"name":"Permissions Validation_Left Navigation_Reports_Utility User_Default ON","test_case":{"id":32413350}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 04:57:41=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-01-2022 07:29:09=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 65548b51-4279-4b69-8c05-cd594ee21757
Json Content:{"name":"Permissions_Validation_Left Navigation_Partner Management_Utility Meter Reader_Default_OFF","test_case":{"id":34102137}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 07:29:09=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-01-2022 04:15:18=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295325261/test-logs
Auth Header:bearer 069b97f1-fef0-4295-b33e-f0ca40382856
Json Content:{"exe_start_date": "2022-07-01T16:14:20+05:30", "exe_end_date": "2022-07-01T16:15:03+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 04:15:18=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 069b97f1-fef0-4295-b33e-f0ca40382856
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 04:28:07=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295339373/test-logs
Auth Header:bearer 70aa2c42-b5b9-4bcc-ab5a-16021f191775
Json Content:{"exe_start_date": "2022-07-01T16:27:48+05:30", "exe_end_date": "2022-07-01T16:27:53+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":"PCFET0NUWVBFIGh0bWw+PGh0bWw+ICAgIDxoZWFkPiAgICA8bWV0YSBjaGFyc2V0PSdVVEYtOCcgLz4gICAgPG1ldGEgbmFtZT0nZGVzY3JpcHRpb24nIGNvbnRlbnQ9JycgLz4gICAgPG1ldGEgbmFtZT0ncm9ib3RzJyBjb250ZW50PSdub29kcCwgbm95ZGlyJyAvPiAgICA8bWV0YSBuYW1lPSd2aWV3cG9ydCcgY29udGVudD0nd2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEnIC8+ICAgIDxsaW5rIGhyZWY9J2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Tb3VyY2UrU2FucytQcm86NDAwLDYwMCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+ICAgIDxsaW5rIGhyZWY9Imh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vaWNvbj9mYW1pbHk9TWF0ZXJpYWwrSWNvbnMiIHJlbD0ic3R5bGVzaGVldCI+ICAgIDxsaW5rIGhyZWY9J2h0dHBzOi8vY2RuLnJhd2dpdC5jb20vYW5zaG9vYXJvcmEvZXh0ZW50cmVwb3J0cy1jc2hhcnAvM2I2Y2MwNGZkMjQxYjk3ODI2MDZlNTdmYzVlODRmMGU0MjE3MmMwOC9kaXN0L2Nzcy9leHRlbnQuY3NzJyB0eXBlPSd0ZXh0L2NzcycgcmVsPSdzdHlsZXNoZWV0JyAvPiAgICA8dGl0bGU+RXh0ZW50PC90aXRsZT48L2hlYWQ+ICAgIAk8Ym9keSBjbGFzcz0nZXh0ZW50IGRhcmsgZGVmYXVsdCBoaWRlLW92ZXJmbG93ICc+CQk8ZGl2IGlkPSd0aGVtZS1zZWxlY3RvcicgYWx0PSdDbGljayB0byB0b2dnbGUgdGhlbWUuIFRvIGVuYWJsZSBieSBkZWZhdWx0LCB1c2UgdGhlbWUgY29uZmlndXJhdGlvbi4nIHRpdGxlPSdDbGljayB0byB0b2dnbGUgdGhlbWUuIFRvIGVuYWJsZSBieSBkZWZhdWx0LCB1c2UgdGhlbWUgY29uZmlndXJhdGlvbi4nPgkJCTxzcGFuPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+ZGVza3RvcF93aW5kb3dzPC9pPjwvc3Bhbj4JCTwvZGl2PgkJPG5hdj4gICAgPGRpdiBjbGFzcz0ibmF2LXdyYXBwZXIiPiAgICAgICAgPGEgaHJlZj0iaHR0cDovL2V4dGVudHJlcG9ydHMucmVsZXZhbnRjb2Rlcy5jb20iIGNsYXNzPSJicmFuZC1sb2dvIGJsdWUgZGFya2VuLTMiPkV4dGVudDwvYT4gICAgICAgIDwhLS0gc2xpZGVvdXQgbWVudSAtLT4gICAgICAgIDx1bCBpZD0nc2xpZGUtb3V0JyBjbGFzcz0nc2lkZS1uYXYgZml4ZWQgaGlkZS1vbi1tZWQtYW5kLWRvd24nPiAgICAgICAgICAgIDxsaSBjbGFzcz0nd2F2ZXMtZWZmZWN0IGFjdGl2ZSc+PGEgaHJlZj0nIyEnIHZpZXc9J3Rlc3Qtdmlldycgb25jbGljaz0iY29uZmlndXJlVmlldygwKTtjaGFydHNWaWV3KCd0ZXN0Jyk7Ij48aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMnPmRhc2hib2FyZDwvaT48L2E+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9J3dhdmVzLWVmZmVjdCc+PGEgaHJlZj0nIyEnIG9uY2xpY2s9ImNvbmZpZ3VyZVZpZXcoLTEpO2NoYXJ0c1ZpZXcoJ2Rhc2hib2FyZCcpOyIgdmlldz0nZGFzaGJvYXJkLXZpZXcnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+dHJhY2tfY2hhbmdlczwvaT48L2k+PC9hPjwvbGk+ICAgICAgICA8L3VsPiAgICAgICAgPCEtLSByZXBvcnQgbmFtZSAtLT4gICAgICAgIDxzcGFuIGNsYXNzPSdyZXBvcnQtbmFtZSc+QXV0b21hdGlvbiBSZXBvcnQ8L3NwYW4+ICAgICAgICA8IS0tIHJlcG9ydCBoZWFkbGluZSAtLT4gICAgICAgIDxzcGFuIGNsYXNzPSdyZXBvcnQtaGVhZGxpbmUnPjwvc3Bhbj4gICAgICAgIDwhLS0gbmF2LXJpZ2h0IC0tPiAgICAgICAgPHVsIGlkPSduYXYtbW9iaWxlJyBjbGFzcz0ncmlnaHQgaGlkZS1vbi1tZWQtYW5kLWRvd24gbmF2LXJpZ2h0Jz4gICAgICAgICAgICA8YT4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J3N1aXRlLXN0YXJ0LXRpbWUgbGFiZWwgYmx1ZSBkYXJrZW4tMyc+MDEtMDctMjAyMiAxNjoyNzo0NiBJbmRpYSBTdGFuZGFyZCBUaW1lPC9zcGFuPiAgICAgICAgICAgIDwvYT4gICAgICAgICAgICA8YT4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxhYmVsIGJsdWUgZGFya2VuLTMiPjMuMS4wPC9zcGFuPiAgICAgICAgICAgIDwvYT4gICAgICAgIDwvdWw+ICAgIDwvZGl2PjwvbmF2PgkJPCEtLSBjb250YWluZXIgLS0+CQk8ZGl2IGNsYXNzPSdjb250YWluZXInPiAgICAgICAgICAgIDxkaXYgaWQ9J3Rlc3QtdmlldycgY2xhc3M9J3ZpZXcnPiAgICA8c2VjdGlvbiBpZD0nY29udHJvbHMnPiAgICAgICAgPGRpdiBjbGFzcz0nY29udHJvbHMgZ3JleSBsaWdodGVuLTQnPiAgICAgICAgICAgIDwhLS0gdGVzdCB0b2dnbGUgLS0+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hpcCB0cmFuc3BhcmVudCc+ICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdkcm9wZG93bi1idXR0b24gdGVzdHMtdG9nZ2xlJyBkYXRhLWFjdGl2YXRlcz0ndGVzdHMtdG9nZ2xlJyBkYXRhLWNvbnN0cmFpbndpZHRoPSd0cnVlJyBkYXRhLWJlbG93b3JpZ2luPSd0cnVlJyBkYXRhLWhvdmVyPSd0cnVlJyBocmVmPScjJz4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+d2FybmluZzwvaT4gU3RhdHVzICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgPHVsIGlkPSd0ZXN0cy10b2dnbGUnIGNsYXNzPSdkcm9wZG93bi1jb250ZW50Jz4gICAgICAgICAgICAgICAgICAgIDxsaSBzdGF0dXM9J3Bhc3MnPjxhIGhyZWY9JyMhJz5QYXNzIDxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyBncmVlbi10ZXh0Jz5jaGVja19jaXJjbGU8L2k+PC9hPjwvbGk+ICAgICAgICAgICAgICAgICAgICA8bGkgc3RhdHVzPSdmYWlsJz48YSBocmVmPScjISc+RmFpbCA8aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMgcmVkLXRleHQnPmNhbmNlbDwvaT48L2E+PC9saT4gICAgICAgICAgICAgICAgICAgIDxsaSBzdGF0dXM9J2Vycm9yJz48YSBocmVmPScjISc+RXJyb3IgPGkgY2xhc3M9J21hdGVyaWFsLWljb25zIHJlZC10ZXh0IGxpZ2h0ZW4tMic+ZXJyb3I8L2k+PC9hPjwvbGk+ICAgICAgICAgICAgICAgICAgICA8bGkgc3RhdHVzPSd3YXJuaW5nJz48YSBocmVmPScjISc+V2FybmluZyA8aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMgb3JhbmdlLXRleHQnPndhcm5pbmc8L2k+PC9hPjwvbGk+ICAgICAgICAgICAgICAgICAgICA8bGkgc3RhdHVzPSdza2lwJz48YSBocmVmPScjISc+U2tpcCA8aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMgY3lhbi10ZXh0Jz5yZWRvPC9pPjwvYT48L2xpPiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSdkaXZpZGVyJz48L2xpPiAgICAgICAgICAgICAgICAgICAgPGxpIHN0YXR1cz0nY2xlYXInIGNsZWFyPSd0cnVlJz48YSBocmVmPScjISc+Q2xlYXIgRmlsdGVycyA8aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMnPmNsZWFyPC9pPjwvYT48L2xpPiAgICAgICAgICAgICAgICA8L3VsPiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwhLS0gdGVzdCB0b2dnbGUgLS0+ICAgICAgICAgICAgPCEtLSBjYXRlZ29yeSB0b2dnbGUgLS0+ICAgICAgICAgICAgPCEtLSBjYXRlZ29yeSB0b2dnbGUgLS0+ICAgICAgICAgICAgPCEtLSBjbGVhciBmaWx0ZXJzIC0tPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NoaXAgdHJhbnNwYXJlbnQgaGlkZSc+ICAgICAgICAgICAgICAgIDxhIGNsYXNzPScnIGlkPSdjbGVhci1maWx0ZXJzJyBhbHQ9J0NsZWFyIEZpbHRlcnMnIHRpdGxlPSdDbGVhciBGaWx0ZXJzJz4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2xvc2U8L2k+IENsZWFyICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8IS0tIGNsZWFyIGZpbHRlcnMgLS0+ICAgICAgICAgICAgPCEtLSBlbmFibGUgZGFzaGJvYXJkIC0tPiAgICAgICAgICAgIDxkaXYgaWQ9J3RvZ2dsZS10ZXN0LXZpZXctY2hhcnRzJyBjbGFzcz0nY2hpcCB0cmFuc3BhcmVudCc+ICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ncGluay10ZXh0JyBpZD0nZW5hYmxlLWRhc2hib2FyZCcgYWx0PSdFbmFibGUgRGFzaGJvYXJkJyB0aXRsZT0nRW5hYmxlIERhc2hib2FyZCc+ICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9J21hdGVyaWFsLWljb25zJz50cmFja19jaGFuZ2VzPC9pPiBEYXNoYm9hcmQgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8IS0tIGVuYWJsZSBkYXNoYm9hcmQgLS0+ICAgICAgICAgICAgPCEtLSBzZWFyY2ggLS0+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hpcCB0cmFuc3BhcmVudCcgYWx0PSdTZWFyY2ggVGVzdHMnIHRpdGxlPSdTZWFyY2ggVGVzdHMnPiAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0nc2VhcmNoLWRpdic+ICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMnPnNlYXJjaDwvaT4gU2VhcmNoICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0naW5wdXQtZmllbGQgbGVmdCBoaWRlJz4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nc2VhcmNoLXRlc3RzJyB0eXBlPSd0ZXh0JyBjbGFzcz0ndmFsaWRhdGUgYnJvd3Nlci1kZWZhdWx0JyBwbGFjZWhvbGRlcj0nU2VhcmNoIFRlc3RzLi4uJz4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPCEtLSBzZWFyY2ggLS0+ICAgICAgICA8L2Rpdj4gICAgPC9zZWN0aW9uPjxkaXYgaWQ9J3Rlc3Qtdmlldy1jaGFydHMnIGNsYXNzPSdzdWJ2aWV3LWZ1bGwnPiAgICA8ZGl2IGlkPSdjaGFydHMtcm93JyBjbGFzcz0ncm93IG5tLXYgbm0taCc+ICAgICAgICA8ZGl2IGNsYXNzPSdjb2wgczEyIG02IGw2IG5wLWgnPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NhcmQtcGFuZWwgbm0tdic+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2xlZnQgcGFuZWwtbmFtZSc+VGVzdHM8L2Rpdj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hhcnQtYm94Jz4gICAgICAgICAgICAgICAgICAgIDxjYW52YXMgaWQ9J3BhcmVudC1hbmFseXNpcycgd2lkdGg9JzEwMCcgaGVpZ2h0PSc4MCc+PC9jYW52YXM+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdibG9jayB0ZXh0LXNtYWxsJz4gICAgICAgICAgICAgICAgICAgIDxzcGFuPjxzcGFuIGNsYXNzPSdzdHJvbmcnPjA8L3NwYW4+IHRlc3QocykgcGFzc2VkPC9zcGFuPiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYmxvY2sgdGV4dC1zbWFsbCc+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nc3Ryb25nJz4xPC9zcGFuPiB0ZXN0KHMpIGZhaWxlZCwgPHNwYW4gY2xhc3M9J3N0cm9uZyc+MDwvc3Bhbj4gb3RoZXJzICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY29sIHMxMiBtNiBsNiBucC1oJz4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2FyZC1wYW5lbCBubS12Jz4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2xlZnQgcGFuZWwtbmFtZSc+U3RlcHM8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NoYXJ0LWJveCc+ICAgICAgICAgICAgICAgICAgICAgICAgPGNhbnZhcyBpZD0nY2hpbGQtYW5hbHlzaXMnIHdpZHRoPScxMDAnIGhlaWdodD0nODAnPjwvY2FudmFzPiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdibG9jayB0ZXh0LXNtYWxsJz4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48c3BhbiBjbGFzcz0nc3Ryb25nJz4wPC9zcGFuPiBzdGVwKHMpIHBhc3NlZDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYmxvY2sgdGV4dC1zbWFsbCc+ICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J3N0cm9uZyc+Mjwvc3Bhbj4gc3RlcChzKSBmYWlsZWQsIDxzcGFuIGNsYXNzPSdzdHJvbmcnPjA8L3NwYW4+IG90aGVycyAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj4gICAgPGRpdiBjbGFzcz0nc3Vidmlldy1sZWZ0IGxlZnQnPiAgICAgICAgPGRpdiBjbGFzcz0ndmlldy1zdW1tYXJ5Jz4gICAgICAgICAgICA8aDU+VGVzdHM8L2g1PiAgICAgICAgICAgIDx1bCBpZD0ndGVzdC1jb2xsZWN0aW9uJyBjbGFzcz0ndGVzdC1jb2xsZWN0aW9uJz4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ndGVzdCBkaXNwbGF5ZWQgYWN0aXZlICBmYWlsJyBzdGF0dXM9J2ZhaWwnIHRlc3QtaWQ9JzEyJz4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSd0ZXN0LWhlYWRpbmcnPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ndGVzdC1uYW1lJz5UQ18xMzQxNV9SblBfVXRpbGl0eV9NZXRlcl9SZWFkZXJfVmlld19BbGxfTmV0d29ya19IZWFsdGhfRGFzaGJvYXJkX1dpZGdldHNfUGVybWlzc2lvbl9BdmFpbGFibGU8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSd0ZXN0LXRpbWUnPjAxLTA3LTIwMjIgMTY6Mjc6NDY8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSd0ZXN0LXN0YXR1cyByaWdodCBmYWlsJz5GYWlsPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3Rlc3QtY29udGVudCBoaWRlJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3Rlc3QtdGltZS1pbmZvJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nbGFiZWwgc3RhcnQtdGltZSc+MDEtMDctMjAyMiAxNjoyNzo0Njwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nbGFiZWwgZW5kLXRpbWUnPjAxLTA3LTIwMjIgMTY6Mjc6NTM8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J2xhYmVsIHRpbWUtdGFrZW4gZ3JleSBsaWdodGVuLTEgd2hpdGUtdGV4dCc+MDA6MDA6MDYuNDM2NTI2Njwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3Rlc3Qtc3RlcHMnPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9J2JvcmRlcmVkIHRhYmxlLXJlc3VsdHMnPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlN0YXR1czwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5UaW1lc3RhbXA8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGV0YWlsczwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0nbG9nJyBzdGF0dXM9J2ZhaWwnPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSdzdGF0dXMgZmFpbCcgdGl0bGU9J2ZhaWwnIGFsdD0nZmFpbCc+PGkgY2xhc3M9J21hdGVyaWFsLWljb25zJz5jYW5jZWw8L2k+PC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ndGltZXN0YW1wJz4wMS0wNy0yMDIyIDE2OjI3OjUwPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RlcC1kZXRhaWxzJz5GYWlsZWQgdG8gbmF2aWdhdGUgdG8gdXJsOmh0dHBzOi8vd3d3LnByZS1wcm9kLm5lcHR1bmUzNjAuY29tL0Vycm9yOiA8bWFyaz51bmtub3duIGVycm9yOiB1bmV4cGVjdGVkIGNvbW1hbmQgcmVzcG9uc2UgIChTZXNzaW9uIGluZm86IGNocm9tZT0xMDMuMC41MDYwLjY2KTwvbWFyaz48L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9J2xvZycgc3RhdHVzPSdmYWlsJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RhdHVzIGZhaWwnIHRpdGxlPSdmYWlsJyBhbHQ9J2ZhaWwnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2FuY2VsPC9pPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3RpbWVzdGFtcCc+MDEtMDctMjAyMiAxNjoyNzo1MzwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0ZXAtZGV0YWlscyc+RmFpbGVkIHRvIG5hdmlnYXRlIHRvIFJvdXRlIE1hbmFnZW1lbnQgU2NyZWVuOmh0dHBzOi8vd3d3LnByZS1wcm9kLm5lcHR1bmUzNjAuY29tL0Vycm9yOiA8bWFyaz5GYWlsZWQgdG8gbmF2aWdhdGUgdG8gdXJsOmh0dHBzOi8vd3d3LnByZS1wcm9kLm5lcHR1bmUzNjAuY29tL0Vycm9yOiA8bWFyaz51bmtub3duIGVycm9yOiB1bmV4cGVjdGVkIGNvbW1hbmQgcmVzcG9uc2UgIChTZXNzaW9uIGluZm86IGNocm9tZT0xMDMuMC41MDYwLjY2KTwvbWFyaz48L21hcms+PC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8L2xpPiAgICAgICAgICAgIDwvdWw+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDwhLS0gc3VidmlldyBsZWZ0IC0tPiAgICA8ZGl2IGNsYXNzPSdzdWJ2aWV3LXJpZ2h0IGxlZnQnPiAgICAgICAgPGRpdiBjbGFzcz0ndmlldy1zdW1tYXJ5Jz4gICAgICAgICAgICA8aDUgY2xhc3M9J3Rlc3QtbmFtZSc+PC9oNT4gICAgICAgICAgICA8ZGl2IGlkPSdzdGVwLWZpbHRlcnMnIGNsYXNzPSJyaWdodCI+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJibHVlLXRleHQiIHN0YXR1cz0iaW5mbyIgYWx0PSJpbmZvIiB0aXRsZT0iaW5mbyI+PGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5pbmZvX291dGxpbmU8L2k+PC9zcGFuPiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ3JlZW4tdGV4dCIgc3RhdHVzPSJwYXNzIiBhbHQ9InBhc3MiIHRpdGxlPSJwYXNzIj48aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmNoZWNrX2NpcmNsZTwvaT48L3NwYW4+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZWQtdGV4dCIgc3RhdHVzPSJmYWlsIiBhbHQ9ImZhaWwiIHRpdGxlPSJmYWlsIj48aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmNhbmNlbDwvaT48L3NwYW4+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZWQtdGV4dCB0ZXh0LWRhcmtlbi00IiBzdGF0dXM9ImZhdGFsIiBhbHQ9ImZhdGFsIiB0aXRsZT0iZmF0YWwiPjxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+Y2FuY2VsPC9pPjwvc3Bhbj4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBpbmstdGV4dCB0ZXh0LWxpZ2h0ZW4tMSIgc3RhdHVzPSJlcnJvciIgYWx0PSJlcnJvciIgdGl0bGU9ImVycm9yIj48aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmVycm9yPC9pPjwvc3Bhbj4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im9yYW5nZS10ZXh0IiBhbHQ9Indhcm5pbmciIHN0YXR1cz0id2FybmluZyIgdGl0bGU9Indhcm5pbmciPjxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+d2FybmluZzwvaT48L3NwYW4+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0ZWFsLXRleHQiIHN0YXR1cz0ic2tpcCIgYWx0PSJza2lwIiB0aXRsZT0ic2tpcCI+PGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5yZWRvPC9pPjwvc3Bhbj4gICAgICAgICAgICAgICAgPHNwYW4gc3RhdHVzPSJjbGVhciIgYWx0PSJDbGVhciBmaWx0ZXJzIiB0aXRsZT0iQ2xlYXIgZmlsdGVycyI+PGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5jbGVhcjwvaT48L3NwYW4+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgPC9kaXY+ICAgIDwhLS0gc3VidmlldyByaWdodCAtLT48L2Rpdj48IS0tIHRlc3QgdmlldyAtLT4gICAgICAgICAgICA8IS0tIGNhdGVnb3J5IHZpZXcgLS0+ICAgICAgICAgICAgICAgIDxkaXYgaWQ9J2V4Y2VwdGlvbi12aWV3JyBjbGFzcz0ndmlldyBoaWRlJz4gICAgICAgIDxzZWN0aW9uIGlkPSdjb250cm9scyc+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY29udHJvbHMgZ3JleSBsaWdodGVuLTQnPiAgICAgICAgICAgICAgICA8IS0tIHNlYXJjaCAtLT4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hpcCB0cmFuc3BhcmVudCcgYWx0PSdTZWFyY2ggVGVzdHMnIHRpdGxlPSdTZWFyY2ggVGVzdHMnPiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9J3NlYXJjaC1kaXYnPiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+c2VhcmNoPC9pPiBTZWFyY2ggICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2lucHV0LWZpZWxkIGxlZnQgaGlkZSc+ICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSdzZWFyY2gtdGVzdHMnIHR5cGU9J3RleHQnIGNsYXNzPSd2YWxpZGF0ZSBicm93c2VyLWRlZmF1bHQnIHBsYWNlaG9sZGVyPSdTZWFyY2ggVGVzdHMuLi4nPiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8IS0tIHNlYXJjaCAtLT4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvc2VjdGlvbj4gICAgICAgIDxkaXYgY2xhc3M9J3N1YnZpZXctbGVmdCBsZWZ0Jz4gICAgICAgICAgICA8ZGl2IGNsYXNzPSd2aWV3LXN1bW1hcnknPiAgICAgICAgICAgICAgICA8aDU+RXhjZXB0aW9uczwvaDU+ICAgICAgICAgICAgICAgIDx1bCBpZD0nZXhjZXB0aW9uLWNvbGxlY3Rpb24nIGNsYXNzPSdleGNlcHRpb24tY29sbGVjdGlvbic+ICAgICAgICAgICAgICAgIDwvdWw+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICA8L2Rpdj4gICAgICAgIDxkaXYgY2xhc3M9J3N1YnZpZXctcmlnaHQgbGVmdCc+ICAgICAgICAgICAgPGRpdiBjbGFzcz0ndmlldy1zdW1tYXJ5Jz4gICAgICAgICAgICAgICAgPGg1IGNsYXNzPSdleGNlcHRpb24tbmFtZSc+PC9oNT4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48IS0tIGV4Y2VwdGlvbiB2aWV3IC0tPiAgICAgICAgICAgIDxkaXYgaWQ9J2Rhc2hib2FyZC12aWV3JyBjbGFzcz0ndmlldyBoaWRlJz4gICAgPGRpdiBjbGFzcz0nY2FyZC1wYW5lbCB0cmFuc3BhcmVudCBucC12Jz4gICAgICAgIDxoNT5EYXNoYm9hcmQ8L2g1PiAgICAgICAgPGRpdiBjbGFzcz0ncm93Jz4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdjb2wgczInPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdjYXJkLXBhbmVsIHInPiA8c3Bhbj5UZXN0czwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwYW5lbC1sZWFkJz4xPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NvbCBzMic+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NhcmQtcGFuZWwgcic+IDxzcGFuPlN0ZXBzPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3BhbmVsLWxlYWQnPjI8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY29sIHMyJz4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2FyZC1wYW5lbCByJz4gICAgICAgICAgICAgICAgICAgIFN0YXJ0ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwYW5lbC1sZWFkJz4wMS0wNy0yMDIyIDE2OjI3OjQ2PC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NvbCBzMic+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NhcmQtcGFuZWwgcic+ICAgICAgICAgICAgICAgICAgICBFbmQgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3BhbmVsLWxlYWQnPjAxLTA3LTIwMjIgMTY6Mjc6NTM8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY29sIHMyJz4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2FyZC1wYW5lbCByJz4gICAgICAgICAgICAgICAgICAgIFRpbWUgVGFrZW4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3BhbmVsLWxlYWQnPjAwOjAwOjA2LjQ2Nzc5ODQ8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NvbCBzNCc+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdjYXJkLXBhbmVsJz4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ncmlnaHQgbGFiZWwgY3lhbiB3aGl0ZS10ZXh0Jz5FbnZpcm9ubWVudDwvc3Bhbj48cD4mbmJzcDs8L3A+ICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+TmFtZTwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+VmFsdWU8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Ib3N0IE5hbWU8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5RWkxUMTI5PC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlVzZXIgTmFtZTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPm5rdW1hckBuZXB0dW5ldGcuY29tPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlByb2plY3Q8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5OZXB0dW5lIDM2MDwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5SZWxlYXNlPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+UmVsZWFzZSAxLjQuOS4yPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlRlc3QgQ3ljbGU8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5SZWdyZXNzaW9uIFRlc3RpbmcgLSBBdXRvbWF0aW9uPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlRlc3QgU3VpdGU8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5VSS0zPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj48IS0tIGRhc2hib2FyZCB2aWV3IC0tPiAgICAgICAgICAgIDwhLS0gZXhjZXB0aW9uIHZpZXcgLS0+CQk8L2Rpdj4JCTwhLS0gY29udGFpbmVyIC0tPgkJPHNjcmlwdD4JCQl2YXIgc3RhdHVzR3JvdXAgPSB7CQkJICAgIHBhc3NQYXJlbnQ6IDAsCQkJICAgIGZhaWxQYXJlbnQ6IDEsCQkJICAgIGZhdGFsUGFyZW50OiAwLAkJCSAgICBlcnJvclBhcmVudDogMCwJCQkgICAgd2FybmluZ1BhcmVudDogMCwJCQkgICAgc2tpcFBhcmVudDogMCwJCQkJCQkJICAgIHBhc3NDaGlsZDogMCwJCQkgICAgZmFpbENoaWxkOiAyLAkJCSAgICBmYXRhbENoaWxkOiAwLAkJCSAgICBlcnJvckNoaWxkOiAwLAkJCSAgICB3YXJuaW5nQ2hpbGQ6IDAsCQkJICAgIHNraXBDaGlsZDogMCwJCQkgICAgaW5mb0NoaWxkOiAwLAkJCQkJCQkgICAgcGFzc0dyYW5kQ2hpbGQ6IDAsCQkJICAgIGZhaWxHcmFuZENoaWxkOiAwLAkJCSAgICBmYXRhbEdyYW5kQ2hpbGQ6IDAsCQkJICAgIGVycm9yR3JhbmRDaGlsZDogMCwJCQkgICAgd2FybmluZ0dyYW5kQ2hpbGQ6IDAsCQkJICAgIHNraXBHcmFuZENoaWxkOiAwLAkJCSAgICBpbmZvR3JhbmRDaGlsZDogMAkJCX07CQk8L3NjcmlwdD4JCTxzY3JpcHQgc3JjPSdodHRwczovL2Nkbi5yYXdnaXQuY29tL2Fuc2hvb2Fyb3JhL2V4dGVudHJlcG9ydHMtY3NoYXJwL2U0NjgwNTRkNjdkOTNjMmZkOWM4ZjBmNjBlMzFhN2VhMDlmYTNiZjYvZGlzdC9qcy9leHRlbnQuanMnIHR5cGU9J3RleHQvamF2YXNjcmlwdCc+PC9zY3JpcHQ+CQkJCQkJICAgICAgICAgICAgPHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPgkJCSAgICAgICAgICAgICAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CTwvYm9keT4JPC9odG1sPg=="}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 04:28:08=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 70aa2c42-b5b9-4bcc-ab5a-16021f191775
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 04:43:15=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295339373/test-logs
Auth Header:bearer 7201ca4f-6dfd-4741-a9e7-ceece40bfae7
Json Content:{"exe_start_date": "2022-07-01T16:41:54+05:30", "exe_end_date": "2022-07-01T16:42:53+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 04:43:15=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 7201ca4f-6dfd-4741-a9e7-ceece40bfae7
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 07:44:46=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295345567/test-logs
Auth Header:bearer 2a457e26-a42f-45b2-a6e1-ceff4cd0b386
Json Content:{"exe_start_date": "2022-07-01T19:43:18+05:30", "exe_end_date": "2022-07-01T19:43:54+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 07:44:47=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 2a457e26-a42f-45b2-a6e1-ceff4cd0b386
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 10:16:52=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295353716/test-logs
Auth Header:bearer e29e93ca-800b-43e1-950c-8fcc3859f64b
Json Content:{"exe_start_date": "2022-07-01T22:14:27+05:30", "exe_end_date": "2022-07-01T22:16:21+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 10:16:52=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer e29e93ca-800b-43e1-950c-8fcc3859f64b
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 10:19:11=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295355686/test-logs
Auth Header:bearer f5faaff3-e1f6-4146-9e52-45ec9869aceb
Json Content:{"exe_start_date": "2022-07-01T22:17:14+05:30", "exe_end_date": "2022-07-01T22:18:47+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 10:19:12=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer f5faaff3-e1f6-4146-9e52-45ec9869aceb
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 10:29:43=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295358816/test-logs
Auth Header:bearer 2f3f6dae-743c-431b-91cb-1d6212e30b50
Json Content:{"exe_start_date": "2022-07-01T22:28:35+05:30", "exe_end_date": "2022-07-01T22:29:19+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 10:29:44=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 2f3f6dae-743c-431b-91cb-1d6212e30b50
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 10:34:52=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer a5ff6cfc-0dda-4391-ab3f-4e9111a1637d
Json Content:{"name":"Permissions_Validation_Partner Management_View Partner Management_Neptune System Admin_Default_ON","test_case":{"id":34103076}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 10:34:52=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-01-2022 10:39:58=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer c5e551bb-bca0-4c2a-8a14-b1c6f4184ba1
Json Content:{"name":"Permissions_Validation_Partner Management_View Partner Management_Utility Meter Reader_Default_OFF","test_case":{"id":34103081}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 10:39:58=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-01-2022 10:42:01=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer ea904e15-39b5-48a4-8fa7-448445c96681
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 10:50:08=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer db4ddde8-2575-4061-8d5a-4540cef68fa5
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 10:51:15=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer b9bd5dca-be72-4675-8d5c-f364b52b907e
Json Content:{"name":"Permissions_Validation_Partner Management_Edit Partners_Utility User_Default_OFF","test_case":{"id":34103430}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 10:51:15=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-01-2022 10:53:29=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 7356f8b7-3d89-4856-8be9-7faf8b9988f1
Json Content:{"name":"Permissions_Validation_Partner Management_Edit Partners_Utility Meter Reader_Default_OFF","test_case":{"id":34103432}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 10:53:29=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-01-2022 10:54:32=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295359216/test-logs
Auth Header:bearer 6aeea194-c2e0-4f80-9046-06bb03011e3a
Json Content:{"exe_start_date": "2022-07-01T22:53:31+05:30", "exe_end_date": "2022-07-01T22:54:13+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 10:54:33=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 6aeea194-c2e0-4f80-9046-06bb03011e3a
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 10:58:00=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 1abb07f8-8a68-4298-89ae-c09604b89b5a
Json Content:{"name":"Permissions_Validation_Usage Plans_Edit Usage Plans_Display","test_case":{"id":34103910}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 10:58:00=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-01-2022 11:00:30=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 9a380398-5ec1-4e7e-8e4b-c281398a390e
Json Content:{"name":"Permissions_Validation_Left Navigation_Usage Plans_Neptune CSR_OFF","test_case":{"id":34104862}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 11:00:30=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http GET request=======07-01-2022 11:01:18========
URL:https://ntg.qtestnet.com/api/v3/projects
Auth Header:bearer 441004dd-e7dc-4792-900a-cb471668517b
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 11:01:18=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 441004dd-e7dc-4792-900a-cb471668517b
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 11:03:56=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer d37802d4-49de-4d77-80ad-6569ecc34f70
Json Content:{"name":"Permissions_Validation_Left Navigation_Usage Plans_Utility Read Only_OFF","test_case":{"id":34104866}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 11:03:56=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-01-2022 11:07:03=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295484043/test-logs
Auth Header:bearer 401328f8-5e39-4555-bf29-76a286f22edc
Json Content:{"exe_start_date": "2022-07-01T23:06:03+05:30", "exe_end_date": "2022-07-01T23:06:48+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":"PCFET0NUWVBFIGh0bWw+PGh0bWw+ICAgIDxoZWFkPiAgICA8bWV0YSBjaGFyc2V0PSdVVEYtOCcgLz4gICAgPG1ldGEgbmFtZT0nZGVzY3JpcHRpb24nIGNvbnRlbnQ9JycgLz4gICAgPG1ldGEgbmFtZT0ncm9ib3RzJyBjb250ZW50PSdub29kcCwgbm95ZGlyJyAvPiAgICA8bWV0YSBuYW1lPSd2aWV3cG9ydCcgY29udGVudD0nd2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEnIC8+ICAgIDxsaW5rIGhyZWY9J2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Tb3VyY2UrU2FucytQcm86NDAwLDYwMCcgcmVsPSdzdHlsZXNoZWV0JyB0eXBlPSd0ZXh0L2Nzcyc+ICAgIDxsaW5rIGhyZWY9Imh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vaWNvbj9mYW1pbHk9TWF0ZXJpYWwrSWNvbnMiIHJlbD0ic3R5bGVzaGVldCI+ICAgIDxsaW5rIGhyZWY9J2h0dHBzOi8vY2RuLnJhd2dpdC5jb20vYW5zaG9vYXJvcmEvZXh0ZW50cmVwb3J0cy1jc2hhcnAvM2I2Y2MwNGZkMjQxYjk3ODI2MDZlNTdmYzVlODRmMGU0MjE3MmMwOC9kaXN0L2Nzcy9leHRlbnQuY3NzJyB0eXBlPSd0ZXh0L2NzcycgcmVsPSdzdHlsZXNoZWV0JyAvPiAgICA8dGl0bGU+RXh0ZW50PC90aXRsZT48L2hlYWQ+ICAgIAk8Ym9keSBjbGFzcz0nZXh0ZW50IGRhcmsgZGVmYXVsdCBoaWRlLW92ZXJmbG93ICc+CQk8ZGl2IGlkPSd0aGVtZS1zZWxlY3RvcicgYWx0PSdDbGljayB0byB0b2dnbGUgdGhlbWUuIFRvIGVuYWJsZSBieSBkZWZhdWx0LCB1c2UgdGhlbWUgY29uZmlndXJhdGlvbi4nIHRpdGxlPSdDbGljayB0byB0b2dnbGUgdGhlbWUuIFRvIGVuYWJsZSBieSBkZWZhdWx0LCB1c2UgdGhlbWUgY29uZmlndXJhdGlvbi4nPgkJCTxzcGFuPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+ZGVza3RvcF93aW5kb3dzPC9pPjwvc3Bhbj4JCTwvZGl2PgkJPG5hdj4gICAgPGRpdiBjbGFzcz0ibmF2LXdyYXBwZXIiPiAgICAgICAgPGEgaHJlZj0iaHR0cDovL2V4dGVudHJlcG9ydHMucmVsZXZhbnRjb2Rlcy5jb20iIGNsYXNzPSJicmFuZC1sb2dvIGJsdWUgZGFya2VuLTMiPkV4dGVudDwvYT4gICAgICAgIDwhLS0gc2xpZGVvdXQgbWVudSAtLT4gICAgICAgIDx1bCBpZD0nc2xpZGUtb3V0JyBjbGFzcz0nc2lkZS1uYXYgZml4ZWQgaGlkZS1vbi1tZWQtYW5kLWRvd24nPiAgICAgICAgICAgIDxsaSBjbGFzcz0nd2F2ZXMtZWZmZWN0IGFjdGl2ZSc+PGEgaHJlZj0nIyEnIHZpZXc9J3Rlc3Qtdmlldycgb25jbGljaz0iY29uZmlndXJlVmlldygwKTtjaGFydHNWaWV3KCd0ZXN0Jyk7Ij48aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMnPmRhc2hib2FyZDwvaT48L2E+PC9saT4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9J3dhdmVzLWVmZmVjdCc+PGEgaHJlZj0nIyEnIG9uY2xpY2s9ImNvbmZpZ3VyZVZpZXcoLTEpO2NoYXJ0c1ZpZXcoJ2Rhc2hib2FyZCcpOyIgdmlldz0nZGFzaGJvYXJkLXZpZXcnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+dHJhY2tfY2hhbmdlczwvaT48L2k+PC9hPjwvbGk+ICAgICAgICA8L3VsPiAgICAgICAgPCEtLSByZXBvcnQgbmFtZSAtLT4gICAgICAgIDxzcGFuIGNsYXNzPSdyZXBvcnQtbmFtZSc+QXV0b21hdGlvbiBSZXBvcnQ8L3NwYW4+ICAgICAgICA8IS0tIHJlcG9ydCBoZWFkbGluZSAtLT4gICAgICAgIDxzcGFuIGNsYXNzPSdyZXBvcnQtaGVhZGxpbmUnPjwvc3Bhbj4gICAgICAgIDwhLS0gbmF2LXJpZ2h0IC0tPiAgICAgICAgPHVsIGlkPSduYXYtbW9iaWxlJyBjbGFzcz0ncmlnaHQgaGlkZS1vbi1tZWQtYW5kLWRvd24gbmF2LXJpZ2h0Jz4gICAgICAgICAgICA8YT4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J3N1aXRlLXN0YXJ0LXRpbWUgbGFiZWwgYmx1ZSBkYXJrZW4tMyc+MDEtMDctMjAyMiAyMzowNjowMiBJbmRpYSBTdGFuZGFyZCBUaW1lPC9zcGFuPiAgICAgICAgICAgIDwvYT4gICAgICAgICAgICA8YT4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxhYmVsIGJsdWUgZGFya2VuLTMiPjMuMS4wPC9zcGFuPiAgICAgICAgICAgIDwvYT4gICAgICAgIDwvdWw+ICAgIDwvZGl2PjwvbmF2PgkJPCEtLSBjb250YWluZXIgLS0+CQk8ZGl2IGNsYXNzPSdjb250YWluZXInPiAgICAgICAgICAgIDxkaXYgaWQ9J3Rlc3QtdmlldycgY2xhc3M9J3ZpZXcnPiAgICA8c2VjdGlvbiBpZD0nY29udHJvbHMnPiAgICAgICAgPGRpdiBjbGFzcz0nY29udHJvbHMgZ3JleSBsaWdodGVuLTQnPiAgICAgICAgICAgIDwhLS0gdGVzdCB0b2dnbGUgLS0+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hpcCB0cmFuc3BhcmVudCc+ICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdkcm9wZG93bi1idXR0b24gdGVzdHMtdG9nZ2xlJyBkYXRhLWFjdGl2YXRlcz0ndGVzdHMtdG9nZ2xlJyBkYXRhLWNvbnN0cmFpbndpZHRoPSd0cnVlJyBkYXRhLWJlbG93b3JpZ2luPSd0cnVlJyBkYXRhLWhvdmVyPSd0cnVlJyBocmVmPScjJz4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+d2FybmluZzwvaT4gU3RhdHVzICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgPHVsIGlkPSd0ZXN0cy10b2dnbGUnIGNsYXNzPSdkcm9wZG93bi1jb250ZW50Jz4gICAgICAgICAgICAgICAgICAgIDxsaSBzdGF0dXM9J3Bhc3MnPjxhIGhyZWY9JyMhJz5QYXNzIDxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyBncmVlbi10ZXh0Jz5jaGVja19jaXJjbGU8L2k+PC9hPjwvbGk+ICAgICAgICAgICAgICAgICAgICA8bGkgc3RhdHVzPSdmYWlsJz48YSBocmVmPScjISc+RmFpbCA8aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMgcmVkLXRleHQnPmNhbmNlbDwvaT48L2E+PC9saT4gICAgICAgICAgICAgICAgICAgIDxsaSBzdGF0dXM9J2Vycm9yJz48YSBocmVmPScjISc+RXJyb3IgPGkgY2xhc3M9J21hdGVyaWFsLWljb25zIHJlZC10ZXh0IGxpZ2h0ZW4tMic+ZXJyb3I8L2k+PC9hPjwvbGk+ICAgICAgICAgICAgICAgICAgICA8bGkgc3RhdHVzPSd3YXJuaW5nJz48YSBocmVmPScjISc+V2FybmluZyA8aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMgb3JhbmdlLXRleHQnPndhcm5pbmc8L2k+PC9hPjwvbGk+ICAgICAgICAgICAgICAgICAgICA8bGkgc3RhdHVzPSdza2lwJz48YSBocmVmPScjISc+U2tpcCA8aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMgY3lhbi10ZXh0Jz5yZWRvPC9pPjwvYT48L2xpPiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSdkaXZpZGVyJz48L2xpPiAgICAgICAgICAgICAgICAgICAgPGxpIHN0YXR1cz0nY2xlYXInIGNsZWFyPSd0cnVlJz48YSBocmVmPScjISc+Q2xlYXIgRmlsdGVycyA8aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMnPmNsZWFyPC9pPjwvYT48L2xpPiAgICAgICAgICAgICAgICA8L3VsPiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwhLS0gdGVzdCB0b2dnbGUgLS0+ICAgICAgICAgICAgPCEtLSBjYXRlZ29yeSB0b2dnbGUgLS0+ICAgICAgICAgICAgPCEtLSBjYXRlZ29yeSB0b2dnbGUgLS0+ICAgICAgICAgICAgPCEtLSBjbGVhciBmaWx0ZXJzIC0tPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NoaXAgdHJhbnNwYXJlbnQgaGlkZSc+ICAgICAgICAgICAgICAgIDxhIGNsYXNzPScnIGlkPSdjbGVhci1maWx0ZXJzJyBhbHQ9J0NsZWFyIEZpbHRlcnMnIHRpdGxlPSdDbGVhciBGaWx0ZXJzJz4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2xvc2U8L2k+IENsZWFyICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8IS0tIGNsZWFyIGZpbHRlcnMgLS0+ICAgICAgICAgICAgPCEtLSBlbmFibGUgZGFzaGJvYXJkIC0tPiAgICAgICAgICAgIDxkaXYgaWQ9J3RvZ2dsZS10ZXN0LXZpZXctY2hhcnRzJyBjbGFzcz0nY2hpcCB0cmFuc3BhcmVudCc+ICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ncGluay10ZXh0JyBpZD0nZW5hYmxlLWRhc2hib2FyZCcgYWx0PSdFbmFibGUgRGFzaGJvYXJkJyB0aXRsZT0nRW5hYmxlIERhc2hib2FyZCc+ICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9J21hdGVyaWFsLWljb25zJz50cmFja19jaGFuZ2VzPC9pPiBEYXNoYm9hcmQgICAgICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8IS0tIGVuYWJsZSBkYXNoYm9hcmQgLS0+ICAgICAgICAgICAgPCEtLSBzZWFyY2ggLS0+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hpcCB0cmFuc3BhcmVudCcgYWx0PSdTZWFyY2ggVGVzdHMnIHRpdGxlPSdTZWFyY2ggVGVzdHMnPiAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0nc2VhcmNoLWRpdic+ICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMnPnNlYXJjaDwvaT4gU2VhcmNoICAgICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0naW5wdXQtZmllbGQgbGVmdCBoaWRlJz4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0nc2VhcmNoLXRlc3RzJyB0eXBlPSd0ZXh0JyBjbGFzcz0ndmFsaWRhdGUgYnJvd3Nlci1kZWZhdWx0JyBwbGFjZWhvbGRlcj0nU2VhcmNoIFRlc3RzLi4uJz4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPCEtLSBzZWFyY2ggLS0+ICAgICAgICA8L2Rpdj4gICAgPC9zZWN0aW9uPjxkaXYgaWQ9J3Rlc3Qtdmlldy1jaGFydHMnIGNsYXNzPSdzdWJ2aWV3LWZ1bGwnPiAgICA8ZGl2IGlkPSdjaGFydHMtcm93JyBjbGFzcz0ncm93IG5tLXYgbm0taCc+ICAgICAgICA8ZGl2IGNsYXNzPSdjb2wgczEyIG02IGw2IG5wLWgnPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NhcmQtcGFuZWwgbm0tdic+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2xlZnQgcGFuZWwtbmFtZSc+VGVzdHM8L2Rpdj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2hhcnQtYm94Jz4gICAgICAgICAgICAgICAgICAgIDxjYW52YXMgaWQ9J3BhcmVudC1hbmFseXNpcycgd2lkdGg9JzEwMCcgaGVpZ2h0PSc4MCc+PC9jYW52YXM+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdibG9jayB0ZXh0LXNtYWxsJz4gICAgICAgICAgICAgICAgICAgIDxzcGFuPjxzcGFuIGNsYXNzPSdzdHJvbmcnPjE8L3NwYW4+IHRlc3QocykgcGFzc2VkPC9zcGFuPiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYmxvY2sgdGV4dC1zbWFsbCc+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nc3Ryb25nJz4wPC9zcGFuPiB0ZXN0KHMpIGZhaWxlZCwgPHNwYW4gY2xhc3M9J3N0cm9uZyc+MDwvc3Bhbj4gb3RoZXJzICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY29sIHMxMiBtNiBsNiBucC1oJz4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2FyZC1wYW5lbCBubS12Jz4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2xlZnQgcGFuZWwtbmFtZSc+U3RlcHM8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NoYXJ0LWJveCc+ICAgICAgICAgICAgICAgICAgICAgICAgPGNhbnZhcyBpZD0nY2hpbGQtYW5hbHlzaXMnIHdpZHRoPScxMDAnIGhlaWdodD0nODAnPjwvY2FudmFzPiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdibG9jayB0ZXh0LXNtYWxsJz4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48c3BhbiBjbGFzcz0nc3Ryb25nJz4xMDwvc3Bhbj4gc3RlcChzKSBwYXNzZWQ8L3NwYW4+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2Jsb2NrIHRleHQtc21hbGwnPiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdzdHJvbmcnPjA8L3NwYW4+IHN0ZXAocykgZmFpbGVkLCA8c3BhbiBjbGFzcz0nc3Ryb25nJz4wPC9zcGFuPiBvdGhlcnMgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4gICAgPC9kaXY+PC9kaXY+ICAgIDxkaXYgY2xhc3M9J3N1YnZpZXctbGVmdCBsZWZ0Jz4gICAgICAgIDxkaXYgY2xhc3M9J3ZpZXctc3VtbWFyeSc+ICAgICAgICAgICAgPGg1PlRlc3RzPC9oNT4gICAgICAgICAgICA8dWwgaWQ9J3Rlc3QtY29sbGVjdGlvbicgY2xhc3M9J3Rlc3QtY29sbGVjdGlvbic+ICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9J3Rlc3QgZGlzcGxheWVkIGFjdGl2ZSAgcGFzcycgc3RhdHVzPSdwYXNzJyB0ZXN0LWlkPSczMCc+ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ndGVzdC1oZWFkaW5nJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J3Rlc3QtbmFtZSc+VENfMTU1MjRfUFZfVXNhZ2VfUGxhbnNfVmlld19Vc2FnZV9QbGFuc19OZXB0dW5lX1N5c3RlbV9BZG1pbl9EZWZhdWx0X09OPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ndGVzdC10aW1lJz4wMS0wNy0yMDIyIDIzOjA2OjAyPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ndGVzdC1zdGF0dXMgcmlnaHQgcGFzcyc+UGFzczwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSd0ZXN0LWNvbnRlbnQgaGlkZSc+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSd0ZXN0LXRpbWUtaW5mbyc+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J2xhYmVsIHN0YXJ0LXRpbWUnPjAxLTA3LTIwMjIgMjM6MDY6MDI8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J2xhYmVsIGVuZC10aW1lJz4wMS0wNy0yMDIyIDIzOjA2OjQ4PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdsYWJlbCB0aW1lLXRha2VuIGdyZXkgbGlnaHRlbi0xIHdoaXRlLXRleHQnPjAwOjAwOjQ2LjQyMTExNTc8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSd0ZXN0LXN0ZXBzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdib3JkZXJlZCB0YWJsZS1yZXN1bHRzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5TdGF0dXM8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+VGltZXN0YW1wPC90aD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkRldGFpbHM8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9J2xvZycgc3RhdHVzPSdwYXNzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RhdHVzIHBhc3MnIHRpdGxlPSdwYXNzJyBhbHQ9J3Bhc3MnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2hlY2tfY2lyY2xlPC9pPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3RpbWVzdGFtcCc+MDEtMDctMjAyMiAyMzowNjoxMzwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0ZXAtZGV0YWlscyc+TmF2aWdhdGVkIHRvIHVybDogPG1hcms+aHR0cHM6Ly93d3cucHJlLXByb2QubmVwdHVuZTM2MC5jb20vPC9tYXJrPiBzdWNjZXNzZnVsbHk8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9J2xvZycgc3RhdHVzPSdwYXNzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RhdHVzIHBhc3MnIHRpdGxlPSdwYXNzJyBhbHQ9J3Bhc3MnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2hlY2tfY2lyY2xlPC9pPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3RpbWVzdGFtcCc+MDEtMDctMjAyMiAyMzowNjoxNDwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0ZXAtZGV0YWlscyc+U2VuZEtleXNUb0VsZW1lbnQtVXNlck5hbWVQZXJmb3JtZWQgYWN0aW9uICdTRU5EIEtFWVMnIG9uIGVsZW1lbnQgLSBDb250cm9sTmFtZTogPG1hcms+VXNlck5hbWU8L21hcms+LCBMb2N0b3IgOiA8bWFyaz5CeS5JZDogVXNlcm5hbWU8L21hcms+LCBUZXh0OiA8bWFyaz5jaGVubmFsYW5pa2hpbDY3QGdtYWlsLmNvbTwvbWFyaz48L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9J2xvZycgc3RhdHVzPSdwYXNzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RhdHVzIHBhc3MnIHRpdGxlPSdwYXNzJyBhbHQ9J3Bhc3MnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2hlY2tfY2lyY2xlPC9pPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3RpbWVzdGFtcCc+MDEtMDctMjAyMiAyMzowNjoxNTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0ZXAtZGV0YWlscyc+U2VuZEtleXNUb0VsZW1lbnQtUGFzc3dvcmRQZXJmb3JtZWQgYWN0aW9uICdTRU5EIEtFWVMnIG9uIGVsZW1lbnQgLSBDb250cm9sTmFtZTogPG1hcms+UGFzc3dvcmQ8L21hcms+LCBMb2N0b3IgOiA8bWFyaz5CeS5JZDogcGFzc3dvcmQ8L21hcms+LCBUZXh0OiA8bWFyaz5OZXB0dW5lQDEyMzwvbWFyaz48L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9J2xvZycgc3RhdHVzPSdwYXNzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RhdHVzIHBhc3MnIHRpdGxlPSdwYXNzJyBhbHQ9J3Bhc3MnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2hlY2tfY2lyY2xlPC9pPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3RpbWVzdGFtcCc+MDEtMDctMjAyMiAyMzowNjoyNTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0ZXAtZGV0YWlscyc+Q2xpY2tFbGVtZW50LUxvZ2luUGVyZm9ybWVkIGFjdGlvbiAnQ0xJQ0snIG9uIGVsZW1lbnQgLSBDb250cm9sTmFtZTogPG1hcms+TG9naW48L21hcms+LCBsb2NhdG9yIC0gPG1hcms+QnkuWFBhdGg6IC8vYnV0dG9uW3RleHQoKT0nTG9naW4nXTwvbWFyaz48L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9J2xvZycgc3RhdHVzPSdwYXNzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RhdHVzIHBhc3MnIHRpdGxlPSdwYXNzJyBhbHQ9J3Bhc3MnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2hlY2tfY2lyY2xlPC9pPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3RpbWVzdGFtcCc+MDEtMDctMjAyMiAyMzowNjoyOTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0ZXAtZGV0YWlscyc+Q2xpY2tFbGVtZW50LVBsYXRmb3JtIE1hbmFnZW1lbnRQZXJmb3JtZWQgYWN0aW9uICdDTElDSycgb24gZWxlbWVudCAtIENvbnRyb2xOYW1lOiA8bWFyaz5QbGF0Zm9ybSBNYW5hZ2VtZW50PC9tYXJrPiwgbG9jYXRvciAtIDxtYXJrPkJ5LlhQYXRoOiAvL3NwYW5bdGV4dCgpPSdQTEFURk9STSBNQU5BR0VNRU5UJ108L21hcms+PC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSdsb2cnIHN0YXR1cz0ncGFzcyc+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0YXR1cyBwYXNzJyB0aXRsZT0ncGFzcycgYWx0PSdwYXNzJz48aSBjbGFzcz0nbWF0ZXJpYWwtaWNvbnMnPmNoZWNrX2NpcmNsZTwvaT48L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSd0aW1lc3RhbXAnPjAxLTA3LTIwMjIgMjM6MDY6MzI8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSdzdGVwLWRldGFpbHMnPkNsaWNrRWxlbWVudC1Sb2xlIE1hbmFnZW1lbnRQZXJmb3JtZWQgYWN0aW9uICdDTElDSycgb24gZWxlbWVudCAtIENvbnRyb2xOYW1lOiA8bWFyaz5Sb2xlIE1hbmFnZW1lbnQ8L21hcms+LCBsb2NhdG9yIC0gPG1hcms+QnkuWFBhdGg6IC8vc3Bhblt0ZXh0KCk9J1JPTEUgTUFOQUdFTUVOVCAnXTwvbWFyaz48L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9J2xvZycgc3RhdHVzPSdwYXNzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RhdHVzIHBhc3MnIHRpdGxlPSdwYXNzJyBhbHQ9J3Bhc3MnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2hlY2tfY2lyY2xlPC9pPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3RpbWVzdGFtcCc+MDEtMDctMjAyMiAyMzowNjozNTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0ZXAtZGV0YWlscyc+Q2xpY2tFbGVtZW50LU5lcHR1bmUgU3lzdGVtIEFkbWluUGVyZm9ybWVkIGFjdGlvbiAnQ0xJQ0snIG9uIGVsZW1lbnQgLSBDb250cm9sTmFtZTogPG1hcms+TmVwdHVuZSBTeXN0ZW0gQWRtaW48L21hcms+LCBsb2NhdG9yIC0gPG1hcms+QnkuWFBhdGg6IC8vc3Bhblt0ZXh0KCk9J05lcHR1bmUgU3lzdGVtIEFkbWluaXN0cmF0b3InXTwvbWFyaz48L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9J2xvZycgc3RhdHVzPSdwYXNzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RhdHVzIHBhc3MnIHRpdGxlPSdwYXNzJyBhbHQ9J3Bhc3MnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2hlY2tfY2lyY2xlPC9pPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3RpbWVzdGFtcCc+MDEtMDctMjAyMiAyMzowNjozNTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0ZXAtZGV0YWlscyc+VXNhZ2UgUGxhbnMgTGVmdCBOYXZpZ2F0aW9uIGlzIHNldCB0byBZZXM8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9J2xvZycgc3RhdHVzPSdwYXNzJz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RhdHVzIHBhc3MnIHRpdGxlPSdwYXNzJyBhbHQ9J3Bhc3MnPjxpIGNsYXNzPSdtYXRlcmlhbC1pY29ucyc+Y2hlY2tfY2lyY2xlPC9pPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3RpbWVzdGFtcCc+MDEtMDctMjAyMiAyMzowNjo0MDwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9J3N0ZXAtZGV0YWlscyc+Q2xpY2tFbGVtZW50LVNlbGVjdFBlcmZvcm1lZCBhY3Rpb24gJ0NMSUNLJyBvbiBlbGVtZW50IC0gQ29udHJvbE5hbWU6IDxtYXJrPlNlbGVjdDwvbWFyaz4sIGxvY2F0b3IgLSA8bWFyaz5CeS5YUGF0aDogLy9pWzJdPC9tYXJrPjwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0nbG9nJyBzdGF0dXM9J3Bhc3MnPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSdzdGF0dXMgcGFzcycgdGl0bGU9J3Bhc3MnIGFsdD0ncGFzcyc+PGkgY2xhc3M9J21hdGVyaWFsLWljb25zJz5jaGVja19jaXJjbGU8L2k+PC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ndGltZXN0YW1wJz4wMS0wNy0yMDIyIDIzOjA2OjQ4PC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0nc3RlcC1kZXRhaWxzJz5DbGlja0VsZW1lbnQtTG9nT3V0UGVyZm9ybWVkIGFjdGlvbiAnQ0xJQ0snIG9uIGVsZW1lbnQgLSBDb250cm9sTmFtZTogPG1hcms+TG9nT3V0PC9tYXJrPiwgbG9jYXRvciAtIDxtYXJrPkJ5LlhQYXRoOiAvL3NwYW5bdGV4dCgpPSdMb2dvdXQnXTwvbWFyaz48L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgIDwvbGk+ICAgICAgICAgICAgPC91bD4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgPCEtLSBzdWJ2aWV3IGxlZnQgLS0+ICAgIDxkaXYgY2xhc3M9J3N1YnZpZXctcmlnaHQgbGVmdCc+ICAgICAgICA8ZGl2IGNsYXNzPSd2aWV3LXN1bW1hcnknPiAgICAgICAgICAgIDxoNSBjbGFzcz0ndGVzdC1uYW1lJz48L2g1PiAgICAgICAgICAgIDxkaXYgaWQ9J3N0ZXAtZmlsdGVycycgY2xhc3M9InJpZ2h0Ij4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJsdWUtdGV4dCIgc3RhdHVzPSJpbmZvIiBhbHQ9ImluZm8iIHRpdGxlPSJpbmZvIj48aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmluZm9fb3V0bGluZTwvaT48L3NwYW4+ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJncmVlbi10ZXh0IiBzdGF0dXM9InBhc3MiIGFsdD0icGFzcyIgdGl0bGU9InBhc3MiPjxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+Y2hlY2tfY2lyY2xlPC9pPjwvc3Bhbj4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlZC10ZXh0IiBzdGF0dXM9ImZhaWwiIGFsdD0iZmFpbCIgdGl0bGU9ImZhaWwiPjxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+Y2FuY2VsPC9pPjwvc3Bhbj4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlZC10ZXh0IHRleHQtZGFya2VuLTQiIHN0YXR1cz0iZmF0YWwiIGFsdD0iZmF0YWwiIHRpdGxlPSJmYXRhbCI+PGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj5jYW5jZWw8L2k+PC9zcGFuPiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGluay10ZXh0IHRleHQtbGlnaHRlbi0xIiBzdGF0dXM9ImVycm9yIiBhbHQ9ImVycm9yIiB0aXRsZT0iZXJyb3IiPjxpIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+ZXJyb3I8L2k+PC9zcGFuPiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ib3JhbmdlLXRleHQiIGFsdD0id2FybmluZyIgc3RhdHVzPSJ3YXJuaW5nIiB0aXRsZT0id2FybmluZyI+PGkgY2xhc3M9Im1hdGVyaWFsLWljb25zIj53YXJuaW5nPC9pPjwvc3Bhbj4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRlYWwtdGV4dCIgc3RhdHVzPSJza2lwIiBhbHQ9InNraXAiIHRpdGxlPSJza2lwIj48aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPnJlZG88L2k+PC9zcGFuPiAgICAgICAgICAgICAgICA8c3BhbiBzdGF0dXM9ImNsZWFyIiBhbHQ9IkNsZWFyIGZpbHRlcnMiIHRpdGxlPSJDbGVhciBmaWx0ZXJzIj48aSBjbGFzcz0ibWF0ZXJpYWwtaWNvbnMiPmNsZWFyPC9pPjwvc3Bhbj4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj4gICAgPCEtLSBzdWJ2aWV3IHJpZ2h0IC0tPjwvZGl2PjwhLS0gdGVzdCB2aWV3IC0tPiAgICAgICAgICAgIDwhLS0gY2F0ZWdvcnkgdmlldyAtLT4gICAgICAgICAgICAgICAgPGRpdiBpZD0nZXhjZXB0aW9uLXZpZXcnIGNsYXNzPSd2aWV3IGhpZGUnPiAgICAgICAgPHNlY3Rpb24gaWQ9J2NvbnRyb2xzJz4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdjb250cm9scyBncmV5IGxpZ2h0ZW4tNCc+ICAgICAgICAgICAgICAgIDwhLS0gc2VhcmNoIC0tPiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdjaGlwIHRyYW5zcGFyZW50JyBhbHQ9J1NlYXJjaCBUZXN0cycgdGl0bGU9J1NlYXJjaCBUZXN0cyc+ICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0nc2VhcmNoLWRpdic+ICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9J21hdGVyaWFsLWljb25zJz5zZWFyY2g8L2k+IFNlYXJjaCAgICAgICAgICAgICAgICAgICAgPC9hPiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0naW5wdXQtZmllbGQgbGVmdCBoaWRlJz4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9J3NlYXJjaC10ZXN0cycgdHlwZT0ndGV4dCcgY2xhc3M9J3ZhbGlkYXRlIGJyb3dzZXItZGVmYXVsdCcgcGxhY2Vob2xkZXI9J1NlYXJjaCBUZXN0cy4uLic+ICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDwhLS0gc2VhcmNoIC0tPiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9zZWN0aW9uPiAgICAgICAgPGRpdiBjbGFzcz0nc3Vidmlldy1sZWZ0IGxlZnQnPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J3ZpZXctc3VtbWFyeSc+ICAgICAgICAgICAgICAgIDxoNT5FeGNlcHRpb25zPC9oNT4gICAgICAgICAgICAgICAgPHVsIGlkPSdleGNlcHRpb24tY29sbGVjdGlvbicgY2xhc3M9J2V4Y2VwdGlvbi1jb2xsZWN0aW9uJz4gICAgICAgICAgICAgICAgPC91bD4gICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICAgICAgPGRpdiBjbGFzcz0nc3Vidmlldy1yaWdodCBsZWZ0Jz4gICAgICAgICAgICA8ZGl2IGNsYXNzPSd2aWV3LXN1bW1hcnknPiAgICAgICAgICAgICAgICA8aDUgY2xhc3M9J2V4Y2VwdGlvbi1uYW1lJz48L2g1PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgPC9kaXY+ICAgIDwvZGl2PjwhLS0gZXhjZXB0aW9uIHZpZXcgLS0+ICAgICAgICAgICAgPGRpdiBpZD0nZGFzaGJvYXJkLXZpZXcnIGNsYXNzPSd2aWV3IGhpZGUnPiAgICA8ZGl2IGNsYXNzPSdjYXJkLXBhbmVsIHRyYW5zcGFyZW50IG5wLXYnPiAgICAgICAgPGg1PkRhc2hib2FyZDwvaDU+ICAgICAgICA8ZGl2IGNsYXNzPSdyb3cnPiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NvbCBzMic+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NhcmQtcGFuZWwgcic+IDxzcGFuPlRlc3RzPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3BhbmVsLWxlYWQnPjE8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY29sIHMyJz4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2FyZC1wYW5lbCByJz4gPHNwYW4+U3RlcHM8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncGFuZWwtbGVhZCc+MTA8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY29sIHMyJz4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2FyZC1wYW5lbCByJz4gICAgICAgICAgICAgICAgICAgIFN0YXJ0ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwYW5lbC1sZWFkJz4wMS0wNy0yMDIyIDIzOjA2OjAyPC9kaXY+ICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NvbCBzMic+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NhcmQtcGFuZWwgcic+ICAgICAgICAgICAgICAgICAgICBFbmQgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3BhbmVsLWxlYWQnPjAxLTA3LTIwMjIgMjM6MDY6NTE8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPGRpdiBjbGFzcz0nY29sIHMyJz4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nY2FyZC1wYW5lbCByJz4gICAgICAgICAgICAgICAgICAgIFRpbWUgVGFrZW4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3BhbmVsLWxlYWQnPjAwOjAwOjQ5LjA1Mjc4NDM8L2Rpdj4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NvbCBzNCc+ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdjYXJkLXBhbmVsJz4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ncmlnaHQgbGFiZWwgY3lhbiB3aGl0ZS10ZXh0Jz5FbnZpcm9ubWVudDwvc3Bhbj48cD4mbmJzcDs8L3A+ICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+TmFtZTwvdGg+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+VmFsdWU8L3RoPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Ib3N0IE5hbWU8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5RWkxUMTI5PC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlVzZXIgTmFtZTwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPm5rdW1hckBuZXB0dW5ldGcuY29tPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlByb2plY3Q8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5OZXB0dW5lIDM2MDwvdGQ+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5SZWxlYXNlPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+UmVsZWFzZSAxLjQuOS4yPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlRlc3QgQ3ljbGU8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5SZWdyZXNzaW9uIFRlc3RpbmcgLSBBdXRvbWF0aW9uPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlRlc3QgU3VpdGU8L3RkPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5VSS0zPC90ZD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgIDwvZGl2PiAgICA8L2Rpdj48L2Rpdj48IS0tIGRhc2hib2FyZCB2aWV3IC0tPiAgICAgICAgICAgIDwhLS0gZXhjZXB0aW9uIHZpZXcgLS0+CQk8L2Rpdj4JCTwhLS0gY29udGFpbmVyIC0tPgkJPHNjcmlwdD4JCQl2YXIgc3RhdHVzR3JvdXAgPSB7CQkJICAgIHBhc3NQYXJlbnQ6IDEsCQkJICAgIGZhaWxQYXJlbnQ6IDAsCQkJICAgIGZhdGFsUGFyZW50OiAwLAkJCSAgICBlcnJvclBhcmVudDogMCwJCQkgICAgd2FybmluZ1BhcmVudDogMCwJCQkgICAgc2tpcFBhcmVudDogMCwJCQkJCQkJICAgIHBhc3NDaGlsZDogMTAsCQkJICAgIGZhaWxDaGlsZDogMCwJCQkgICAgZmF0YWxDaGlsZDogMCwJCQkgICAgZXJyb3JDaGlsZDogMCwJCQkgICAgd2FybmluZ0NoaWxkOiAwLAkJCSAgICBza2lwQ2hpbGQ6IDAsCQkJICAgIGluZm9DaGlsZDogMCwJCQkJCQkJICAgIHBhc3NHcmFuZENoaWxkOiAwLAkJCSAgICBmYWlsR3JhbmRDaGlsZDogMCwJCQkgICAgZmF0YWxHcmFuZENoaWxkOiAwLAkJCSAgICBlcnJvckdyYW5kQ2hpbGQ6IDAsCQkJICAgIHdhcm5pbmdHcmFuZENoaWxkOiAwLAkJCSAgICBza2lwR3JhbmRDaGlsZDogMCwJCQkgICAgaW5mb0dyYW5kQ2hpbGQ6IDAJCQl9OwkJPC9zY3JpcHQ+CQk8c2NyaXB0IHNyYz0naHR0cHM6Ly9jZG4ucmF3Z2l0LmNvbS9hbnNob29hcm9yYS9leHRlbnRyZXBvcnRzLWNzaGFycC9lNDY4MDU0ZDY3ZDkzYzJmZDljOGYwZjYwZTMxYTdlYTA5ZmEzYmY2L2Rpc3QvanMvZXh0ZW50LmpzJyB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPjwvc2NyaXB0PgkJCQkJCSAgICAgICAgICAgIDxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0Jz4JCQkgICAgICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0Pgk8L2JvZHk+CTwvaHRtbD4="}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 11:07:04=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 401328f8-5e39-4555-bf29-76a286f22edc
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 11:12:36=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 3d77c9ed-f2b0-433e-8964-cb3cc31e3ac1
Json Content:{"name":"Permissions_Validation_Usage Plans_View Usage Plans_Utility Meter Reader_OFF","test_case":{"id":34105070}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 11:12:36=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-01-2022 11:13:43=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 6855db59-bb11-4922-bf38-c77651411c7d
Json Content:{"name":"Permissions_Validation_Usage Plans_Edit Usage Plans_Neptune System Admin_Default_ON","test_case":{"id":34105380}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 11:13:43=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-01-2022 11:19:01=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 74581977-f216-41ed-b6e7-6963bdb02798
Json Content:{"name":"Permissions_Validation_Usage Plans_Edit Usage Plans_Utility Meter Reader_OFF","test_case":{"id":34105385}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 11:19:01=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http POST request=======07-01-2022 11:23:32=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer 6854383c-de08-43b4-a1a4-802aecbbd5f8
Json Content:{"name":"Permissions_Validation_Left Navigation_SDK Access_Neptune CSR_Default_OFF","test_case":{"id":34503690}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-01-2022 11:23:32=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
==============Error in http GET request=======07-01-2022 11:27:42========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-cycles?parentId=1044576&parentType=release
Auth Header:bearer 7f158f76-4211-4537-85f1-c343f6105f2b
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-01-2022 11:27:43=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 7f158f76-4211-4537-85f1-c343f6105f2b
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
