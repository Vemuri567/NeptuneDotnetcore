==============Error in http POST request=======07-05-2022 10:43:34=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295104987/test-logs
Auth Header:bearer 409f47c3-fd5e-41e5-9f6d-c158e5891074
Json Content:{"exe_start_date": "2022-07-05T10:39:28+05:30", "exe_end_date": "2022-07-05T10:43:04+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 10:43:35=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 409f47c3-fd5e-41e5-9f6d-c158e5891074
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 10:46:19=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295104997/test-logs
Auth Header:bearer cec7a007-8a56-46ec-b205-f53562412148
Json Content:{"exe_start_date": "2022-07-05T10:43:37+05:30", "exe_end_date": "2022-07-05T10:45:56+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 10:46:20=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer cec7a007-8a56-46ec-b205-f53562412148
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 10:49:38=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295107520/test-logs
Auth Header:bearer 700a0cf7-f053-4fcb-9a17-672690e1a2f1
Json Content:{"exe_start_date": "2022-07-05T10:48:15+05:30", "exe_end_date": "2022-07-05T10:49:11+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 10:49:40=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 700a0cf7-f053-4fcb-9a17-672690e1a2f1
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 10:50:58=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295112425/test-logs
Auth Header:bearer 53d57182-a4ac-42ad-b78e-a0199532ada7
Json Content:{"exe_start_date": "2022-07-05T10:49:42+05:30", "exe_end_date": "2022-07-05T10:50:30+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 10:50:59=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 53d57182-a4ac-42ad-b78e-a0199532ada7
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 11:07:40=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295106748/test-logs
Auth Header:bearer dbe12e39-9414-4a43-ab2f-582deb53f7c4
Json Content:{"exe_start_date": "2022-07-05T11:06:33+05:30", "exe_end_date": "2022-07-05T11:07:24+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 11:07:41=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer dbe12e39-9414-4a43-ab2f-582deb53f7c4
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 02:46:49=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295347890/test-logs
Auth Header:bearer b7bff86b-a2c1-4ea9-aa0d-d6f84e198b58
Json Content:{"exe_start_date": "2022-07-05T14:42:51+05:30", "exe_end_date": "2022-07-05T14:43:57+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 02:46:50=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer b7bff86b-a2c1-4ea9-aa0d-d6f84e198b58
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 02:49:40=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295347905/test-logs
Auth Header:bearer d06a80fb-bf64-47e6-95d8-015f6e1087b2
Json Content:{"exe_start_date": "2022-07-05T14:46:52+05:30", "exe_end_date": "2022-07-05T14:47:48+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 02:49:41=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer d06a80fb-bf64-47e6-95d8-015f6e1087b2
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 02:54:04=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295349338/test-logs
Auth Header:bearer 15f53798-c5ab-4eaa-9857-a2eb3e6530bd
Json Content:{"exe_start_date": "2022-07-05T14:49:43+05:30", "exe_end_date": "2022-07-05T14:50:35+05:30", "status": { "id": 601 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 02:54:05=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 15f53798-c5ab-4eaa-9857-a2eb3e6530bd
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 02:59:20=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295355678/test-logs
Auth Header:bearer 554bd173-7525-48a7-9f0c-4f4f07a6ffa1
Json Content:{"exe_start_date": "2022-07-05T14:56:32+05:30", "exe_end_date": "2022-07-05T14:58:15+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 02:59:21=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 554bd173-7525-48a7-9f0c-4f4f07a6ffa1
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 03:03:59=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295356649/test-logs
Auth Header:bearer 73bb296e-6b23-4f45-b2eb-5bef30623797
Json Content:{"exe_start_date": "2022-07-05T14:59:23+05:30", "exe_end_date": "2022-07-05T15:01:26+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 03:04:00=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer 73bb296e-6b23-4f45-b2eb-5bef30623797
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 03:08:15=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295357030/test-logs
Auth Header:bearer d73beded-82f2-48b1-9f91-1880248c36ed
Json Content:{"exe_start_date": "2022-07-05T15:04:02+05:30", "exe_end_date": "2022-07-05T15:05:46+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 03:08:16=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer d73beded-82f2-48b1-9f91-1880248c36ed
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 03:22:03=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs/295359028/test-logs
Auth Header:bearer c8e8cf97-9f71-4231-8d53-ae27a81fbbf3
Json Content:{"exe_start_date": "2022-07-05T15:12:21+05:30", "exe_end_date": "2022-07-05T15:14:07+05:30", "status": { "id": 602 }, "attachments":[{"name": "TestReport.html","content_type":"text/html", "data":""}]  }
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 03:22:04=======
URL:https://ntg.qtestnet.com/oauth/revoke
Auth Header:bearer c8e8cf97-9f71-4231-8d53-ae27a81fbbf3
Json Content:{"Cache-Control":"no-cache"}
Content Type:
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http GET request=======07-05-2022 03:24:47========
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-cases/39084838
Auth Header:bearer a66b0969-ca46-43f8-8896-781be9f6adac
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==============Error in http POST request=======07-05-2022 03:42:37=======
URL:https://ntg.qtestnet.com/api/v3/projects/29637/test-runs?parentId=9079377&parentType=test-suite
Auth Header:bearer b473d1e9-d3a7-4eb6-9529-23f227a72612
Json Content:{"name":"Permissions_Billing services Feature Block_View FTP Credentials_Utility user_Enabled","test_case":{"id":52288436}}
Content Type:application/json
Exception Message:The remote server returned an error: (401) Unauthorized.
=========================================================================
==========================07-05-2022 03:42:37=======
Exception Message:Unexpected character encountered while parsing value: P. Path '', line 0, position 0.
=========================================================================
